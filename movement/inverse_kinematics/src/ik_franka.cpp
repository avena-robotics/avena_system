#include "inverse_kinematics/ik_franka.hpp"

namespace ik_franka
{
    bool IKSolver::ComputeIk(const IkReal *eetrans, const IkReal *eerot, const IkReal *pfree, IkSolutionListBase<IkReal> &solutions)
    {
        j0 = numeric_limits<IkReal>::quiet_NaN();
        _ij0[0] = -1;
        _ij0[1] = -1;
        _nj0 = -1;
        j1 = numeric_limits<IkReal>::quiet_NaN();
        _ij1[0] = -1;
        _ij1[1] = -1;
        _nj1 = -1;
        j2 = numeric_limits<IkReal>::quiet_NaN();
        _ij2[0] = -1;
        _ij2[1] = -1;
        _nj2 = -1;
        j3 = numeric_limits<IkReal>::quiet_NaN();
        _ij3[0] = -1;
        _ij3[1] = -1;
        _nj3 = -1;
        j4 = numeric_limits<IkReal>::quiet_NaN();
        _ij4[0] = -1;
        _ij4[1] = -1;
        _nj4 = -1;
        j5 = numeric_limits<IkReal>::quiet_NaN();
        _ij5[0] = -1;
        _ij5[1] = -1;
        _nj5 = -1;
        _ij6[0] = -1;
        _ij6[1] = -1;
        _nj6 = 0;
        for (int dummyiter = 0; dummyiter < 1; ++dummyiter)
        {
            solutions.Clear();
            j6 = pfree[0];
            cj6 = cos(pfree[0]);
            sj6 = sin(pfree[0]), htj6 = tan(pfree[0] * 0.5);
            r00 = eerot[0 * 3 + 0];
            r01 = eerot[0 * 3 + 1];
            r02 = eerot[0 * 3 + 2];
            r10 = eerot[1 * 3 + 0];
            r11 = eerot[1 * 3 + 1];
            r12 = eerot[1 * 3 + 2];
            r20 = eerot[2 * 3 + 0];
            r21 = eerot[2 * 3 + 1];
            r22 = eerot[2 * 3 + 2];
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_r00 = ((((0.707106781186547) * r01)) + (((0.707106781186548) * r00)));
            new_r01 = ((((-0.707106781186547) * r00)) + (((0.707106781186548) * r01)));
            new_r02 = r02;
            new_px = (px + (((-0.107) * r02)));
            new_r10 = ((((0.707106781186547) * r11)) + (((0.707106781186548) * r10)));
            new_r11 = ((((0.707106781186548) * r11)) + (((-0.707106781186547) * r10)));
            new_r12 = r12;
            new_py = ((((-0.107) * r12)) + py);
            new_r20 = ((((0.707106781186547) * r21)) + (((0.707106781186548) * r20)));
            new_r21 = ((((0.707106781186548) * r21)) + (((-0.707106781186547) * r20)));
            new_r22 = r22;
            new_pz = ((-0.333) + pz + (((-0.107) * r22)));
            r00 = new_r00;
            r01 = new_r01;
            r02 = new_r02;
            r10 = new_r10;
            r11 = new_r11;
            r12 = new_r12;
            r20 = new_r20;
            r21 = new_r21;
            r22 = new_r22;
            px = new_px;
            py = new_py;
            pz = new_pz;
            IkReal x87 = ((1.0) * px);
            IkReal x88 = ((1.0) * pz);
            IkReal x89 = ((1.0) * py);
            pp = ((px * px) + (py * py) + (pz * pz));
            npx = (((px * r00)) + ((py * r10)) + ((pz * r20)));
            npy = (((px * r01)) + ((py * r11)) + ((pz * r21)));
            npz = (((px * r02)) + ((py * r12)) + ((pz * r22)));
            rxp0_0 = ((((-1.0) * r20 * x89)) + ((pz * r10)));
            rxp0_1 = (((px * r20)) + (((-1.0) * r00 * x88)));
            rxp0_2 = ((((-1.0) * r10 * x87)) + ((py * r00)));
            rxp1_0 = ((((-1.0) * r21 * x89)) + ((pz * r11)));
            rxp1_1 = (((px * r21)) + (((-1.0) * r01 * x88)));
            rxp1_2 = ((((-1.0) * r11 * x87)) + ((py * r01)));
            rxp2_0 = ((((-1.0) * r22 * x89)) + ((pz * r12)));
            rxp2_1 = ((((-1.0) * r02 * x88)) + ((px * r22)));
            rxp2_2 = ((((-1.0) * r12 * x87)) + ((py * r02)));
            {
                IkReal j3array[2], cj3array[2], sj3array[2];
                bool j3valid[2] = {false};
                _nj3 = 2;
                if ((((0.986881610513004) + (((-3.89793688895078) * pp)) + (((0.686036892455338) * cj6 * npx)) + (((-0.686036892455338) * npy * sj6)))) < -1 - IKFAST_SINCOS_THRESH || (((0.986881610513004) + (((-3.89793688895078) * pp)) + (((0.686036892455338) * cj6 * npx)) + (((-0.686036892455338) * npy * sj6)))) > 1 + IKFAST_SINCOS_THRESH)
                    continue;
                IkReal x90 = IKasin(((0.986881610513004) + (((-3.89793688895078) * pp)) + (((0.686036892455338) * cj6 * npx)) + (((-0.686036892455338) * npy * sj6))));
                j3array[0] = ((1.10379390314189) + (((1.0) * x90)));
                sj3array[0] = IKsin(j3array[0]);
                cj3array[0] = IKcos(j3array[0]);
                j3array[1] = ((4.24538655673168) + (((-1.0) * x90)));
                sj3array[1] = IKsin(j3array[1]);
                cj3array[1] = IKcos(j3array[1]);
                if (j3array[0] > IKPI)
                {
                    j3array[0] -= IK2PI;
                }
                else if (j3array[0] < -IKPI)
                {
                    j3array[0] += IK2PI;
                }
                j3valid[0] = true;
                if (j3array[1] > IKPI)
                {
                    j3array[1] -= IK2PI;
                }
                else if (j3array[1] < -IKPI)
                {
                    j3array[1] += IK2PI;
                }
                j3valid[1] = true;
                for (int ij3 = 0; ij3 < 2; ++ij3)
                {
                    if (!j3valid[ij3])
                    {
                        continue;
                    }
                    _ij3[0] = ij3;
                    _ij3[1] = -1;
                    for (int iij3 = ij3 + 1; iij3 < 2; ++iij3)
                    {
                        if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                        {
                            j3valid[iij3] = false;
                            _ij3[1] = iij3;
                            break;
                        }
                    }
                    j3 = j3array[ij3];
                    cj3 = cj3array[ij3];
                    sj3 = sj3array[ij3];

                    {
                        IkReal j5eval[2];
                        IkReal x91 = (cj6 * npx);
                        IkReal x92 = (npy * sj6);
                        j5eval[0] = ((1.0) + (((129.132231404959) * (x91 * x91))) + (((22.7272727272727) * x92)) + (((-258.264462809917) * x91 * x92)) + (((129.132231404959) * (npz * npz))) + (((129.132231404959) * (x92 * x92))) + (((-22.7272727272727) * x91)));
                        j5eval[1] = ((IKabs(npz)) + (IKabs(((0.088) + x92 + (((-1.0) * x91))))));
                        if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                        {
                            {
                                IkReal j4eval[1];
                                j4eval[0] = ((-1.0) + cj3 + (((3.83030303030303) * sj3)));
                                if (IKabs(j4eval[0]) < 0.0000010000000000)
                                {
                                    {
                                        IkReal evalcond[1];
                                        bool bgotonextstatement = true;
                                        do
                                        {
                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-2.63084142381503) + j3)))), 6.28318530717959)));
                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                            {
                                                bgotonextstatement = false;
                                                {
                                                    IkReal j4array[2], cj4array[2], sj4array[2];
                                                    bool j4valid[2] = {false};
                                                    _nj4 = 2;
                                                    sj4array[0] = ((((-2597402597.4026) * npx * sj6)) + (((-2597402597.4026) * cj6 * npy)));
                                                    if (sj4array[0] >= -1 - IKFAST_SINCOS_THRESH && sj4array[0] <= 1 + IKFAST_SINCOS_THRESH)
                                                    {
                                                        j4valid[0] = j4valid[1] = true;
                                                        j4array[0] = IKasin(sj4array[0]);
                                                        cj4array[0] = IKcos(j4array[0]);
                                                        sj4array[1] = sj4array[0];
                                                        j4array[1] = j4array[0] > 0 ? (IKPI - j4array[0]) : (-IKPI - j4array[0]);
                                                        cj4array[1] = -cj4array[0];
                                                    }
                                                    else if (isnan(sj4array[0]))
                                                    {
                                                        // probably any value will work
                                                        j4valid[0] = true;
                                                        cj4array[0] = 1;
                                                        sj4array[0] = 0;
                                                        j4array[0] = 0;
                                                    }
                                                    for (int ij4 = 0; ij4 < 2; ++ij4)
                                                    {
                                                        if (!j4valid[ij4])
                                                        {
                                                            continue;
                                                        }
                                                        _ij4[0] = ij4;
                                                        _ij4[1] = -1;
                                                        for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                        {
                                                            if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                            {
                                                                j4valid[iij4] = false;
                                                                _ij4[1] = iij4;
                                                                break;
                                                            }
                                                        }
                                                        j4 = j4array[ij4];
                                                        cj4 = cj4array[ij4];
                                                        sj4 = sj4array[ij4];

                                                        {
                                                            IkReal j5eval[3];
                                                            sj3 = 0.48883274;
                                                            cj3 = -0.87237753;
                                                            j3 = 2.63084416569479;
                                                            IkReal x93 = npz * npz;
                                                            IkReal x94 = pp * pp;
                                                            j5eval[0] = ((-1.0) + (((161.707637091607) * pp)) + (((-202.500643017207) * x93)) + (((-6537.33997343774) * x94)));
                                                            j5eval[1] = IKsign(((-987651184.806386) + (((-6456611570247.93) * x94)) + (((-200000000000.0) * x93)) + (((159710739365.767) * pp))));
                                                            j5eval[2] = ((IKabs(((955709056.915841) + (((-77272726670.4545) * pp)) + (((77.0) * cj4 * npz))))) + (IKabs(((((437.5) * cj4 * pp)) + (((13599999894.0) * npz)) + (((-5.41099984971219) * cj4))))));
                                                            if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                            {
                                                                {
                                                                    IkReal j5eval[3];
                                                                    sj3 = 0.48883274;
                                                                    cj3 = -0.87237753;
                                                                    j3 = 2.63084416569479;
                                                                    IkReal x95 = npz * npz;
                                                                    IkReal x96 = (npx * sj6);
                                                                    IkReal x97 = (cj6 * npy);
                                                                    IkReal x98 = (pp * sj4);
                                                                    IkReal x99 = ((7027272532.09375) * cj4);
                                                                    IkReal x100 = ((568181818181.818) * cj4 * pp);
                                                                    IkReal x101 = (cj6 * npx * sj4);
                                                                    IkReal x102 = (npy * sj4 * sj6);
                                                                    IkReal x103 = (sj4 * x95);
                                                                    IkReal x104 = ((100000000000.0) * cj4 * npz);
                                                                    IkReal x105 = (npy * sj6 * x98);
                                                                    j5eval[0] = ((((-80.8538185458036) * x98)) + (((-11.3636363636364) * x101)) + sj4 + (((918.793392565951) * cj6 * npx * x98)) + (((-918.793392565951) * x105)) + (((161.707637091607) * x103)) + (((11.3636363636364) * x102)));
                                                                    j5eval[1] = IKsign(((((-568181818181.818) * x105)) + (((568181818181.818) * cj6 * npx * x98)) + (((7027272532.09375) * x102)) + (((618399982.82425) * sj4)) + (((-7027272532.09375) * x101)) + (((100000000000.0) * x103)) + (((-50000000000.0) * x98))));
                                                                    j5eval[2] = ((IKabs(((((-6799999947.0) * x102)) + (((6799999947.0) * x101)) + (((-598399995.336) * sj4)) + ((x104 * x96)) + ((x104 * x97))))) + (IKabs((((x100 * x96)) + ((x100 * x97)) + (((-6799999947.0) * npz * sj4)) + (((-1.0) * x96 * x99)) + (((-1.0) * x97 * x99))))));
                                                                    if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                                    {
                                                                        {
                                                                            IkReal j5eval[2];
                                                                            sj3 = 0.48883274;
                                                                            cj3 = -0.87237753;
                                                                            j3 = 2.63084416569479;
                                                                            IkReal x106 = npz * npz;
                                                                            IkReal x107 = ((568181818181.818) * pp);
                                                                            IkReal x108 = (cj4 * pp);
                                                                            IkReal x109 = ((918.793392565951) * pp);
                                                                            IkReal x110 = (cj4 * npy * sj6);
                                                                            IkReal x111 = (cj4 * cj6 * npx);
                                                                            IkReal x112 = (cj4 * x106);
                                                                            j5eval[0] = (cj4 + (((-11.3636363636364) * x111)) + (((-80.8538185458036) * x108)) + (((918.793392565951) * cj6 * npx * x108)) + (((161.707637091607) * x112)) + (((11.3636363636364) * x110)) + (((-918.793392565951) * npy * sj6 * x108)));
                                                                            j5eval[1] = IKsign(((((7027272532.09375) * x110)) + (((618399982.82425) * cj4)) + (((-1.0) * x107 * x110)) + (((-50000000000.0) * x108)) + (((-7027272532.09375) * x111)) + (((100000000000.0) * x112)) + ((x107 * x111))));
                                                                            if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                            {
                                                                                {
                                                                                    IkReal evalcond[1];
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j4)))), 6.28318530717959)));
                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                        {
                                                                                            bgotonextstatement = false;
                                                                                            {
                                                                                                IkReal j5eval[3];
                                                                                                sj3 = 0.48883274;
                                                                                                cj3 = -0.87237753;
                                                                                                j3 = 2.63084416569479;
                                                                                                sj4 = 1.0;
                                                                                                cj4 = 0;
                                                                                                j4 = 1.5707963267949;
                                                                                                IkReal x113 = npz * npz;
                                                                                                IkReal x114 = pp * pp;
                                                                                                j5eval[0] = ((-1.0) + (((161.707637091607) * pp)) + (((-202.500643017207) * x113)) + (((-6537.33997343774) * x114)));
                                                                                                j5eval[1] = IKsign(((-493825592.403193) + (((-100000000000.0) * x113)) + (((79855369682.8835) * pp)) + (((-3228305785123.97) * x114))));
                                                                                                j5eval[2] = ((IKabs(npz)) + (((1.47058824675606e-10) * (IKabs(((477854528.457921) + (((-38636363335.2273) * pp))))))));
                                                                                                if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j5eval[3];
                                                                                                        sj3 = 0.48883274;
                                                                                                        cj3 = -0.87237753;
                                                                                                        j3 = 2.63084416569479;
                                                                                                        sj4 = 1.0;
                                                                                                        cj4 = 0;
                                                                                                        j4 = 1.5707963267949;
                                                                                                        IkReal x115 = npz * npz;
                                                                                                        IkReal x116 = (cj6 * npx);
                                                                                                        IkReal x117 = (npy * sj6);
                                                                                                        IkReal x118 = (pp * x117);
                                                                                                        j5eval[0] = ((-1.0) + (((918.793392565951) * x118)) + (((-11.3636363636364) * x117)) + (((-918.793392565951) * pp * x116)) + (((-161.707637091607) * x115)) + (((11.3636363636364) * x116)) + (((80.8538185458036) * pp)));
                                                                                                        j5eval[1] = IKsign(((-618399982.82425) + (((-100000000000.0) * x115)) + (((7027272532.09375) * x116)) + (((50000000000.0) * pp)) + (((568181818181.818) * x118)) + (((-7027272532.09375) * x117)) + (((-568181818181.818) * pp * x116))));
                                                                                                        j5eval[2] = ((IKabs(npz)) + (((1.47058824675606e-10) * (IKabs(((598399995.336) + (((-6799999947.0) * x116)) + (((6799999947.0) * x117))))))));
                                                                                                        if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                                                                        {
                                                                                                            continue; // no branches [j5]
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                                bool j5valid[1] = {false};
                                                                                                                _nj5 = 1;
                                                                                                                IkReal x119 = (cj6 * npx);
                                                                                                                IkReal x120 = (npy * sj6);
                                                                                                                IkReal x121 = ((568181818181.818) * pp);
                                                                                                                CheckValue<IkReal> x122 = IKatan2WithCheck(IkReal(((598399995.336) + (((-6799999947.0) * x119)) + (((6799999947.0) * x120)))), IkReal(((6799999947.0) * npz)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                if (!x122.valid)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                CheckValue<IkReal> x123 = IKPowWithIntegerCheck(IKsign(((-618399982.82425) + (((-1.0) * x119 * x121)) + (((7027272532.09375) * x119)) + (((50000000000.0) * pp)) + (((-7027272532.09375) * x120)) + ((x120 * x121)) + (((-100000000000.0) * (npz * npz))))), -1);
                                                                                                                if (!x123.valid)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                j5array[0] = ((-1.5707963267949) + (x122.value) + (((1.5707963267949) * (x123.value))));
                                                                                                                sj5array[0] = IKsin(j5array[0]);
                                                                                                                cj5array[0] = IKcos(j5array[0]);
                                                                                                                if (j5array[0] > IKPI)
                                                                                                                {
                                                                                                                    j5array[0] -= IK2PI;
                                                                                                                }
                                                                                                                else if (j5array[0] < -IKPI)
                                                                                                                {
                                                                                                                    j5array[0] += IK2PI;
                                                                                                                }
                                                                                                                j5valid[0] = true;
                                                                                                                for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                                {
                                                                                                                    if (!j5valid[ij5])
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    _ij5[0] = ij5;
                                                                                                                    _ij5[1] = -1;
                                                                                                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                    {
                                                                                                                        if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                        {
                                                                                                                            j5valid[iij5] = false;
                                                                                                                            _ij5[1] = iij5;
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    j5 = j5array[ij5];
                                                                                                                    cj5 = cj5array[ij5];
                                                                                                                    sj5 = sj5array[ij5];
                                                                                                                    {
                                                                                                                        IkReal evalcond[3];
                                                                                                                        IkReal x124 = IKsin(j5);
                                                                                                                        IkReal x125 = IKcos(j5);
                                                                                                                        IkReal x126 = ((5.68181818181818) * pp);
                                                                                                                        IkReal x127 = ((1.0) * npz * x124);
                                                                                                                        evalcond[0] = ((0.06799999947) + (((-1.0) * x124 * x126)) + (((0.0702727253209375) * x124)) + ((npz * x125)));
                                                                                                                        evalcond[1] = ((((-1.0) * x127)) + (((-1.0) * x125 * x126)) + (((0.0702727253209375) * x125)));
                                                                                                                        evalcond[2] = ((((-1.0) * x127)) + (((0.088) * x125)) + ((npy * sj6 * x125)) + (((-1.0) * cj6 * npx * x125)));
                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    rotationfunction0(solutions);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                        bool j5valid[1] = {false};
                                                                                                        _nj5 = 1;
                                                                                                        CheckValue<IkReal> x667 = IKatan2WithCheck(IkReal(((477854528.457921) + (((-38636363335.2273) * pp)))), IkReal(((6799999947.0) * npz)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                        if (!x667.valid)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        CheckValue<IkReal> x668 = IKPowWithIntegerCheck(IKsign(((-493825592.403193) + (((79855369682.8835) * pp)) + (((-3228305785123.97) * (pp * pp))) + (((-100000000000.0) * (npz * npz))))), -1);
                                                                                                        if (!x668.valid)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        j5array[0] = ((-1.5707963267949) + (x667.value) + (((1.5707963267949) * (x668.value))));
                                                                                                        sj5array[0] = IKsin(j5array[0]);
                                                                                                        cj5array[0] = IKcos(j5array[0]);
                                                                                                        if (j5array[0] > IKPI)
                                                                                                        {
                                                                                                            j5array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if (j5array[0] < -IKPI)
                                                                                                        {
                                                                                                            j5array[0] += IK2PI;
                                                                                                        }
                                                                                                        j5valid[0] = true;
                                                                                                        for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                        {
                                                                                                            if (!j5valid[ij5])
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij5[0] = ij5;
                                                                                                            _ij5[1] = -1;
                                                                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                            {
                                                                                                                if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                {
                                                                                                                    j5valid[iij5] = false;
                                                                                                                    _ij5[1] = iij5;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j5 = j5array[ij5];
                                                                                                            cj5 = cj5array[ij5];
                                                                                                            sj5 = sj5array[ij5];
                                                                                                            {
                                                                                                                IkReal evalcond[3];
                                                                                                                IkReal x669 = IKsin(j5);
                                                                                                                IkReal x670 = IKcos(j5);
                                                                                                                IkReal x671 = ((5.68181818181818) * pp);
                                                                                                                IkReal x672 = ((1.0) * npz * x669);
                                                                                                                evalcond[0] = ((0.06799999947) + (((-1.0) * x669 * x671)) + (((0.0702727253209375) * x669)) + ((npz * x670)));
                                                                                                                evalcond[1] = ((((0.0702727253209375) * x670)) + (((-1.0) * x670 * x671)) + (((-1.0) * x672)));
                                                                                                                evalcond[2] = (((npy * sj6 * x670)) + (((0.088) * x670)) + (((-1.0) * cj6 * npx * x670)) + (((-1.0) * x672)));
                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            rotationfunction0(solutions);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                        bool bgotonextstatement = true;
                                                                                        do
                                                                                        {
                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j4)))), 6.28318530717959)));
                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                            {
                                                                                                bgotonextstatement = false;
                                                                                                {
                                                                                                    IkReal j5eval[3];
                                                                                                    sj3 = 0.48883274;
                                                                                                    cj3 = -0.87237753;
                                                                                                    j3 = 2.63084416569479;
                                                                                                    sj4 = -1.0;
                                                                                                    cj4 = 0;
                                                                                                    j4 = -1.5707963267949;
                                                                                                    IkReal x673 = npz * npz;
                                                                                                    IkReal x674 = pp * pp;
                                                                                                    j5eval[0] = ((-1.0) + (((161.707637091607) * pp)) + (((-6537.33997343774) * x674)) + (((-202.500643017207) * x673)));
                                                                                                    j5eval[1] = IKsign(((-493825592.403193) + (((-100000000000.0) * x673)) + (((-3228305785123.97) * x674)) + (((79855369682.8835) * pp))));
                                                                                                    j5eval[2] = ((IKabs(npz)) + (((1.47058824675606e-10) * (IKabs(((477854528.457921) + (((-38636363335.2273) * pp))))))));
                                                                                                    if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j5eval[3];
                                                                                                            sj3 = 0.48883274;
                                                                                                            cj3 = -0.87237753;
                                                                                                            j3 = 2.63084416569479;
                                                                                                            sj4 = -1.0;
                                                                                                            cj4 = 0;
                                                                                                            j4 = -1.5707963267949;
                                                                                                            IkReal x675 = npz * npz;
                                                                                                            IkReal x676 = (cj6 * npx);
                                                                                                            IkReal x677 = (npy * sj6);
                                                                                                            IkReal x678 = (pp * x677);
                                                                                                            j5eval[0] = ((1.0) + (((918.793392565951) * pp * x676)) + (((-11.3636363636364) * x676)) + (((161.707637091607) * x675)) + (((-918.793392565951) * x678)) + (((11.3636363636364) * x677)) + (((-80.8538185458036) * pp)));
                                                                                                            j5eval[1] = IKsign(((618399982.82425) + (((568181818181.818) * pp * x676)) + (((7027272532.09375) * x677)) + (((-50000000000.0) * pp)) + (((-568181818181.818) * x678)) + (((-7027272532.09375) * x676)) + (((100000000000.0) * x675))));
                                                                                                            j5eval[2] = ((((1.47058824675606e-10) * (IKabs(((-598399995.336) + (((6799999947.0) * x676)) + (((-6799999947.0) * x677))))))) + (IKabs(npz)));
                                                                                                            if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                                                                            {
                                                                                                                continue; // no branches [j5]
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                                    bool j5valid[1] = {false};
                                                                                                                    _nj5 = 1;
                                                                                                                    IkReal x679 = (npy * sj6);
                                                                                                                    IkReal x680 = (cj6 * npx);
                                                                                                                    IkReal x681 = ((568181818181.818) * pp);
                                                                                                                    CheckValue<IkReal> x682 = IKPowWithIntegerCheck(IKsign(((618399982.82425) + (((7027272532.09375) * x679)) + (((-1.0) * x679 * x681)) + (((-50000000000.0) * pp)) + (((100000000000.0) * (npz * npz))) + (((-7027272532.09375) * x680)) + ((x680 * x681)))), -1);
                                                                                                                    if (!x682.valid)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    CheckValue<IkReal> x683 = IKatan2WithCheck(IkReal(((-598399995.336) + (((-6799999947.0) * x679)) + (((6799999947.0) * x680)))), IkReal(((-6799999947.0) * npz)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                    if (!x683.valid)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x682.value))) + (x683.value));
                                                                                                                    sj5array[0] = IKsin(j5array[0]);
                                                                                                                    cj5array[0] = IKcos(j5array[0]);
                                                                                                                    if (j5array[0] > IKPI)
                                                                                                                    {
                                                                                                                        j5array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if (j5array[0] < -IKPI)
                                                                                                                    {
                                                                                                                        j5array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j5valid[0] = true;
                                                                                                                    for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                                    {
                                                                                                                        if (!j5valid[ij5])
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij5[0] = ij5;
                                                                                                                        _ij5[1] = -1;
                                                                                                                        for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                        {
                                                                                                                            if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                            {
                                                                                                                                j5valid[iij5] = false;
                                                                                                                                _ij5[1] = iij5;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j5 = j5array[ij5];
                                                                                                                        cj5 = cj5array[ij5];
                                                                                                                        sj5 = sj5array[ij5];
                                                                                                                        {
                                                                                                                            IkReal evalcond[3];
                                                                                                                            IkReal x684 = IKsin(j5);
                                                                                                                            IkReal x685 = IKcos(j5);
                                                                                                                            IkReal x686 = ((5.68181818181818) * pp);
                                                                                                                            IkReal x687 = (npz * x684);
                                                                                                                            evalcond[0] = ((0.06799999947) + (((0.0702727253209375) * x684)) + ((npz * x685)) + (((-1.0) * x684 * x686)));
                                                                                                                            evalcond[1] = ((((-1.0) * x685 * x686)) + (((0.0702727253209375) * x685)) + (((-1.0) * x687)));
                                                                                                                            evalcond[2] = ((((-1.0) * npy * sj6 * x685)) + (((-0.088) * x685)) + x687 + ((cj6 * npx * x685)));
                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        rotationfunction0(solutions);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                            bool j5valid[1] = {false};
                                                                                                            _nj5 = 1;
                                                                                                            CheckValue<IkReal> x688 = IKatan2WithCheck(IkReal(((477854528.457921) + (((-38636363335.2273) * pp)))), IkReal(((6799999947.0) * npz)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                            if (!x688.valid)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            CheckValue<IkReal> x689 = IKPowWithIntegerCheck(IKsign(((-493825592.403193) + (((79855369682.8835) * pp)) + (((-3228305785123.97) * (pp * pp))) + (((-100000000000.0) * (npz * npz))))), -1);
                                                                                                            if (!x689.valid)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            j5array[0] = ((-1.5707963267949) + (x688.value) + (((1.5707963267949) * (x689.value))));
                                                                                                            sj5array[0] = IKsin(j5array[0]);
                                                                                                            cj5array[0] = IKcos(j5array[0]);
                                                                                                            if (j5array[0] > IKPI)
                                                                                                            {
                                                                                                                j5array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if (j5array[0] < -IKPI)
                                                                                                            {
                                                                                                                j5array[0] += IK2PI;
                                                                                                            }
                                                                                                            j5valid[0] = true;
                                                                                                            for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                            {
                                                                                                                if (!j5valid[ij5])
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij5[0] = ij5;
                                                                                                                _ij5[1] = -1;
                                                                                                                for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                {
                                                                                                                    if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                    {
                                                                                                                        j5valid[iij5] = false;
                                                                                                                        _ij5[1] = iij5;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j5 = j5array[ij5];
                                                                                                                cj5 = cj5array[ij5];
                                                                                                                sj5 = sj5array[ij5];
                                                                                                                {
                                                                                                                    IkReal evalcond[3];
                                                                                                                    IkReal x690 = IKsin(j5);
                                                                                                                    IkReal x691 = IKcos(j5);
                                                                                                                    IkReal x692 = ((5.68181818181818) * pp);
                                                                                                                    IkReal x693 = (npz * x690);
                                                                                                                    evalcond[0] = ((0.06799999947) + ((npz * x691)) + (((-1.0) * x690 * x692)) + (((0.0702727253209375) * x690)));
                                                                                                                    evalcond[1] = ((((-1.0) * x691 * x692)) + (((0.0702727253209375) * x691)) + (((-1.0) * x693)));
                                                                                                                    evalcond[2] = ((((-1.0) * npy * sj6 * x691)) + (((-0.088) * x691)) + x693 + ((cj6 * npx * x691)));
                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                rotationfunction0(solutions);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } while (0);
                                                                                        if (bgotonextstatement)
                                                                                        {
                                                                                            bool bgotonextstatement = true;
                                                                                            do
                                                                                            {
                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j4))), 6.28318530717959)));
                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                {
                                                                                                    bgotonextstatement = false;
                                                                                                    {
                                                                                                        IkReal j5eval[2];
                                                                                                        sj3 = 0.48883274;
                                                                                                        cj3 = -0.87237753;
                                                                                                        j3 = 2.63084416569479;
                                                                                                        sj4 = 0;
                                                                                                        cj4 = 1.0;
                                                                                                        j4 = 0;
                                                                                                        IkReal x694 = npz * npz;
                                                                                                        IkReal x695 = pp * pp;
                                                                                                        j5eval[0] = ((-1.0) + (((161.707637091607) * pp)) + (((-202.500643017207) * x694)) + (((-6537.33997343774) * x695)));
                                                                                                        j5eval[1] = IKsign(((-987651184.806386) + (((-6456611570247.93) * x695)) + (((-200000000000.0) * x694)) + (((159710739365.767) * pp))));
                                                                                                        if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j5eval[3];
                                                                                                                sj3 = 0.48883274;
                                                                                                                cj3 = -0.87237753;
                                                                                                                j3 = 2.63084416569479;
                                                                                                                sj4 = 0;
                                                                                                                cj4 = 1.0;
                                                                                                                j4 = 0;
                                                                                                                IkReal x696 = npz * npz;
                                                                                                                IkReal x697 = (npy * sj6);
                                                                                                                IkReal x698 = (cj6 * npx);
                                                                                                                IkReal x699 = ((918.793392565951) * pp);
                                                                                                                IkReal x700 = ((1136363636363.64) * pp);
                                                                                                                j5eval[0] = ((-1.0) + (((-11.3636363636364) * x697)) + ((x697 * x699)) + (((-161.707637091607) * x696)) + (((11.3636363636364) * x698)) + (((-1.0) * x698 * x699)) + (((80.8538185458036) * pp)));
                                                                                                                j5eval[1] = IKsign(((-1236799965.6485) + (((-14054545064.1875) * x697)) + (((100000000000.0) * pp)) + ((x697 * x700)) + (((-200000000000.0) * x696)) + (((-1.0) * x698 * x700)) + (((14054545064.1875) * x698))));
                                                                                                                j5eval[2] = ((IKabs(((-5.41099984971219) + (((13599999894.0) * npz)) + (((437.5) * pp))))) + (IKabs(((1196799990.672) + (((13599999894.0) * x697)) + (((77.0) * npz)) + (((-13599999894.0) * x698))))));
                                                                                                                if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                                                                                {
                                                                                                                    continue; // no branches [j5]
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                                        bool j5valid[1] = {false};
                                                                                                                        _nj5 = 1;
                                                                                                                        IkReal x701 = (npy * sj6);
                                                                                                                        IkReal x702 = ((1136363636363.64) * pp);
                                                                                                                        IkReal x703 = (cj6 * npx);
                                                                                                                        CheckValue<IkReal> x704 = IKPowWithIntegerCheck(IKsign(((-1236799965.6485) + (((-14054545064.1875) * x701)) + ((x701 * x702)) + (((-1.0) * x702 * x703)) + (((100000000000.0) * pp)) + (((-200000000000.0) * (npz * npz))) + (((14054545064.1875) * x703)))), -1);
                                                                                                                        if (!x704.valid)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        CheckValue<IkReal> x705 = IKatan2WithCheck(IkReal(((1196799990.672) + (((77.0) * npz)) + (((-13599999894.0) * x703)) + (((13599999894.0) * x701)))), IkReal(((-5.41099984971219) + (((13599999894.0) * npz)) + (((437.5) * pp)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                        if (!x705.valid)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x704.value))) + (x705.value));
                                                                                                                        sj5array[0] = IKsin(j5array[0]);
                                                                                                                        cj5array[0] = IKcos(j5array[0]);
                                                                                                                        if (j5array[0] > IKPI)
                                                                                                                        {
                                                                                                                            j5array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if (j5array[0] < -IKPI)
                                                                                                                        {
                                                                                                                            j5array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j5valid[0] = true;
                                                                                                                        for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                                        {
                                                                                                                            if (!j5valid[ij5])
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij5[0] = ij5;
                                                                                                                            _ij5[1] = -1;
                                                                                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                            {
                                                                                                                                if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                {
                                                                                                                                    j5valid[iij5] = false;
                                                                                                                                    _ij5[1] = iij5;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j5 = j5array[ij5];
                                                                                                                            cj5 = cj5array[ij5];
                                                                                                                            sj5 = sj5array[ij5];
                                                                                                                            {
                                                                                                                                IkReal evalcond[3];
                                                                                                                                IkReal x706 = IKsin(j5);
                                                                                                                                IkReal x707 = IKcos(j5);
                                                                                                                                IkReal x708 = ((5.68181818181818) * pp);
                                                                                                                                IkReal x709 = ((1.0) * npz * x706);
                                                                                                                                evalcond[0] = ((0.06799999947) + (((-1.0) * x706 * x708)) + ((npz * x707)) + (((0.0702727253209375) * x706)));
                                                                                                                                evalcond[1] = ((-3.85e-10) + (((-1.0) * x707 * x708)) + (((-1.0) * x709)) + (((0.0702727253209375) * x707)));
                                                                                                                                evalcond[2] = ((-3.85e-10) + (((-1.0) * cj6 * npx * x707)) + (((-1.0) * x709)) + (((0.088) * x707)) + ((npy * sj6 * x707)));
                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            rotationfunction0(solutions);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                                bool j5valid[1] = {false};
                                                                                                                _nj5 = 1;
                                                                                                                CheckValue<IkReal> x710 = IKatan2WithCheck(IkReal(((955709056.915841) + (((77.0) * npz)) + (((-77272726670.4545) * pp)))), IkReal(((-5.41099984971219) + (((13599999894.0) * npz)) + (((437.5) * pp)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                if (!x710.valid)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                CheckValue<IkReal> x711 = IKPowWithIntegerCheck(IKsign(((-987651184.806386) + (((-6456611570247.93) * (pp * pp))) + (((-200000000000.0) * (npz * npz))) + (((159710739365.767) * pp)))), -1);
                                                                                                                if (!x711.valid)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                j5array[0] = ((-1.5707963267949) + (x710.value) + (((1.5707963267949) * (x711.value))));
                                                                                                                sj5array[0] = IKsin(j5array[0]);
                                                                                                                cj5array[0] = IKcos(j5array[0]);
                                                                                                                if (j5array[0] > IKPI)
                                                                                                                {
                                                                                                                    j5array[0] -= IK2PI;
                                                                                                                }
                                                                                                                else if (j5array[0] < -IKPI)
                                                                                                                {
                                                                                                                    j5array[0] += IK2PI;
                                                                                                                }
                                                                                                                j5valid[0] = true;
                                                                                                                for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                                {
                                                                                                                    if (!j5valid[ij5])
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    _ij5[0] = ij5;
                                                                                                                    _ij5[1] = -1;
                                                                                                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                    {
                                                                                                                        if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                        {
                                                                                                                            j5valid[iij5] = false;
                                                                                                                            _ij5[1] = iij5;
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    j5 = j5array[ij5];
                                                                                                                    cj5 = cj5array[ij5];
                                                                                                                    sj5 = sj5array[ij5];
                                                                                                                    {
                                                                                                                        IkReal evalcond[3];
                                                                                                                        IkReal x712 = IKsin(j5);
                                                                                                                        IkReal x713 = IKcos(j5);
                                                                                                                        IkReal x714 = ((5.68181818181818) * pp);
                                                                                                                        IkReal x715 = ((1.0) * npz * x712);
                                                                                                                        evalcond[0] = ((0.06799999947) + ((npz * x713)) + (((0.0702727253209375) * x712)) + (((-1.0) * x712 * x714)));
                                                                                                                        evalcond[1] = ((-3.85e-10) + (((-1.0) * x715)) + (((0.0702727253209375) * x713)) + (((-1.0) * x713 * x714)));
                                                                                                                        evalcond[2] = ((-3.85e-10) + ((npy * sj6 * x713)) + (((-1.0) * cj6 * npx * x713)) + (((-1.0) * x715)) + (((0.088) * x713)));
                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    rotationfunction0(solutions);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } while (0);
                                                                                            if (bgotonextstatement)
                                                                                            {
                                                                                                bool bgotonextstatement = true;
                                                                                                do
                                                                                                {
                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j4)))), 6.28318530717959)));
                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                    {
                                                                                                        bgotonextstatement = false;
                                                                                                        {
                                                                                                            IkReal j5eval[2];
                                                                                                            sj3 = 0.48883274;
                                                                                                            cj3 = -0.87237753;
                                                                                                            j3 = 2.63084416569479;
                                                                                                            sj4 = 0;
                                                                                                            cj4 = -1.0;
                                                                                                            j4 = 3.14159265358979;
                                                                                                            IkReal x716 = npz * npz;
                                                                                                            IkReal x717 = pp * pp;
                                                                                                            j5eval[0] = ((1.0) + (((6537.33997343774) * x717)) + (((202.500643017207) * x716)) + (((-161.707637091607) * pp)));
                                                                                                            j5eval[1] = IKsign(((987651184.806386) + (((6456611570247.93) * x717)) + (((200000000000.0) * x716)) + (((-159710739365.767) * pp))));
                                                                                                            if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j5eval[3];
                                                                                                                    sj3 = 0.48883274;
                                                                                                                    cj3 = -0.87237753;
                                                                                                                    j3 = 2.63084416569479;
                                                                                                                    sj4 = 0;
                                                                                                                    cj4 = -1.0;
                                                                                                                    j4 = 3.14159265358979;
                                                                                                                    IkReal x718 = npz * npz;
                                                                                                                    IkReal x719 = (cj6 * npx);
                                                                                                                    IkReal x720 = (npy * sj6);
                                                                                                                    IkReal x721 = ((918.793392565951) * pp);
                                                                                                                    IkReal x722 = ((1136363636363.64) * pp);
                                                                                                                    j5eval[0] = ((1.0) + (((-11.3636363636364) * x719)) + (((11.3636363636364) * x720)) + (((161.707637091607) * x718)) + (((-1.0) * x720 * x721)) + ((x719 * x721)) + (((-80.8538185458036) * pp)));
                                                                                                                    j5eval[1] = ((IKabs(((-1196799990.672) + (((-13599999894.0) * x720)) + (((77.0) * npz)) + (((13599999894.0) * x719))))) + (IKabs(((-5.41099984971219) + (((-13599999894.0) * npz)) + (((437.5) * pp))))));
                                                                                                                    j5eval[2] = IKsign(((1236799965.6485) + (((-100000000000.0) * pp)) + (((200000000000.0) * x718)) + (((-1.0) * x720 * x722)) + ((x719 * x722)) + (((14054545064.1875) * x720)) + (((-14054545064.1875) * x719))));
                                                                                                                    if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                                                                                    {
                                                                                                                        continue; // no branches [j5]
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        {
                                                                                                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                                            bool j5valid[1] = {false};
                                                                                                                            _nj5 = 1;
                                                                                                                            IkReal x723 = (npy * sj6);
                                                                                                                            IkReal x724 = ((1136363636363.64) * pp);
                                                                                                                            IkReal x725 = (cj6 * npx);
                                                                                                                            CheckValue<IkReal> x726 = IKatan2WithCheck(IkReal(((-1196799990.672) + (((-13599999894.0) * x723)) + (((77.0) * npz)) + (((13599999894.0) * x725)))), IkReal(((-5.41099984971219) + (((-13599999894.0) * npz)) + (((437.5) * pp)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                            if (!x726.valid)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            CheckValue<IkReal> x727 = IKPowWithIntegerCheck(IKsign(((1236799965.6485) + (((200000000000.0) * (npz * npz))) + (((-14054545064.1875) * x725)) + (((-1.0) * x723 * x724)) + (((-100000000000.0) * pp)) + ((x724 * x725)) + (((14054545064.1875) * x723)))), -1);
                                                                                                                            if (!x727.valid)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            j5array[0] = ((-1.5707963267949) + (x726.value) + (((1.5707963267949) * (x727.value))));
                                                                                                                            sj5array[0] = IKsin(j5array[0]);
                                                                                                                            cj5array[0] = IKcos(j5array[0]);
                                                                                                                            if (j5array[0] > IKPI)
                                                                                                                            {
                                                                                                                                j5array[0] -= IK2PI;
                                                                                                                            }
                                                                                                                            else if (j5array[0] < -IKPI)
                                                                                                                            {
                                                                                                                                j5array[0] += IK2PI;
                                                                                                                            }
                                                                                                                            j5valid[0] = true;
                                                                                                                            for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                                            {
                                                                                                                                if (!j5valid[ij5])
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                _ij5[0] = ij5;
                                                                                                                                _ij5[1] = -1;
                                                                                                                                for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                                {
                                                                                                                                    if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                    {
                                                                                                                                        j5valid[iij5] = false;
                                                                                                                                        _ij5[1] = iij5;
                                                                                                                                        break;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                j5 = j5array[ij5];
                                                                                                                                cj5 = cj5array[ij5];
                                                                                                                                sj5 = sj5array[ij5];
                                                                                                                                {
                                                                                                                                    IkReal evalcond[3];
                                                                                                                                    IkReal x728 = IKsin(j5);
                                                                                                                                    IkReal x729 = IKcos(j5);
                                                                                                                                    IkReal x730 = ((5.68181818181818) * pp);
                                                                                                                                    IkReal x731 = (npz * x728);
                                                                                                                                    evalcond[0] = ((0.06799999947) + ((npz * x729)) + (((0.0702727253209375) * x728)) + (((-1.0) * x728 * x730)));
                                                                                                                                    evalcond[1] = ((3.85e-10) + (((-1.0) * x731)) + (((0.0702727253209375) * x729)) + (((-1.0) * x729 * x730)));
                                                                                                                                    evalcond[2] = ((-3.85e-10) + ((cj6 * npx * x729)) + (((-1.0) * npy * sj6 * x729)) + x731 + (((-0.088) * x729)));
                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                }

                                                                                                                                rotationfunction0(solutions);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                                    bool j5valid[1] = {false};
                                                                                                                    _nj5 = 1;
                                                                                                                    CheckValue<IkReal> x732 = IKPowWithIntegerCheck(IKsign(((987651184.806386) + (((200000000000.0) * (npz * npz))) + (((6456611570247.93) * (pp * pp))) + (((-159710739365.767) * pp)))), -1);
                                                                                                                    if (!x732.valid)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    CheckValue<IkReal> x733 = IKatan2WithCheck(IkReal(((-955709056.915841) + (((77272726670.4545) * pp)) + (((77.0) * npz)))), IkReal(((-5.41099984971219) + (((-13599999894.0) * npz)) + (((437.5) * pp)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                    if (!x733.valid)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x732.value))) + (x733.value));
                                                                                                                    sj5array[0] = IKsin(j5array[0]);
                                                                                                                    cj5array[0] = IKcos(j5array[0]);
                                                                                                                    if (j5array[0] > IKPI)
                                                                                                                    {
                                                                                                                        j5array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if (j5array[0] < -IKPI)
                                                                                                                    {
                                                                                                                        j5array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j5valid[0] = true;
                                                                                                                    for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                                    {
                                                                                                                        if (!j5valid[ij5])
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij5[0] = ij5;
                                                                                                                        _ij5[1] = -1;
                                                                                                                        for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                        {
                                                                                                                            if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                            {
                                                                                                                                j5valid[iij5] = false;
                                                                                                                                _ij5[1] = iij5;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j5 = j5array[ij5];
                                                                                                                        cj5 = cj5array[ij5];
                                                                                                                        sj5 = sj5array[ij5];
                                                                                                                        {
                                                                                                                            IkReal evalcond[3];
                                                                                                                            IkReal x734 = IKsin(j5);
                                                                                                                            IkReal x735 = IKcos(j5);
                                                                                                                            IkReal x736 = ((5.68181818181818) * pp);
                                                                                                                            IkReal x737 = (npz * x734);
                                                                                                                            evalcond[0] = ((0.06799999947) + ((npz * x735)) + (((-1.0) * x734 * x736)) + (((0.0702727253209375) * x734)));
                                                                                                                            evalcond[1] = ((3.85e-10) + (((-1.0) * x735 * x736)) + (((-1.0) * x737)) + (((0.0702727253209375) * x735)));
                                                                                                                            evalcond[2] = ((-3.85e-10) + ((cj6 * npx * x735)) + (((-1.0) * npy * sj6 * x735)) + x737 + (((-0.088) * x735)));
                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        rotationfunction0(solutions);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } while (0);
                                                                                                if (bgotonextstatement)
                                                                                                {
                                                                                                    bool bgotonextstatement = true;
                                                                                                    do
                                                                                                    {
                                                                                                        if (1)
                                                                                                        {
                                                                                                            bgotonextstatement = false;
                                                                                                            continue; // branch miss [j5]
                                                                                                        }
                                                                                                    } while (0);
                                                                                                    if (bgotonextstatement)
                                                                                                    {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                {
                                                                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                    bool j5valid[1] = {false};
                                                                                    _nj5 = 1;
                                                                                    IkReal x738 = ((568181818181.818) * pp);
                                                                                    IkReal x739 = ((6799999947.0) * cj4);
                                                                                    IkReal x740 = ((100000000000.0) * npz);
                                                                                    IkReal x741 = (cj6 * npy * sj4);
                                                                                    IkReal x742 = (cj4 * cj6 * npx);
                                                                                    IkReal x743 = (npx * sj4 * sj6);
                                                                                    IkReal x744 = (cj4 * npy * sj6);
                                                                                    CheckValue<IkReal> x745 = IKPowWithIntegerCheck(IKsign((((x738 * x742)) + (((-50000000000.0) * cj4 * pp)) + (((-7027272532.09375) * x742)) + (((618399982.82425) * cj4)) + (((-1.0) * x738 * x744)) + ((cj4 * npz * x740)) + (((7027272532.09375) * x744)))), -1);
                                                                                    if (!x745.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x746 = IKatan2WithCheck(IkReal((((cj6 * npx * x739)) + (((-1.0) * npy * sj6 * x739)) + (((-1.0) * x740 * x741)) + (((-1.0) * x740 * x743)) + (((-598399995.336) * cj4)) + (((-38.5) * npz)))), IkReal(((2.70549992485609) + (((-1.0) * npz * x739)) + (((-218.75) * pp)) + (((-1.0) * x738 * x743)) + (((-1.0) * x738 * x741)) + (((7027272532.09375) * x741)) + (((7027272532.09375) * x743)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x746.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x745.value))) + (x746.value));
                                                                                    sj5array[0] = IKsin(j5array[0]);
                                                                                    cj5array[0] = IKcos(j5array[0]);
                                                                                    if (j5array[0] > IKPI)
                                                                                    {
                                                                                        j5array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j5array[0] < -IKPI)
                                                                                    {
                                                                                        j5array[0] += IK2PI;
                                                                                    }
                                                                                    j5valid[0] = true;
                                                                                    for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                    {
                                                                                        if (!j5valid[ij5])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij5[0] = ij5;
                                                                                        _ij5[1] = -1;
                                                                                        for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                        {
                                                                                            if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j5valid[iij5] = false;
                                                                                                _ij5[1] = iij5;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j5 = j5array[ij5];
                                                                                        cj5 = cj5array[ij5];
                                                                                        sj5 = sj5array[ij5];
                                                                                        {
                                                                                            IkReal evalcond[4];
                                                                                            IkReal x747 = IKsin(j5);
                                                                                            IkReal x748 = IKcos(j5);
                                                                                            IkReal x749 = (npy * sj4);
                                                                                            IkReal x750 = ((1.0) * cj6);
                                                                                            IkReal x751 = ((5.68181818181818) * pp);
                                                                                            IkReal x752 = (cj4 * npy);
                                                                                            IkReal x753 = (npx * sj6);
                                                                                            IkReal x754 = (sj6 * x748);
                                                                                            IkReal x755 = (cj4 * x748);
                                                                                            IkReal x756 = (sj4 * x748);
                                                                                            IkReal x757 = ((1.0) * npz * x747);
                                                                                            evalcond[0] = ((0.06799999947) + (((0.0702727253209375) * x747)) + (((-1.0) * x747 * x751)) + ((npz * x748)));
                                                                                            evalcond[1] = ((((0.0702727253209375) * x748)) + (((-3.85e-10) * cj4)) + (((-1.0) * x748 * x751)) + (((-1.0) * x757)));
                                                                                            evalcond[2] = ((((0.088) * x756)) + (((-1.0) * sj4 * x757)) + ((cj6 * x752)) + (((-1.0) * npx * x750 * x756)) + ((x749 * x754)) + ((cj4 * x753)));
                                                                                            evalcond[3] = ((-3.85e-10) + ((x752 * x754)) + (((0.088) * x755)) + (((-1.0) * npx * x750 * x755)) + (((-1.0) * cj4 * x757)) + (((-1.0) * sj4 * x753)) + (((-1.0) * x749 * x750)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        rotationfunction0(solutions);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        {
                                                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                                                            bool j5valid[1] = {false};
                                                                            _nj5 = 1;
                                                                            IkReal x758 = ((6799999947.0) * sj4);
                                                                            IkReal x759 = (cj6 * npx);
                                                                            IkReal x760 = (cj4 * npx);
                                                                            IkReal x761 = (npy * sj4);
                                                                            IkReal x762 = ((7027272532.09375) * sj6);
                                                                            IkReal x763 = ((568181818181.818) * pp);
                                                                            IkReal x764 = ((100000000000.0) * npz);
                                                                            IkReal x765 = (sj6 * x763);
                                                                            IkReal x766 = (cj4 * cj6 * npy);
                                                                            CheckValue<IkReal> x767 = IKPowWithIntegerCheck(IKsign((((npz * sj4 * x764)) + (((-50000000000.0) * pp * sj4)) + (((618399982.82425) * sj4)) + ((x761 * x762)) + ((sj4 * x759 * x763)) + (((-7027272532.09375) * sj4 * x759)) + (((-1.0) * x761 * x765)))), -1);
                                                                            if (!x767.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            CheckValue<IkReal> x768 = IKatan2WithCheck(IkReal((((x758 * x759)) + ((sj6 * x760 * x764)) + (((-598399995.336) * sj4)) + (((-1.0) * npy * sj6 * x758)) + ((x764 * x766)))), IkReal(((((-1.0) * npz * x758)) + ((x760 * x765)) + ((x763 * x766)) + (((-7027272532.09375) * x766)) + (((-1.0) * x760 * x762)))), IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x768.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x767.value))) + (x768.value));
                                                                            sj5array[0] = IKsin(j5array[0]);
                                                                            cj5array[0] = IKcos(j5array[0]);
                                                                            if (j5array[0] > IKPI)
                                                                            {
                                                                                j5array[0] -= IK2PI;
                                                                            }
                                                                            else if (j5array[0] < -IKPI)
                                                                            {
                                                                                j5array[0] += IK2PI;
                                                                            }
                                                                            j5valid[0] = true;
                                                                            for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                            {
                                                                                if (!j5valid[ij5])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij5[0] = ij5;
                                                                                _ij5[1] = -1;
                                                                                for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                {
                                                                                    if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j5valid[iij5] = false;
                                                                                        _ij5[1] = iij5;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j5 = j5array[ij5];
                                                                                cj5 = cj5array[ij5];
                                                                                sj5 = sj5array[ij5];
                                                                                {
                                                                                    IkReal evalcond[4];
                                                                                    IkReal x769 = IKsin(j5);
                                                                                    IkReal x770 = IKcos(j5);
                                                                                    IkReal x771 = (npy * sj4);
                                                                                    IkReal x772 = ((1.0) * cj6);
                                                                                    IkReal x773 = ((5.68181818181818) * pp);
                                                                                    IkReal x774 = (cj4 * npy);
                                                                                    IkReal x775 = (npx * sj6);
                                                                                    IkReal x776 = (sj6 * x770);
                                                                                    IkReal x777 = (cj4 * x770);
                                                                                    IkReal x778 = (sj4 * x770);
                                                                                    IkReal x779 = ((1.0) * npz * x769);
                                                                                    evalcond[0] = ((0.06799999947) + (((0.0702727253209375) * x769)) + (((-1.0) * x769 * x773)) + ((npz * x770)));
                                                                                    evalcond[1] = ((((0.0702727253209375) * x770)) + (((-1.0) * x779)) + (((-3.85e-10) * cj4)) + (((-1.0) * x770 * x773)));
                                                                                    evalcond[2] = ((((-1.0) * sj4 * x779)) + ((x771 * x776)) + (((0.088) * x778)) + (((-1.0) * npx * x772 * x778)) + ((cj6 * x774)) + ((cj4 * x775)));
                                                                                    evalcond[3] = ((-3.85e-10) + ((x774 * x776)) + (((-1.0) * cj4 * x779)) + (((-1.0) * sj4 * x775)) + (((0.088) * x777)) + (((-1.0) * npx * x772 * x777)) + (((-1.0) * x771 * x772)));
                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                rotationfunction0(solutions);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                                                    bool j5valid[1] = {false};
                                                                    _nj5 = 1;
                                                                    CheckValue<IkReal> x780 = IKatan2WithCheck(IkReal(((955709056.915841) + (((-77272726670.4545) * pp)) + (((77.0) * cj4 * npz)))), IkReal(((((437.5) * cj4 * pp)) + (((13599999894.0) * npz)) + (((-5.41099984971219) * cj4)))), IKFAST_ATAN2_MAGTHRESH);
                                                                    if (!x780.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    CheckValue<IkReal> x781 = IKPowWithIntegerCheck(IKsign(((-987651184.806386) + (((-6456611570247.93) * (pp * pp))) + (((-200000000000.0) * (npz * npz))) + (((159710739365.767) * pp)))), -1);
                                                                    if (!x781.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    j5array[0] = ((-1.5707963267949) + (x780.value) + (((1.5707963267949) * (x781.value))));
                                                                    sj5array[0] = IKsin(j5array[0]);
                                                                    cj5array[0] = IKcos(j5array[0]);
                                                                    if (j5array[0] > IKPI)
                                                                    {
                                                                        j5array[0] -= IK2PI;
                                                                    }
                                                                    else if (j5array[0] < -IKPI)
                                                                    {
                                                                        j5array[0] += IK2PI;
                                                                    }
                                                                    j5valid[0] = true;
                                                                    for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                    {
                                                                        if (!j5valid[ij5])
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij5[0] = ij5;
                                                                        _ij5[1] = -1;
                                                                        for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                        {
                                                                            if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                                j5valid[iij5] = false;
                                                                                _ij5[1] = iij5;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j5 = j5array[ij5];
                                                                        cj5 = cj5array[ij5];
                                                                        sj5 = sj5array[ij5];
                                                                        {
                                                                            IkReal evalcond[4];
                                                                            IkReal x782 = IKsin(j5);
                                                                            IkReal x783 = IKcos(j5);
                                                                            IkReal x784 = (npy * sj4);
                                                                            IkReal x785 = ((1.0) * cj6);
                                                                            IkReal x786 = ((5.68181818181818) * pp);
                                                                            IkReal x787 = (cj4 * npy);
                                                                            IkReal x788 = (npx * sj6);
                                                                            IkReal x789 = (sj6 * x783);
                                                                            IkReal x790 = (cj4 * x783);
                                                                            IkReal x791 = (sj4 * x783);
                                                                            IkReal x792 = ((1.0) * npz * x782);
                                                                            evalcond[0] = ((0.06799999947) + (((0.0702727253209375) * x782)) + (((-1.0) * x782 * x786)) + ((npz * x783)));
                                                                            evalcond[1] = ((((-1.0) * x792)) + (((0.0702727253209375) * x783)) + (((-3.85e-10) * cj4)) + (((-1.0) * x783 * x786)));
                                                                            evalcond[2] = ((((-1.0) * npx * x785 * x791)) + ((x784 * x789)) + ((cj4 * x788)) + (((0.088) * x791)) + (((-1.0) * sj4 * x792)) + ((cj6 * x787)));
                                                                            evalcond[3] = ((-3.85e-10) + (((-1.0) * npx * x785 * x790)) + ((x787 * x789)) + (((0.088) * x790)) + (((-1.0) * x784 * x785)) + (((-1.0) * sj4 * x788)) + (((-1.0) * cj4 * x792)));
                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                                continue;
                                                                            }
                                                                        }

                                                                        rotationfunction0(solutions);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } while (0);
                                        if (bgotonextstatement)
                                        {
                                            bool bgotonextstatement = true;
                                            do
                                            {
                                                if (1)
                                                {
                                                    bgotonextstatement = false;
                                                    continue; // branch miss [j4, j5]
                                                }
                                            } while (0);
                                            if (bgotonextstatement)
                                            {
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    {
                                        IkReal j4array[2], cj4array[2], sj4array[2];
                                        bool j4valid[2] = {false};
                                        _nj4 = 2;
                                        CheckValue<IkReal> x793 = IKPowWithIntegerCheck(((-0.0825) + (((0.0825) * cj3)) + (((0.316) * sj3))), -1);
                                        if (!x793.valid)
                                        {
                                            continue;
                                        }
                                        sj4array[0] = ((-1.0) * (x793.value) * (((((-1.0) * cj6 * npy)) + (((-1.0) * npx * sj6)))));
                                        if (sj4array[0] >= -1 - IKFAST_SINCOS_THRESH && sj4array[0] <= 1 + IKFAST_SINCOS_THRESH)
                                        {
                                            j4valid[0] = j4valid[1] = true;
                                            j4array[0] = IKasin(sj4array[0]);
                                            cj4array[0] = IKcos(j4array[0]);
                                            sj4array[1] = sj4array[0];
                                            j4array[1] = j4array[0] > 0 ? (IKPI - j4array[0]) : (-IKPI - j4array[0]);
                                            cj4array[1] = -cj4array[0];
                                        }
                                        else if (isnan(sj4array[0]))
                                        {
                                            // probably any value will work
                                            j4valid[0] = true;
                                            cj4array[0] = 1;
                                            sj4array[0] = 0;
                                            j4array[0] = 0;
                                        }
                                        for (int ij4 = 0; ij4 < 2; ++ij4)
                                        {
                                            if (!j4valid[ij4])
                                            {
                                                continue;
                                            }
                                            _ij4[0] = ij4;
                                            _ij4[1] = -1;
                                            for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                            {
                                                if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                {
                                                    j4valid[iij4] = false;
                                                    _ij4[1] = iij4;
                                                    break;
                                                }
                                            }
                                            j4 = j4array[ij4];
                                            cj4 = cj4array[ij4];
                                            sj4 = sj4array[ij4];

                                            {
                                                IkReal j5eval[2];
                                                IkReal x794 = cj6 * cj6;
                                                IkReal x795 = npy * npy;
                                                IkReal x796 = npx * npx;
                                                IkReal x797 = npz * npz;
                                                IkReal x798 = (npy * sj6);
                                                IkReal x799 = (cj6 * npx);
                                                IkReal x800 = ((129.132231404959) * x795);
                                                IkReal x801 = (x794 * x796);
                                                j5eval[0] = ((1.0) + (((-22.7272727272727) * x799)) + (((129.132231404959) * x797)) + (((22.7272727272727) * x798)) + (((129.132231404959) * x801)) + (((-258.264462809917) * x798 * x799)) + x800 + (((-1.0) * x794 * x800)));
                                                j5eval[1] = IKsign(((0.007744) + (((-2.0) * x798 * x799)) + (((-0.176) * x799)) + (((0.176) * x798)) + (((-1.0) * x794 * x795)) + x795 + x797 + x801));
                                                if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                {
                                                    {
                                                        IkReal j5eval[2];
                                                        IkReal x802 = cj6 * cj6;
                                                        IkReal x803 = npy * npy;
                                                        IkReal x804 = npz * npz;
                                                        IkReal x805 = npx * npx;
                                                        IkReal x806 = ((129.132231404959) * sj4);
                                                        IkReal x807 = (npy * sj6);
                                                        IkReal x808 = (sj4 * x802);
                                                        IkReal x809 = (cj6 * npx * sj4);
                                                        j5eval[0] = (((x804 * x806)) + sj4 + (((-22.7272727272727) * x809)) + ((x803 * x806)) + (((-258.264462809917) * x807 * x809)) + ((x802 * x805 * x806)) + (((22.7272727272727) * sj4 * x807)) + (((-1.0) * x802 * x803 * x806)));
                                                        j5eval[1] = IKsign(((((-1.0) * x803 * x808)) + (((0.007744) * sj4)) + ((x805 * x808)) + ((sj4 * x804)) + ((sj4 * x803)) + (((-2.0) * x807 * x809)) + (((-0.176) * x809)) + (((0.176) * sj4 * x807))));
                                                        if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                        {
                                                            {
                                                                IkReal j5eval[2];
                                                                IkReal x810 = cj6 * cj6;
                                                                IkReal x811 = npy * npy;
                                                                IkReal x812 = npz * npz;
                                                                IkReal x813 = npx * npx;
                                                                IkReal x814 = (cj6 * npx);
                                                                IkReal x815 = (cj4 * x811);
                                                                IkReal x816 = ((129.132231404959) * x810);
                                                                IkReal x817 = (cj4 * x812);
                                                                IkReal x818 = (cj4 * x813);
                                                                IkReal x819 = (cj4 * npy * sj6);
                                                                j5eval[0] = ((((-258.264462809917) * x814 * x819)) + (((129.132231404959) * x815)) + (((129.132231404959) * x817)) + cj4 + (((-22.7272727272727) * cj4 * x814)) + ((x816 * x818)) + (((-1.0) * x815 * x816)) + (((22.7272727272727) * x819)));
                                                                j5eval[1] = IKsign(((((-2.0) * x814 * x819)) + (((-1.0) * x810 * x815)) + (((-0.176) * cj4 * x814)) + ((x810 * x818)) + (((0.176) * x819)) + x817 + x815 + (((0.007744) * cj4))));
                                                                if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                {
                                                                    {
                                                                        IkReal evalcond[1];
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j4)))), 6.28318530717959)));
                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                            {
                                                                                bgotonextstatement = false;
                                                                                {
                                                                                    IkReal j5eval[2];
                                                                                    sj4 = 1.0;
                                                                                    cj4 = 0;
                                                                                    j4 = 1.5707963267949;
                                                                                    IkReal x820 = cj6 * cj6;
                                                                                    IkReal x821 = npy * npy;
                                                                                    IkReal x822 = npz * npz;
                                                                                    IkReal x823 = npx * npx;
                                                                                    IkReal x824 = (npy * sj6);
                                                                                    IkReal x825 = (cj6 * npx);
                                                                                    IkReal x826 = ((129.132231404959) * x821);
                                                                                    IkReal x827 = (x820 * x823);
                                                                                    j5eval[0] = ((-1.0) + ((x820 * x826)) + (((-129.132231404959) * x822)) + (((-129.132231404959) * x827)) + (((258.264462809917) * x824 * x825)) + (((-1.0) * x826)) + (((22.7272727272727) * x825)) + (((-22.7272727272727) * x824)));
                                                                                    j5eval[1] = IKsign(((-0.007744) + ((x820 * x821)) + (((-0.176) * x824)) + (((2.0) * x824 * x825)) + (((-1.0) * x821)) + (((-1.0) * x827)) + (((-1.0) * x822)) + (((0.176) * x825))));
                                                                                    if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                                    {
                                                                                        continue; // no branches [j5]
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                            bool j5valid[1] = {false};
                                                                                            _nj5 = 1;
                                                                                            IkReal x828 = cj6 * cj6;
                                                                                            IkReal x829 = npy * npy;
                                                                                            IkReal x830 = (npy * sj6);
                                                                                            IkReal x831 = (cj6 * npx);
                                                                                            IkReal x832 = ((0.316) * cj3);
                                                                                            IkReal x833 = ((0.0825) * sj3);
                                                                                            CheckValue<IkReal> x834 = IKPowWithIntegerCheck(IKsign(((-0.007744) + (((-1.0) * x828 * (npx * npx))) + (((-1.0) * (npz * npz))) + (((0.176) * x831)) + (((-1.0) * x829)) + (((2.0) * x830 * x831)) + ((x828 * x829)) + (((-0.176) * x830)))), -1);
                                                                                            if (!x834.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            CheckValue<IkReal> x835 = IKatan2WithCheck(IkReal(((0.033792) + (((0.027808) * cj3)) + ((x831 * x833)) + (((0.384) * x830)) + (((-0.384) * x831)) + (((-1.0) * x830 * x833)) + ((x830 * x832)) + (((-0.00726) * sj3)) + (((-1.0) * x831 * x832)))), IkReal(((((-1.0) * npz * x833)) + ((npz * x832)) + (((0.384) * npz)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (!x835.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x834.value))) + (x835.value));
                                                                                            sj5array[0] = IKsin(j5array[0]);
                                                                                            cj5array[0] = IKcos(j5array[0]);
                                                                                            if (j5array[0] > IKPI)
                                                                                            {
                                                                                                j5array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j5array[0] < -IKPI)
                                                                                            {
                                                                                                j5array[0] += IK2PI;
                                                                                            }
                                                                                            j5valid[0] = true;
                                                                                            for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                            {
                                                                                                if (!j5valid[ij5])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij5[0] = ij5;
                                                                                                _ij5[1] = -1;
                                                                                                for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                {
                                                                                                    if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j5valid[iij5] = false;
                                                                                                        _ij5[1] = iij5;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j5 = j5array[ij5];
                                                                                                cj5 = cj5array[ij5];
                                                                                                sj5 = sj5array[ij5];
                                                                                                {
                                                                                                    IkReal evalcond[2];
                                                                                                    IkReal x836 = IKcos(j5);
                                                                                                    IkReal x837 = IKsin(j5);
                                                                                                    IkReal x838 = (npy * sj6);
                                                                                                    IkReal x839 = (cj6 * npx);
                                                                                                    IkReal x840 = ((1.0) * x837);
                                                                                                    evalcond[0] = ((((0.088) * x836)) + (((-1.0) * npz * x840)) + ((x836 * x838)) + (((-1.0) * x836 * x839)));
                                                                                                    evalcond[1] = ((0.384) + (((-0.0825) * sj3)) + (((0.088) * x837)) + (((0.316) * cj3)) + ((npz * x836)) + ((x837 * x838)) + (((-1.0) * x839 * x840)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                rotationfunction0(solutions);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j4)))), 6.28318530717959)));
                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                        IkReal j5eval[2];
                                                                                        sj4 = -1.0;
                                                                                        cj4 = 0;
                                                                                        j4 = -1.5707963267949;
                                                                                        IkReal x841 = cj6 * cj6;
                                                                                        IkReal x842 = npy * npy;
                                                                                        IkReal x843 = npz * npz;
                                                                                        IkReal x844 = npx * npx;
                                                                                        IkReal x845 = (npy * sj6);
                                                                                        IkReal x846 = (cj6 * npx);
                                                                                        IkReal x847 = ((129.132231404959) * x842);
                                                                                        IkReal x848 = (x841 * x844);
                                                                                        j5eval[0] = ((-1.0) + (((258.264462809917) * x845 * x846)) + (((-129.132231404959) * x848)) + (((-129.132231404959) * x843)) + (((22.7272727272727) * x846)) + (((-1.0) * x847)) + (((-22.7272727272727) * x845)) + ((x841 * x847)));
                                                                                        j5eval[1] = IKsign(((-0.007744) + (((-0.176) * x845)) + (((2.0) * x845 * x846)) + (((0.176) * x846)) + (((-1.0) * x848)) + (((-1.0) * x842)) + (((-1.0) * x843)) + ((x841 * x842))));
                                                                                        if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                                        {
                                                                                            continue; // no branches [j5]
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            {
                                                                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                bool j5valid[1] = {false};
                                                                                                _nj5 = 1;
                                                                                                IkReal x849 = cj6 * cj6;
                                                                                                IkReal x850 = npy * npy;
                                                                                                IkReal x851 = (npy * sj6);
                                                                                                IkReal x852 = (cj6 * npx);
                                                                                                IkReal x853 = ((0.316) * cj3);
                                                                                                IkReal x854 = ((0.0825) * sj3);
                                                                                                CheckValue<IkReal> x855 = IKPowWithIntegerCheck(IKsign(((-0.007744) + (((2.0) * x851 * x852)) + (((-1.0) * x850)) + (((-1.0) * (npz * npz))) + (((-0.176) * x851)) + (((-1.0) * x849 * (npx * npx))) + (((0.176) * x852)) + ((x849 * x850)))), -1);
                                                                                                if (!x855.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                CheckValue<IkReal> x856 = IKatan2WithCheck(IkReal(((0.033792) + (((0.384) * x851)) + (((0.027808) * cj3)) + (((-1.0) * x852 * x853)) + ((x851 * x853)) + (((-0.00726) * sj3)) + ((x852 * x854)) + (((-1.0) * x851 * x854)) + (((-0.384) * x852)))), IkReal(((((-1.0) * npz * x854)) + (((0.384) * npz)) + ((npz * x853)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                if (!x856.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x855.value))) + (x856.value));
                                                                                                sj5array[0] = IKsin(j5array[0]);
                                                                                                cj5array[0] = IKcos(j5array[0]);
                                                                                                if (j5array[0] > IKPI)
                                                                                                {
                                                                                                    j5array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j5array[0] < -IKPI)
                                                                                                {
                                                                                                    j5array[0] += IK2PI;
                                                                                                }
                                                                                                j5valid[0] = true;
                                                                                                for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                {
                                                                                                    if (!j5valid[ij5])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij5[0] = ij5;
                                                                                                    _ij5[1] = -1;
                                                                                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                    {
                                                                                                        if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j5valid[iij5] = false;
                                                                                                            _ij5[1] = iij5;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j5 = j5array[ij5];
                                                                                                    cj5 = cj5array[ij5];
                                                                                                    sj5 = sj5array[ij5];
                                                                                                    {
                                                                                                        IkReal evalcond[2];
                                                                                                        IkReal x857 = IKcos(j5);
                                                                                                        IkReal x858 = IKsin(j5);
                                                                                                        IkReal x859 = (npy * sj6);
                                                                                                        IkReal x860 = (cj6 * npx);
                                                                                                        IkReal x861 = ((1.0) * x858);
                                                                                                        evalcond[0] = ((((-1.0) * x857 * x860)) + (((-1.0) * npz * x861)) + ((x857 * x859)) + (((0.088) * x857)));
                                                                                                        evalcond[1] = ((0.384) + (((-0.0825) * sj3)) + (((0.316) * cj3)) + (((-1.0) * x860 * x861)) + ((x858 * x859)) + (((0.088) * x858)) + ((npz * x857)));
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    rotationfunction0(solutions);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } while (0);
                                                                            if (bgotonextstatement)
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j4))), 6.28318530717959)));
                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                    {
                                                                                        bgotonextstatement = false;
                                                                                        {
                                                                                            IkReal j5eval[2];
                                                                                            sj4 = 0;
                                                                                            cj4 = 1.0;
                                                                                            j4 = 0;
                                                                                            IkReal x862 = cj6 * cj6;
                                                                                            IkReal x863 = npy * npy;
                                                                                            IkReal x864 = npx * npx;
                                                                                            IkReal x865 = npz * npz;
                                                                                            IkReal x866 = (npy * sj6);
                                                                                            IkReal x867 = (cj6 * npx);
                                                                                            IkReal x868 = ((129.132231404959) * x863);
                                                                                            IkReal x869 = (x862 * x864);
                                                                                            j5eval[0] = ((1.0) + (((22.7272727272727) * x866)) + (((-1.0) * x862 * x868)) + (((129.132231404959) * x869)) + (((129.132231404959) * x865)) + (((-22.7272727272727) * x867)) + x868 + (((-258.264462809917) * x866 * x867)));
                                                                                            j5eval[1] = IKsign(((0.007744) + (((-0.176) * x867)) + x869 + x865 + x863 + (((-2.0) * x866 * x867)) + (((-1.0) * x862 * x863)) + (((0.176) * x866))));
                                                                                            if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                                            {
                                                                                                continue; // no branches [j5]
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                    bool j5valid[1] = {false};
                                                                                                    _nj5 = 1;
                                                                                                    IkReal x870 = cj6 * cj6;
                                                                                                    IkReal x871 = npy * npy;
                                                                                                    IkReal x872 = (cj6 * npx);
                                                                                                    IkReal x873 = ((0.316) * cj3);
                                                                                                    IkReal x874 = (npy * sj6);
                                                                                                    IkReal x875 = ((0.0825) * npz);
                                                                                                    IkReal x876 = ((0.316) * sj3);
                                                                                                    IkReal x877 = ((0.0825) * sj3);
                                                                                                    IkReal x878 = ((0.0825) * cj3);
                                                                                                    CheckValue<IkReal> x879 = IKPowWithIntegerCheck(IKsign(((0.007744) + ((x870 * (npx * npx))) + (((-1.0) * x870 * x871)) + (((-2.0) * x872 * x874)) + (((-0.176) * x872)) + x871 + (npz * npz) + (((0.176) * x874)))), -1);
                                                                                                    if (!x879.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    CheckValue<IkReal> x880 = IKatan2WithCheck(IkReal(((-0.033792) + ((x872 * x873)) + (((-1.0) * x872 * x877)) + (((-0.384) * x874)) + (((0.384) * x872)) + ((x874 * x877)) + ((cj3 * x875)) + (((-1.0) * x873 * x874)) + (((-0.027808) * cj3)) + (((0.00726) * sj3)) + ((npz * x876)) + (((-1.0) * x875)))), IkReal(((0.00726) + ((x872 * x878)) + ((x872 * x876)) + ((sj3 * x875)) + (((-0.027808) * sj3)) + (((0.0825) * x874)) + (((-1.0) * npz * x873)) + (((-0.384) * npz)) + (((-0.00726) * cj3)) + (((-1.0) * x874 * x878)) + (((-1.0) * x874 * x876)) + (((-0.0825) * x872)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (!x880.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x879.value))) + (x880.value));
                                                                                                    sj5array[0] = IKsin(j5array[0]);
                                                                                                    cj5array[0] = IKcos(j5array[0]);
                                                                                                    if (j5array[0] > IKPI)
                                                                                                    {
                                                                                                        j5array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j5array[0] < -IKPI)
                                                                                                    {
                                                                                                        j5array[0] += IK2PI;
                                                                                                    }
                                                                                                    j5valid[0] = true;
                                                                                                    for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                    {
                                                                                                        if (!j5valid[ij5])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij5[0] = ij5;
                                                                                                        _ij5[1] = -1;
                                                                                                        for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                        {
                                                                                                            if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j5valid[iij5] = false;
                                                                                                                _ij5[1] = iij5;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j5 = j5array[ij5];
                                                                                                        cj5 = cj5array[ij5];
                                                                                                        sj5 = sj5array[ij5];
                                                                                                        {
                                                                                                            IkReal evalcond[2];
                                                                                                            IkReal x881 = IKsin(j5);
                                                                                                            IkReal x882 = IKcos(j5);
                                                                                                            IkReal x883 = (npy * sj6);
                                                                                                            IkReal x884 = (cj6 * npx);
                                                                                                            IkReal x885 = ((1.0) * x881);
                                                                                                            evalcond[0] = ((0.384) + ((x881 * x883)) + (((-0.0825) * sj3)) + (((0.316) * cj3)) + ((npz * x882)) + (((-1.0) * x884 * x885)) + (((0.088) * x881)));
                                                                                                            evalcond[1] = ((-0.0825) + (((-1.0) * x882 * x884)) + ((x882 * x883)) + (((-1.0) * npz * x885)) + (((0.0825) * cj3)) + (((0.316) * sj3)) + (((0.088) * x882)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        rotationfunction0(solutions);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j4)))), 6.28318530717959)));
                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                        {
                                                                                            bgotonextstatement = false;
                                                                                            {
                                                                                                IkReal j5eval[2];
                                                                                                sj4 = 0;
                                                                                                cj4 = -1.0;
                                                                                                j4 = 3.14159265358979;
                                                                                                IkReal x886 = cj6 * cj6;
                                                                                                IkReal x887 = npy * npy;
                                                                                                IkReal x888 = npx * npx;
                                                                                                IkReal x889 = npz * npz;
                                                                                                IkReal x890 = (npy * sj6);
                                                                                                IkReal x891 = (cj6 * npx);
                                                                                                IkReal x892 = ((129.132231404959) * x887);
                                                                                                IkReal x893 = (x886 * x888);
                                                                                                j5eval[0] = ((1.0) + (((129.132231404959) * x889)) + (((129.132231404959) * x893)) + (((22.7272727272727) * x890)) + (((-22.7272727272727) * x891)) + x892 + (((-258.264462809917) * x890 * x891)) + (((-1.0) * x886 * x892)));
                                                                                                j5eval[1] = IKsign(((0.007744) + (((-1.0) * x886 * x887)) + (((-0.176) * x891)) + (((-2.0) * x890 * x891)) + (((0.176) * x890)) + x887 + x889 + x893));
                                                                                                if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                                                {
                                                                                                    continue; // no branches [j5]
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                        bool j5valid[1] = {false};
                                                                                                        _nj5 = 1;
                                                                                                        IkReal x894 = cj6 * cj6;
                                                                                                        IkReal x895 = npy * npy;
                                                                                                        IkReal x896 = (cj6 * npx);
                                                                                                        IkReal x897 = ((0.316) * cj3);
                                                                                                        IkReal x898 = (npy * sj6);
                                                                                                        IkReal x899 = ((0.0825) * npz);
                                                                                                        IkReal x900 = ((0.316) * sj3);
                                                                                                        IkReal x901 = ((0.0825) * sj3);
                                                                                                        IkReal x902 = ((0.0825) * cj3);
                                                                                                        CheckValue<IkReal> x903 = IKatan2WithCheck(IkReal(((-0.033792) + (((-1.0) * x896 * x901)) + (((-1.0) * cj3 * x899)) + ((x896 * x897)) + (((-0.027808) * cj3)) + (((0.00726) * sj3)) + (((-1.0) * npz * x900)) + (((-0.384) * x898)) + (((0.384) * x896)) + (((-1.0) * x897 * x898)) + x899 + ((x898 * x901)))), IkReal(((-0.00726) + (((-1.0) * x896 * x902)) + (((-1.0) * x896 * x900)) + (((-0.0825) * x898)) + (((0.027808) * sj3)) + (((-1.0) * npz * x897)) + (((-0.384) * npz)) + ((sj3 * x899)) + (((0.00726) * cj3)) + ((x898 * x900)) + ((x898 * x902)) + (((0.0825) * x896)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                        if (!x903.valid)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        CheckValue<IkReal> x904 = IKPowWithIntegerCheck(IKsign(((0.007744) + (((-0.176) * x896)) + (((-2.0) * x896 * x898)) + (((0.176) * x898)) + ((x894 * (npx * npx))) + (((-1.0) * x894 * x895)) + x895 + (npz * npz))), -1);
                                                                                                        if (!x904.valid)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        j5array[0] = ((-1.5707963267949) + (x903.value) + (((1.5707963267949) * (x904.value))));
                                                                                                        sj5array[0] = IKsin(j5array[0]);
                                                                                                        cj5array[0] = IKcos(j5array[0]);
                                                                                                        if (j5array[0] > IKPI)
                                                                                                        {
                                                                                                            j5array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if (j5array[0] < -IKPI)
                                                                                                        {
                                                                                                            j5array[0] += IK2PI;
                                                                                                        }
                                                                                                        j5valid[0] = true;
                                                                                                        for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                        {
                                                                                                            if (!j5valid[ij5])
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij5[0] = ij5;
                                                                                                            _ij5[1] = -1;
                                                                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                            {
                                                                                                                if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                {
                                                                                                                    j5valid[iij5] = false;
                                                                                                                    _ij5[1] = iij5;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j5 = j5array[ij5];
                                                                                                            cj5 = cj5array[ij5];
                                                                                                            sj5 = sj5array[ij5];
                                                                                                            {
                                                                                                                IkReal evalcond[2];
                                                                                                                IkReal x905 = IKsin(j5);
                                                                                                                IkReal x906 = IKcos(j5);
                                                                                                                IkReal x907 = (npy * sj6);
                                                                                                                IkReal x908 = (cj6 * npx);
                                                                                                                IkReal x909 = ((1.0) * x905);
                                                                                                                evalcond[0] = ((0.384) + (((-1.0) * x908 * x909)) + ((x905 * x907)) + (((-0.0825) * sj3)) + (((0.088) * x905)) + (((0.316) * cj3)) + ((npz * x906)));
                                                                                                                evalcond[1] = ((0.0825) + (((-1.0) * x906 * x908)) + (((-0.0825) * cj3)) + (((0.088) * x906)) + ((x906 * x907)) + (((-1.0) * npz * x909)) + (((-0.316) * sj3)));
                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            rotationfunction0(solutions);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                        bool bgotonextstatement = true;
                                                                                        do
                                                                                        {
                                                                                            if (1)
                                                                                            {
                                                                                                bgotonextstatement = false;
                                                                                                continue; // branch miss [j5]
                                                                                            }
                                                                                        } while (0);
                                                                                        if (bgotonextstatement)
                                                                                        {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    {
                                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                                        bool j5valid[1] = {false};
                                                                        _nj5 = 1;
                                                                        IkReal x910 = cj6 * cj6;
                                                                        IkReal x911 = npy * npy;
                                                                        IkReal x912 = npx * npx;
                                                                        IkReal x913 = ((1.0) * npz);
                                                                        IkReal x914 = (cj6 * npx);
                                                                        IkReal x915 = (cj4 * sj3);
                                                                        IkReal x916 = ((0.0825) * cj3);
                                                                        IkReal x917 = (npy * sj6);
                                                                        IkReal x918 = (cj6 * sj4);
                                                                        IkReal x919 = ((0.0825) * npz);
                                                                        IkReal x920 = ((0.384) * cj4);
                                                                        IkReal x921 = ((0.316) * sj3);
                                                                        IkReal x922 = ((0.176) * cj4);
                                                                        IkReal x923 = (npx * sj4 * sj6);
                                                                        IkReal x924 = ((0.316) * cj3 * cj4);
                                                                        IkReal x925 = (cj4 * x910);
                                                                        IkReal x926 = (npx * npy * sj4);
                                                                        CheckValue<IkReal> x927 = IKPowWithIntegerCheck(IKsign(((((-1.0) * x914 * x922)) + (((-1.0) * x911 * x925)) + ((cj4 * (npz * npz))) + ((x917 * x922)) + ((cj4 * x911)) + (((0.007744) * cj4)) + ((x912 * x925)) + (((-2.0) * cj4 * x914 * x917)))), -1);
                                                                        if (!x927.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        CheckValue<IkReal> x928 = IKatan2WithCheck(IkReal((((npz * x921)) + (((0.00726) * x915)) + (((-1.0) * x919)) + (((-0.0825) * x914 * x915)) + ((x914 * x924)) + ((x914 * x920)) + (((-1.0) * x913 * x923)) + (((0.0825) * x915 * x917)) + (((-0.033792) * cj4)) + (((-0.027808) * cj3 * cj4)) + ((npz * x916)) + (((-1.0) * x917 * x924)) + (((-1.0) * x917 * x920)) + (((-1.0) * npy * x913 * x918)))), IkReal(((0.00726) + (((-1.0) * sj6 * x912 * x918)) + (((-2.0) * x910 * x926)) + (((0.088) * x923)) + (((-0.027808) * sj3)) + (((0.0825) * x917)) + ((x914 * x916)) + ((x914 * x921)) + (((-0.00726) * cj3)) + ((x915 * x919)) + (((0.088) * npy * x918)) + x926 + (((-1.0) * x917 * x921)) + (((-1.0) * npz * x920)) + (((-1.0) * npz * x924)) + ((sj6 * x911 * x918)) + (((-1.0) * x916 * x917)) + (((-0.0825) * x914)))), IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x928.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x927.value))) + (x928.value));
                                                                        sj5array[0] = IKsin(j5array[0]);
                                                                        cj5array[0] = IKcos(j5array[0]);
                                                                        if (j5array[0] > IKPI)
                                                                        {
                                                                            j5array[0] -= IK2PI;
                                                                        }
                                                                        else if (j5array[0] < -IKPI)
                                                                        {
                                                                            j5array[0] += IK2PI;
                                                                        }
                                                                        j5valid[0] = true;
                                                                        for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                        {
                                                                            if (!j5valid[ij5])
                                                                            {
                                                                                continue;
                                                                            }
                                                                            _ij5[0] = ij5;
                                                                            _ij5[1] = -1;
                                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                            {
                                                                                if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                    j5valid[iij5] = false;
                                                                                    _ij5[1] = iij5;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            j5 = j5array[ij5];
                                                                            cj5 = cj5array[ij5];
                                                                            sj5 = sj5array[ij5];
                                                                            {
                                                                                IkReal evalcond[4];
                                                                                IkReal x929 = IKsin(j5);
                                                                                IkReal x930 = IKcos(j5);
                                                                                IkReal x931 = (cj6 * npy);
                                                                                IkReal x932 = ((1.0) * sj4);
                                                                                IkReal x933 = ((0.0825) * cj4);
                                                                                IkReal x934 = ((0.316) * sj3);
                                                                                IkReal x935 = (npx * sj6);
                                                                                IkReal x936 = ((0.088) * x930);
                                                                                IkReal x937 = (npy * sj6 * x930);
                                                                                IkReal x938 = ((1.0) * npz * x929);
                                                                                IkReal x939 = (cj6 * npx * x930);
                                                                                evalcond[0] = ((0.384) + ((npz * x930)) + ((npy * sj6 * x929)) + (((0.088) * x929)) + (((-0.0825) * sj3)) + (((0.316) * cj3)) + (((-1.0) * cj6 * npx * x929)));
                                                                                evalcond[1] = ((((-1.0) * x939)) + ((cj3 * x933)) + ((cj4 * x934)) + x937 + x936 + (((-1.0) * x938)) + (((-1.0) * x933)));
                                                                                evalcond[2] = (((sj4 * x936)) + ((sj4 * x937)) + (((-1.0) * npz * x929 * x932)) + (((-1.0) * x932 * x939)) + ((cj4 * x935)) + ((cj4 * x931)));
                                                                                evalcond[3] = ((-0.0825) + (((-1.0) * cj4 * x939)) + (((-1.0) * x931 * x932)) + (((0.0825) * cj3)) + (((-1.0) * cj4 * x938)) + (((-1.0) * x932 * x935)) + ((cj4 * x936)) + ((cj4 * x937)) + x934);
                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                            }

                                                                            rotationfunction0(solutions);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                                bool j5valid[1] = {false};
                                                                _nj5 = 1;
                                                                IkReal x940 = cj6 * cj6;
                                                                IkReal x941 = npy * npy;
                                                                IkReal x942 = npx * npx;
                                                                IkReal x943 = ((0.0825) * sj3);
                                                                IkReal x944 = (npz * sj4);
                                                                IkReal x945 = (cj4 * npx);
                                                                IkReal x946 = ((0.316) * cj3);
                                                                IkReal x947 = ((2.0) * npy);
                                                                IkReal x948 = (cj4 * cj6);
                                                                IkReal x949 = (cj6 * npx * sj4);
                                                                IkReal x950 = (sj4 * x941);
                                                                IkReal x951 = (npy * sj4 * sj6);
                                                                CheckValue<IkReal> x952 = IKatan2WithCheck(IkReal((((x946 * x949)) + (((-0.027808) * cj3 * sj4)) + ((x943 * x951)) + (((0.384) * x949)) + (((-0.384) * x951)) + (((-0.033792) * sj4)) + (((-1.0) * x943 * x949)) + (((-1.0) * x946 * x951)) + ((npz * sj6 * x945)) + ((npy * npz * x948)) + (((0.00726) * sj3 * sj4)))), IkReal(((((-0.384) * x944)) + (((-1.0) * npy * x945)) + (((-1.0) * sj6 * x941 * x948)) + ((x940 * x945 * x947)) + ((x943 * x944)) + (((-1.0) * x944 * x946)) + (((-0.088) * sj6 * x945)) + (((-0.088) * npy * x948)) + ((sj6 * x942 * x948)))), IKFAST_ATAN2_MAGTHRESH);
                                                                if (!x952.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x953 = IKPowWithIntegerCheck(IKsign((((npz * x944)) + (((0.176) * x951)) + (((-0.176) * x949)) + (((-1.0) * x940 * x950)) + (((0.007744) * sj4)) + (((-1.0) * sj6 * x947 * x949)) + x950 + ((sj4 * x940 * x942)))), -1);
                                                                if (!x953.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                j5array[0] = ((-1.5707963267949) + (x952.value) + (((1.5707963267949) * (x953.value))));
                                                                sj5array[0] = IKsin(j5array[0]);
                                                                cj5array[0] = IKcos(j5array[0]);
                                                                if (j5array[0] > IKPI)
                                                                {
                                                                    j5array[0] -= IK2PI;
                                                                }
                                                                else if (j5array[0] < -IKPI)
                                                                {
                                                                    j5array[0] += IK2PI;
                                                                }
                                                                j5valid[0] = true;
                                                                for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                {
                                                                    if (!j5valid[ij5])
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij5[0] = ij5;
                                                                    _ij5[1] = -1;
                                                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                    {
                                                                        if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                        {
                                                                            j5valid[iij5] = false;
                                                                            _ij5[1] = iij5;
                                                                            break;
                                                                        }
                                                                    }
                                                                    j5 = j5array[ij5];
                                                                    cj5 = cj5array[ij5];
                                                                    sj5 = sj5array[ij5];
                                                                    {
                                                                        IkReal evalcond[4];
                                                                        IkReal x954 = IKsin(j5);
                                                                        IkReal x955 = IKcos(j5);
                                                                        IkReal x956 = (cj6 * npy);
                                                                        IkReal x957 = ((1.0) * sj4);
                                                                        IkReal x958 = ((0.0825) * cj4);
                                                                        IkReal x959 = ((0.316) * sj3);
                                                                        IkReal x960 = (npx * sj6);
                                                                        IkReal x961 = ((0.088) * x955);
                                                                        IkReal x962 = (npy * sj6 * x955);
                                                                        IkReal x963 = ((1.0) * npz * x954);
                                                                        IkReal x964 = (cj6 * npx * x955);
                                                                        evalcond[0] = ((0.384) + ((npz * x955)) + (((-0.0825) * sj3)) + (((0.316) * cj3)) + ((npy * sj6 * x954)) + (((0.088) * x954)) + (((-1.0) * cj6 * npx * x954)));
                                                                        evalcond[1] = ((((-1.0) * x964)) + ((cj3 * x958)) + (((-1.0) * x958)) + x962 + x961 + ((cj4 * x959)) + (((-1.0) * x963)));
                                                                        evalcond[2] = (((sj4 * x961)) + ((sj4 * x962)) + (((-1.0) * x957 * x964)) + ((cj4 * x956)) + ((cj4 * x960)) + (((-1.0) * npz * x954 * x957)));
                                                                        evalcond[3] = ((-0.0825) + (((-1.0) * x956 * x957)) + (((-1.0) * cj4 * x964)) + (((-1.0) * x957 * x960)) + (((0.0825) * cj3)) + (((-1.0) * cj4 * x963)) + x959 + ((cj4 * x961)) + ((cj4 * x962)));
                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }

                                                                    rotationfunction0(solutions);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                        bool j5valid[1] = {false};
                                                        _nj5 = 1;
                                                        IkReal x965 = cj6 * cj6;
                                                        IkReal x966 = npy * npy;
                                                        IkReal x967 = ((0.0825) * cj4);
                                                        IkReal x968 = (npy * sj6);
                                                        IkReal x969 = (cj4 * sj3);
                                                        IkReal x970 = (cj3 * npz);
                                                        IkReal x971 = (cj6 * npx);
                                                        IkReal x972 = ((0.00726) * cj4);
                                                        IkReal x973 = ((0.0825) * sj3);
                                                        IkReal x974 = ((0.316) * cj3);
                                                        CheckValue<IkReal> x975 = IKatan2WithCheck(IkReal(((-0.033792) + (((0.316) * npz * x969)) + (((-1.0) * npz * x967)) + (((-1.0) * x971 * x973)) + ((x968 * x973)) + (((-0.027808) * cj3)) + (((0.00726) * sj3)) + (((-0.384) * x968)) + ((x971 * x974)) + (((0.384) * x971)) + ((x967 * x970)) + (((-1.0) * x968 * x974)))), IkReal(((((-0.027808) * x969)) + ((npz * x973)) + ((cj3 * x967 * x971)) + (((-0.316) * x968 * x969)) + (((-1.0) * cj3 * x972)) + ((x967 * x968)) + (((-1.0) * x967 * x971)) + (((-0.384) * npz)) + (((0.316) * x969 * x971)) + (((-0.316) * x970)) + x972 + (((-1.0) * cj3 * x967 * x968)))), IKFAST_ATAN2_MAGTHRESH);
                                                        if (!x975.valid)
                                                        {
                                                            continue;
                                                        }
                                                        CheckValue<IkReal> x976 = IKPowWithIntegerCheck(IKsign(((0.007744) + (((-2.0) * x968 * x971)) + (((0.176) * x968)) + (((-1.0) * x965 * x966)) + ((x965 * (npx * npx))) + (((-0.176) * x971)) + (npz * npz) + x966)), -1);
                                                        if (!x976.valid)
                                                        {
                                                            continue;
                                                        }
                                                        j5array[0] = ((-1.5707963267949) + (x975.value) + (((1.5707963267949) * (x976.value))));
                                                        sj5array[0] = IKsin(j5array[0]);
                                                        cj5array[0] = IKcos(j5array[0]);
                                                        if (j5array[0] > IKPI)
                                                        {
                                                            j5array[0] -= IK2PI;
                                                        }
                                                        else if (j5array[0] < -IKPI)
                                                        {
                                                            j5array[0] += IK2PI;
                                                        }
                                                        j5valid[0] = true;
                                                        for (int ij5 = 0; ij5 < 1; ++ij5)
                                                        {
                                                            if (!j5valid[ij5])
                                                            {
                                                                continue;
                                                            }
                                                            _ij5[0] = ij5;
                                                            _ij5[1] = -1;
                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                            {
                                                                if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                {
                                                                    j5valid[iij5] = false;
                                                                    _ij5[1] = iij5;
                                                                    break;
                                                                }
                                                            }
                                                            j5 = j5array[ij5];
                                                            cj5 = cj5array[ij5];
                                                            sj5 = sj5array[ij5];
                                                            {
                                                                IkReal evalcond[4];
                                                                IkReal x977 = IKsin(j5);
                                                                IkReal x978 = IKcos(j5);
                                                                IkReal x979 = (cj6 * npy);
                                                                IkReal x980 = ((1.0) * sj4);
                                                                IkReal x981 = ((0.0825) * cj4);
                                                                IkReal x982 = ((0.316) * sj3);
                                                                IkReal x983 = (npx * sj6);
                                                                IkReal x984 = ((0.088) * x978);
                                                                IkReal x985 = (npy * sj6 * x978);
                                                                IkReal x986 = ((1.0) * npz * x977);
                                                                IkReal x987 = (cj6 * npx * x978);
                                                                evalcond[0] = ((0.384) + ((npz * x978)) + (((-0.0825) * sj3)) + (((0.316) * cj3)) + ((npy * sj6 * x977)) + (((0.088) * x977)) + (((-1.0) * cj6 * npx * x977)));
                                                                evalcond[1] = ((((-1.0) * x986)) + (((-1.0) * x981)) + ((cj4 * x982)) + (((-1.0) * x987)) + ((cj3 * x981)) + x984 + x985);
                                                                evalcond[2] = (((cj4 * x979)) + ((cj4 * x983)) + (((-1.0) * npz * x977 * x980)) + ((sj4 * x985)) + ((sj4 * x984)) + (((-1.0) * x980 * x987)));
                                                                evalcond[3] = ((-0.0825) + ((cj4 * x985)) + ((cj4 * x984)) + (((0.0825) * cj3)) + (((-1.0) * cj4 * x987)) + (((-1.0) * x980 * x983)) + (((-1.0) * x979 * x980)) + x982 + (((-1.0) * cj4 * x986)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                {
                                                                    continue;
                                                                }
                                                            }

                                                            rotationfunction0(solutions);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            {
                                IkReal j5array[2], cj5array[2], sj5array[2];
                                bool j5valid[2] = {false};
                                _nj5 = 2;
                                IkReal x988 = ((0.088) + (((-1.0) * cj6 * npx)) + ((npy * sj6)));
                                CheckValue<IkReal> x991 = IKatan2WithCheck(IkReal(npz), IkReal(x988), IKFAST_ATAN2_MAGTHRESH);
                                if (!x991.valid)
                                {
                                    continue;
                                }
                                IkReal x989 = ((1.0) * (x991.value));
                                if ((((x988 * x988) + (npz * npz))) < -0.00001)
                                    continue;
                                CheckValue<IkReal> x992 = IKPowWithIntegerCheck(IKabs(IKsqrt(((x988 * x988) + (npz * npz)))), -1);
                                if (!x992.valid)
                                {
                                    continue;
                                }
                                if ((((x992.value) * (((0.384) + (((-0.0825) * sj3)) + (((0.316) * cj3)))))) < -1 - IKFAST_SINCOS_THRESH || (((x992.value) * (((0.384) + (((-0.0825) * sj3)) + (((0.316) * cj3)))))) > 1 + IKFAST_SINCOS_THRESH)
                                    continue;
                                IkReal x990 = IKasin(((x992.value) * (((0.384) + (((-0.0825) * sj3)) + (((0.316) * cj3))))));
                                j5array[0] = ((((-1.0) * x989)) + (((-1.0) * x990)));
                                sj5array[0] = IKsin(j5array[0]);
                                cj5array[0] = IKcos(j5array[0]);
                                j5array[1] = ((3.14159265358979) + (((-1.0) * x989)) + x990);
                                sj5array[1] = IKsin(j5array[1]);
                                cj5array[1] = IKcos(j5array[1]);
                                if (j5array[0] > IKPI)
                                {
                                    j5array[0] -= IK2PI;
                                }
                                else if (j5array[0] < -IKPI)
                                {
                                    j5array[0] += IK2PI;
                                }
                                j5valid[0] = true;
                                if (j5array[1] > IKPI)
                                {
                                    j5array[1] -= IK2PI;
                                }
                                else if (j5array[1] < -IKPI)
                                {
                                    j5array[1] += IK2PI;
                                }
                                j5valid[1] = true;
                                for (int ij5 = 0; ij5 < 2; ++ij5)
                                {
                                    if (!j5valid[ij5])
                                    {
                                        continue;
                                    }
                                    _ij5[0] = ij5;
                                    _ij5[1] = -1;
                                    for (int iij5 = ij5 + 1; iij5 < 2; ++iij5)
                                    {
                                        if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                        {
                                            j5valid[iij5] = false;
                                            _ij5[1] = iij5;
                                            break;
                                        }
                                    }
                                    j5 = j5array[ij5];
                                    cj5 = cj5array[ij5];
                                    sj5 = sj5array[ij5];

                                    {
                                        IkReal j4eval[3];
                                        j4eval[0] = ((-1.0) + cj3 + (((3.83030303030303) * sj3)));
                                        j4eval[1] = ((IKabs((((cj6 * npy)) + ((npx * sj6))))) + (IKabs(((((-0.088) * cj5)) + (((-1.0) * cj5 * npy * sj6)) + ((npz * sj5)) + ((cj5 * cj6 * npx))))));
                                        j4eval[2] = IKsign(((-0.0825) + (((0.0825) * cj3)) + (((0.316) * sj3))));
                                        if (IKabs(j4eval[0]) < 0.0000010000000000 || IKabs(j4eval[1]) < 0.0000010000000000 || IKabs(j4eval[2]) < 0.0000010000000000)
                                        {
                                            {
                                                IkReal j4eval[2];
                                                IkReal x993 = (cj6 * npy);
                                                IkReal x994 = (npx * sj6);
                                                IkReal x995 = ((3.83030303030303) * sj3);
                                                j4eval[0] = ((-1.0) + cj3 + x995);
                                                j4eval[1] = (((x993 * x995)) + (((-1.0) * x993)) + (((-1.0) * x994)) + ((x994 * x995)) + ((cj3 * x993)) + ((cj3 * x994)));
                                                if (IKabs(j4eval[0]) < 0.0000010000000000 || IKabs(j4eval[1]) < 0.0000010000000000)
                                                {
                                                    {
                                                        IkReal j4eval[2];
                                                        IkReal x996 = ((43.5261707988981) * sj3);
                                                        IkReal x997 = (cj3 * cj5);
                                                        IkReal x998 = ((3.83030303030303) * sj3);
                                                        IkReal x999 = (cj5 * cj6 * npx);
                                                        IkReal x1000 = ((11.3636363636364) * npz * sj5);
                                                        IkReal x1001 = (cj5 * npy * sj6);
                                                        j4eval[0] = ((-1.0) + cj3 + x998);
                                                        j4eval[1] = ((((11.3636363636364) * x999)) + x1000 + (((-11.3636363636364) * x1001)) + ((cj5 * x998)) + (((-1.0) * x996 * x999)) + (((-11.3636363636364) * cj6 * npx * x997)) + ((x1001 * x996)) + (((-1.0) * cj3 * x1000)) + (((-1.0) * npz * sj5 * x996)) + x997 + (((-1.0) * cj5)) + (((11.3636363636364) * npy * sj6 * x997)));
                                                        if (IKabs(j4eval[0]) < 0.0000010000000000 || IKabs(j4eval[1]) < 0.0000010000000000)
                                                        {
                                                            {
                                                                IkReal evalcond[1];
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j3))), 6.28318530717959)));
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                    {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                            IkReal j4eval[1];
                                                                            sj3 = 0;
                                                                            cj3 = 1.0;
                                                                            j3 = 0;
                                                                            j4eval[0] = ((IKabs((((cj6 * npy)) + ((npx * sj6))))) + (IKabs(((((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((0.088) * cj5)) + (((-1.0) * cj5 * cj6 * npx))))));
                                                                            if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                            {
                                                                                {
                                                                                    IkReal j4eval[1];
                                                                                    sj3 = 0;
                                                                                    cj3 = 1.0;
                                                                                    j3 = 0;
                                                                                    IkReal x1002 = ((1.0) * cj6);
                                                                                    j4eval[0] = ((IKabs(((((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((-1.0) * cj5 * npx * x1002)) + (((0.088) * cj5))))) + (IKabs(((((-1.0) * npx * sj6)) + (((-1.0) * npy * x1002))))));
                                                                                    if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                                    {
                                                                                        continue; // no branches [j4]
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j4array[2], cj4array[2], sj4array[2];
                                                                                            bool j4valid[2] = {false};
                                                                                            _nj4 = 2;
                                                                                            IkReal x1003 = ((1.0) * cj6);
                                                                                            CheckValue<IkReal> x1005 = IKatan2WithCheck(IkReal(((((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((-1.0) * cj5 * npx * x1003)) + (((0.088) * cj5)))), IkReal(((((-1.0) * npx * sj6)) + (((-1.0) * npy * x1003)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (!x1005.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal x1004 = x1005.value;
                                                                                            j4array[0] = ((-1.0) * x1004);
                                                                                            sj4array[0] = IKsin(j4array[0]);
                                                                                            cj4array[0] = IKcos(j4array[0]);
                                                                                            j4array[1] = ((3.14159265358979) + (((-1.0) * x1004)));
                                                                                            sj4array[1] = IKsin(j4array[1]);
                                                                                            cj4array[1] = IKcos(j4array[1]);
                                                                                            if (j4array[0] > IKPI)
                                                                                            {
                                                                                                j4array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j4array[0] < -IKPI)
                                                                                            {
                                                                                                j4array[0] += IK2PI;
                                                                                            }
                                                                                            j4valid[0] = true;
                                                                                            if (j4array[1] > IKPI)
                                                                                            {
                                                                                                j4array[1] -= IK2PI;
                                                                                            }
                                                                                            else if (j4array[1] < -IKPI)
                                                                                            {
                                                                                                j4array[1] += IK2PI;
                                                                                            }
                                                                                            j4valid[1] = true;
                                                                                            for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                                            {
                                                                                                if (!j4valid[ij4])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij4[0] = ij4;
                                                                                                _ij4[1] = -1;
                                                                                                for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                                                                {
                                                                                                    if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j4valid[iij4] = false;
                                                                                                        _ij4[1] = iij4;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j4 = j4array[ij4];
                                                                                                cj4 = cj4array[ij4];
                                                                                                sj4 = sj4array[ij4];
                                                                                                {
                                                                                                    IkReal evalcond[1];
                                                                                                    IkReal x1006 = IKcos(j4);
                                                                                                    IkReal x1007 = IKsin(j4);
                                                                                                    IkReal x1008 = ((1.0) * x1007);
                                                                                                    IkReal x1009 = (cj5 * x1007);
                                                                                                    evalcond[0] = (((npx * sj6 * x1006)) + ((cj6 * npy * x1006)) + ((npy * sj6 * x1009)) + (((0.088) * x1009)) + (((-1.0) * cj5 * cj6 * npx * x1008)) + (((-1.0) * npz * sj5 * x1008)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                rotationfunction0(solutions);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                {
                                                                                    IkReal j4array[2], cj4array[2], sj4array[2];
                                                                                    bool j4valid[2] = {false};
                                                                                    _nj4 = 2;
                                                                                    CheckValue<IkReal> x1011 = IKatan2WithCheck(IkReal((((cj6 * npy)) + ((npx * sj6)))), IkReal(((((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((0.088) * cj5)) + (((-1.0) * cj5 * cj6 * npx)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x1011.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x1010 = x1011.value;
                                                                                    j4array[0] = ((-1.0) * x1010);
                                                                                    sj4array[0] = IKsin(j4array[0]);
                                                                                    cj4array[0] = IKcos(j4array[0]);
                                                                                    j4array[1] = ((3.14159265358979) + (((-1.0) * x1010)));
                                                                                    sj4array[1] = IKsin(j4array[1]);
                                                                                    cj4array[1] = IKcos(j4array[1]);
                                                                                    if (j4array[0] > IKPI)
                                                                                    {
                                                                                        j4array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j4array[0] < -IKPI)
                                                                                    {
                                                                                        j4array[0] += IK2PI;
                                                                                    }
                                                                                    j4valid[0] = true;
                                                                                    if (j4array[1] > IKPI)
                                                                                    {
                                                                                        j4array[1] -= IK2PI;
                                                                                    }
                                                                                    else if (j4array[1] < -IKPI)
                                                                                    {
                                                                                        j4array[1] += IK2PI;
                                                                                    }
                                                                                    j4valid[1] = true;
                                                                                    for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                                    {
                                                                                        if (!j4valid[ij4])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij4[0] = ij4;
                                                                                        _ij4[1] = -1;
                                                                                        for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                                                        {
                                                                                            if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j4valid[iij4] = false;
                                                                                                _ij4[1] = iij4;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j4 = j4array[ij4];
                                                                                        cj4 = cj4array[ij4];
                                                                                        sj4 = sj4array[ij4];
                                                                                        {
                                                                                            IkReal evalcond[1];
                                                                                            IkReal x1012 = IKcos(j4);
                                                                                            IkReal x1013 = IKsin(j4);
                                                                                            IkReal x1014 = ((1.0) * cj6);
                                                                                            IkReal x1015 = (cj5 * x1012);
                                                                                            evalcond[0] = (((npy * sj6 * x1015)) + (((0.088) * x1015)) + (((-1.0) * npy * x1013 * x1014)) + (((-1.0) * npz * sj5 * x1012)) + (((-1.0) * npx * x1014 * x1015)) + (((-1.0) * npx * sj6 * x1013)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        rotationfunction0(solutions);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                } while (0);
                                                                if (bgotonextstatement)
                                                                {
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((7.39491075446515e-18) + j3)))), 6.28318530717959)));
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                        {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                                IkReal j4eval[1];
                                                                                sj3 = 0;
                                                                                cj3 = 1.0;
                                                                                j3 = -2.7408962440214e-6;
                                                                                j4eval[0] = ((IKabs((((cj6 * npy)) + ((npx * sj6))))) + (IKabs(((((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((0.088) * cj5)) + (((-1.0) * cj5 * cj6 * npx))))));
                                                                                if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                                {
                                                                                    {
                                                                                        IkReal j4eval[1];
                                                                                        sj3 = 0;
                                                                                        cj3 = 1.0;
                                                                                        j3 = -2.7408962440214e-6;
                                                                                        IkReal x1016 = ((1.0) * cj6);
                                                                                        j4eval[0] = ((IKabs(((((-1.0) * cj5 * npx * x1016)) + (((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((0.088) * cj5))))) + (IKabs(((((-1.0) * npx * sj6)) + (((-1.0) * npy * x1016))))));
                                                                                        if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                                        {
                                                                                            continue; // no branches [j4]
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            {
                                                                                                IkReal j4array[2], cj4array[2], sj4array[2];
                                                                                                bool j4valid[2] = {false};
                                                                                                _nj4 = 2;
                                                                                                IkReal x1017 = ((1.0) * cj6);
                                                                                                CheckValue<IkReal> x1019 = IKatan2WithCheck(IkReal(((((-1.0) * cj5 * npx * x1017)) + (((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((0.088) * cj5)))), IkReal(((((-1.0) * npx * sj6)) + (((-1.0) * npy * x1017)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                if (!x1019.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                IkReal x1018 = x1019.value;
                                                                                                j4array[0] = ((-1.0) * x1018);
                                                                                                sj4array[0] = IKsin(j4array[0]);
                                                                                                cj4array[0] = IKcos(j4array[0]);
                                                                                                j4array[1] = ((3.14159265358979) + (((-1.0) * x1018)));
                                                                                                sj4array[1] = IKsin(j4array[1]);
                                                                                                cj4array[1] = IKcos(j4array[1]);
                                                                                                if (j4array[0] > IKPI)
                                                                                                {
                                                                                                    j4array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j4array[0] < -IKPI)
                                                                                                {
                                                                                                    j4array[0] += IK2PI;
                                                                                                }
                                                                                                j4valid[0] = true;
                                                                                                if (j4array[1] > IKPI)
                                                                                                {
                                                                                                    j4array[1] -= IK2PI;
                                                                                                }
                                                                                                else if (j4array[1] < -IKPI)
                                                                                                {
                                                                                                    j4array[1] += IK2PI;
                                                                                                }
                                                                                                j4valid[1] = true;
                                                                                                for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                                                {
                                                                                                    if (!j4valid[ij4])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij4[0] = ij4;
                                                                                                    _ij4[1] = -1;
                                                                                                    for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                                                                    {
                                                                                                        if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j4valid[iij4] = false;
                                                                                                            _ij4[1] = iij4;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j4 = j4array[ij4];
                                                                                                    cj4 = cj4array[ij4];
                                                                                                    sj4 = sj4array[ij4];
                                                                                                    {
                                                                                                        IkReal evalcond[1];
                                                                                                        IkReal x1020 = IKcos(j4);
                                                                                                        IkReal x1021 = IKsin(j4);
                                                                                                        IkReal x1022 = ((1.0) * x1021);
                                                                                                        IkReal x1023 = (cj5 * x1021);
                                                                                                        evalcond[0] = (((npy * sj6 * x1023)) + (((-1.0) * npz * sj5 * x1022)) + ((cj6 * npy * x1020)) + (((-1.0) * cj5 * cj6 * npx * x1022)) + ((npx * sj6 * x1020)) + (((0.088) * x1023)));
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    rotationfunction0(solutions);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j4array[2], cj4array[2], sj4array[2];
                                                                                        bool j4valid[2] = {false};
                                                                                        _nj4 = 2;
                                                                                        CheckValue<IkReal> x1025 = IKatan2WithCheck(IkReal((((cj6 * npy)) + ((npx * sj6)))), IkReal(((((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((0.088) * cj5)) + (((-1.0) * cj5 * cj6 * npx)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (!x1025.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        IkReal x1024 = x1025.value;
                                                                                        j4array[0] = ((-1.0) * x1024);
                                                                                        sj4array[0] = IKsin(j4array[0]);
                                                                                        cj4array[0] = IKcos(j4array[0]);
                                                                                        j4array[1] = ((3.14159265358979) + (((-1.0) * x1024)));
                                                                                        sj4array[1] = IKsin(j4array[1]);
                                                                                        cj4array[1] = IKcos(j4array[1]);
                                                                                        if (j4array[0] > IKPI)
                                                                                        {
                                                                                            j4array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j4array[0] < -IKPI)
                                                                                        {
                                                                                            j4array[0] += IK2PI;
                                                                                        }
                                                                                        j4valid[0] = true;
                                                                                        if (j4array[1] > IKPI)
                                                                                        {
                                                                                            j4array[1] -= IK2PI;
                                                                                        }
                                                                                        else if (j4array[1] < -IKPI)
                                                                                        {
                                                                                            j4array[1] += IK2PI;
                                                                                        }
                                                                                        j4valid[1] = true;
                                                                                        for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                                        {
                                                                                            if (!j4valid[ij4])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij4[0] = ij4;
                                                                                            _ij4[1] = -1;
                                                                                            for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                                                            {
                                                                                                if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j4valid[iij4] = false;
                                                                                                    _ij4[1] = iij4;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j4 = j4array[ij4];
                                                                                            cj4 = cj4array[ij4];
                                                                                            sj4 = sj4array[ij4];
                                                                                            {
                                                                                                IkReal evalcond[1];
                                                                                                IkReal x1026 = IKcos(j4);
                                                                                                IkReal x1027 = IKsin(j4);
                                                                                                IkReal x1028 = ((1.0) * cj6);
                                                                                                IkReal x1029 = (cj5 * x1026);
                                                                                                evalcond[0] = (((npy * sj6 * x1029)) + (((-1.0) * npx * x1028 * x1029)) + (((-1.0) * npz * sj5 * x1026)) + (((0.088) * x1029)) + (((-1.0) * npx * sj6 * x1027)) + (((-1.0) * npy * x1027 * x1028)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            rotationfunction0(solutions);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-2.63084142381503) + j3)))), 6.28318530717959)));
                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                            {
                                                                                bgotonextstatement = false;
                                                                                {
                                                                                    IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                    bool j4valid[1] = {false};
                                                                                    _nj4 = 1;
                                                                                    IkReal x1030 = ((2597402597.4026) * sj6);
                                                                                    IkReal x1031 = ((2597402597.4026) * cj6);
                                                                                    if (IKabs(((((-1.0) * npy * x1031)) + (((-1.0) * npx * x1030)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5 * npy * x1030)) + (((228571428.571429) * cj5)) + (((-1.0) * cj5 * npx * x1031)) + (((-2597402597.4026) * npz * sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * npy * x1031)) + (((-1.0) * npx * x1030)))) + IKsqr((((cj5 * npy * x1030)) + (((228571428.571429) * cj5)) + (((-1.0) * cj5 * npx * x1031)) + (((-2597402597.4026) * npz * sj5)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                    j4array[0] = IKatan2(((((-1.0) * npy * x1031)) + (((-1.0) * npx * x1030))), (((cj5 * npy * x1030)) + (((228571428.571429) * cj5)) + (((-1.0) * cj5 * npx * x1031)) + (((-2597402597.4026) * npz * sj5))));
                                                                                    sj4array[0] = IKsin(j4array[0]);
                                                                                    cj4array[0] = IKcos(j4array[0]);
                                                                                    if (j4array[0] > IKPI)
                                                                                    {
                                                                                        j4array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j4array[0] < -IKPI)
                                                                                    {
                                                                                        j4array[0] += IK2PI;
                                                                                    }
                                                                                    j4valid[0] = true;
                                                                                    for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                    {
                                                                                        if (!j4valid[ij4])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij4[0] = ij4;
                                                                                        _ij4[1] = -1;
                                                                                        for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                                                        {
                                                                                            if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j4valid[iij4] = false;
                                                                                                _ij4[1] = iij4;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j4 = j4array[ij4];
                                                                                        cj4 = cj4array[ij4];
                                                                                        sj4 = sj4array[ij4];
                                                                                        {
                                                                                            IkReal evalcond[4];
                                                                                            IkReal x1032 = IKcos(j4);
                                                                                            IkReal x1033 = IKsin(j4);
                                                                                            IkReal x1034 = ((1.0) * cj6);
                                                                                            IkReal x1035 = (npx * sj6);
                                                                                            IkReal x1036 = (cj5 * sj6);
                                                                                            IkReal x1037 = ((0.088) * cj5);
                                                                                            IkReal x1038 = ((1.0) * npz * sj5);
                                                                                            IkReal x1039 = (npx * x1033);
                                                                                            IkReal x1040 = (npy * x1032);
                                                                                            IkReal x1041 = (cj5 * x1032);
                                                                                            IkReal x1042 = (npy * x1033);
                                                                                            evalcond[0] = ((((-1.0) * x1035)) + (((-3.85e-10) * x1033)) + (((-1.0) * npy * x1034)));
                                                                                            evalcond[1] = ((((-1.0) * x1038)) + x1037 + (((-3.85e-10) * x1032)) + ((npy * x1036)) + (((-1.0) * cj5 * npx * x1034)));
                                                                                            evalcond[2] = ((((-1.0) * x1033 * x1038)) + ((cj6 * x1040)) + (((-1.0) * cj5 * x1034 * x1039)) + ((x1036 * x1042)) + ((x1033 * x1037)) + ((x1032 * x1035)));
                                                                                            evalcond[3] = ((-3.85e-10) + (((-1.0) * x1032 * x1038)) + (((-1.0) * npx * x1034 * x1041)) + (((-1.0) * x1033 * x1035)) + ((x1036 * x1040)) + (((-1.0) * x1034 * x1042)) + ((x1032 * x1037)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        rotationfunction0(solutions);
                                                                                    }
                                                                                }
                                                                            }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                if (1)
                                                                                {
                                                                                    bgotonextstatement = false;
                                                                                    continue; // branch miss [j4]
                                                                                }
                                                                            } while (0);
                                                                            if (bgotonextstatement)
                                                                            {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j4array[1], cj4array[1], sj4array[1];
                                                                bool j4valid[1] = {false};
                                                                _nj4 = 1;
                                                                IkReal x1043 = cj6 * cj6;
                                                                IkReal x1044 = npx * npx;
                                                                IkReal x1045 = ((0.0825) * cj3);
                                                                IkReal x1046 = ((0.05214) * sj3);
                                                                IkReal x1047 = ((0.00726) * cj5);
                                                                IkReal x1048 = (npx * sj6);
                                                                IkReal x1049 = ((0.316) * sj3);
                                                                IkReal x1050 = (npz * sj5);
                                                                IkReal x1051 = (cj6 * npy);
                                                                IkReal x1052 = (cj5 * npy * sj6);
                                                                IkReal x1053 = (cj5 * cj6 * npx);
                                                                CheckValue<IkReal> x1054 = IKPowWithIntegerCheck(((-0.0825) + x1045 + x1049), -1);
                                                                if (!x1054.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x1055 = IKPowWithIntegerCheck(((((-1.0) * x1045 * x1050)) + (((-1.0) * x1045 * x1053)) + ((cj3 * x1047)) + ((x1049 * x1052)) + (((-0.0825) * x1052)) + (((0.027808) * cj5 * sj3)) + (((-1.0) * x1049 * x1050)) + (((-1.0) * x1049 * x1053)) + (((0.0825) * x1053)) + (((0.0825) * x1050)) + ((x1045 * x1052)) + (((-1.0) * x1047))), -1);
                                                                if (!x1055.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                if (IKabs(((x1054.value) * ((x1051 + x1048)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1055.value) * (((-0.10666225) + (((-1.0) * cj3 * x1046)) + ((x1043 * (npy * npy))) + x1046 + x1044 + (((2.0) * x1048 * x1051)) + (((-1.0) * x1043 * x1044)) + (((0.0136125) * cj3)) + (((0.09304975) * (cj3 * cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1054.value) * ((x1051 + x1048)))) + IKsqr(((x1055.value) * (((-0.10666225) + (((-1.0) * cj3 * x1046)) + ((x1043 * (npy * npy))) + x1046 + x1044 + (((2.0) * x1048 * x1051)) + (((-1.0) * x1043 * x1044)) + (((0.0136125) * cj3)) + (((0.09304975) * (cj3 * cj3))))))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                    continue;
                                                                j4array[0] = IKatan2(((x1054.value) * ((x1051 + x1048))), ((x1055.value) * (((-0.10666225) + (((-1.0) * cj3 * x1046)) + ((x1043 * (npy * npy))) + x1046 + x1044 + (((2.0) * x1048 * x1051)) + (((-1.0) * x1043 * x1044)) + (((0.0136125) * cj3)) + (((0.09304975) * (cj3 * cj3)))))));
                                                                sj4array[0] = IKsin(j4array[0]);
                                                                cj4array[0] = IKcos(j4array[0]);
                                                                if (j4array[0] > IKPI)
                                                                {
                                                                    j4array[0] -= IK2PI;
                                                                }
                                                                else if (j4array[0] < -IKPI)
                                                                {
                                                                    j4array[0] += IK2PI;
                                                                }
                                                                j4valid[0] = true;
                                                                for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                {
                                                                    if (!j4valid[ij4])
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij4[0] = ij4;
                                                                    _ij4[1] = -1;
                                                                    for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                                    {
                                                                        if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                                        {
                                                                            j4valid[iij4] = false;
                                                                            _ij4[1] = iij4;
                                                                            break;
                                                                        }
                                                                    }
                                                                    j4 = j4array[ij4];
                                                                    cj4 = cj4array[ij4];
                                                                    sj4 = sj4array[ij4];
                                                                    {
                                                                        IkReal evalcond[4];
                                                                        IkReal x1056 = IKsin(j4);
                                                                        IkReal x1057 = IKcos(j4);
                                                                        IkReal x1058 = (npx * sj6);
                                                                        IkReal x1059 = ((0.316) * sj3);
                                                                        IkReal x1060 = ((0.0825) * cj3);
                                                                        IkReal x1061 = (npy * sj6);
                                                                        IkReal x1062 = ((0.088) * cj5);
                                                                        IkReal x1063 = ((1.0) * npy);
                                                                        IkReal x1064 = ((0.0825) * x1056);
                                                                        IkReal x1065 = (cj6 * x1057);
                                                                        IkReal x1066 = ((1.0) * npz * sj5);
                                                                        IkReal x1067 = ((1.0) * cj5 * npx);
                                                                        IkReal x1068 = (cj5 * x1056);
                                                                        IkReal x1069 = (cj6 * x1056);
                                                                        evalcond[0] = (((x1056 * x1060)) + (((-1.0) * cj6 * x1063)) + ((x1056 * x1059)) + (((-1.0) * x1058)) + (((-1.0) * x1064)));
                                                                        evalcond[1] = ((((-1.0) * cj6 * x1067)) + x1062 + ((x1057 * x1059)) + ((x1057 * x1060)) + (((-0.0825) * x1057)) + ((cj5 * x1061)) + (((-1.0) * x1066)));
                                                                        evalcond[2] = (((x1056 * x1062)) + ((x1061 * x1068)) + ((x1057 * x1058)) + (((-1.0) * x1056 * x1066)) + (((-1.0) * x1067 * x1069)) + ((npy * x1065)));
                                                                        evalcond[3] = ((-0.0825) + (((-1.0) * x1063 * x1069)) + x1059 + x1060 + ((cj5 * x1057 * x1061)) + ((x1057 * x1062)) + (((-1.0) * x1057 * x1066)) + (((-1.0) * x1056 * x1058)) + (((-1.0) * x1065 * x1067)));
                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }

                                                                    rotationfunction0(solutions);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j4array[1], cj4array[1], sj4array[1];
                                                        bool j4valid[1] = {false};
                                                        _nj4 = 1;
                                                        IkReal x1070 = (cj5 * npx);
                                                        IkReal x1071 = (cj6 * npy);
                                                        IkReal x1072 = ((0.316) * sj3);
                                                        IkReal x1073 = ((0.0825) * cj3);
                                                        IkReal x1074 = (npx * sj6);
                                                        IkReal x1075 = (npz * sj5);
                                                        IkReal x1076 = (cj5 * cj6 * sj6);
                                                        CheckValue<IkReal> x1077 = IKPowWithIntegerCheck(((-0.0825) + x1072 + x1073), -1);
                                                        if (!x1077.valid)
                                                        {
                                                            continue;
                                                        }
                                                        CheckValue<IkReal> x1078 = IKPowWithIntegerCheck((((x1071 * x1073)) + ((x1071 * x1072)) + (((-0.0825) * x1071)) + (((-0.0825) * x1074)) + ((x1073 * x1074)) + ((x1072 * x1074))), -1);
                                                        if (!x1078.valid)
                                                        {
                                                            continue;
                                                        }
                                                        if (IKabs(((x1077.value) * ((x1074 + x1071)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1078.value) * ((((x1074 * x1075)) + ((cj6 * x1070 * x1074)) + (((-0.088) * cj5 * x1071)) + ((x1071 * x1075)) + (((-1.0) * npy * x1070)) + (((2.0) * cj6 * x1070 * x1071)) + (((-0.088) * sj6 * x1070)) + (((-1.0) * cj5 * npy * sj6 * x1071)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1077.value) * ((x1074 + x1071)))) + IKsqr(((x1078.value) * ((((x1074 * x1075)) + ((cj6 * x1070 * x1074)) + (((-0.088) * cj5 * x1071)) + ((x1071 * x1075)) + (((-1.0) * npy * x1070)) + (((2.0) * cj6 * x1070 * x1071)) + (((-0.088) * sj6 * x1070)) + (((-1.0) * cj5 * npy * sj6 * x1071)))))) - 1) <= IKFAST_SINCOS_THRESH)
                                                            continue;
                                                        j4array[0] = IKatan2(((x1077.value) * ((x1074 + x1071))), ((x1078.value) * ((((x1074 * x1075)) + ((cj6 * x1070 * x1074)) + (((-0.088) * cj5 * x1071)) + ((x1071 * x1075)) + (((-1.0) * npy * x1070)) + (((2.0) * cj6 * x1070 * x1071)) + (((-0.088) * sj6 * x1070)) + (((-1.0) * cj5 * npy * sj6 * x1071))))));
                                                        sj4array[0] = IKsin(j4array[0]);
                                                        cj4array[0] = IKcos(j4array[0]);
                                                        if (j4array[0] > IKPI)
                                                        {
                                                            j4array[0] -= IK2PI;
                                                        }
                                                        else if (j4array[0] < -IKPI)
                                                        {
                                                            j4array[0] += IK2PI;
                                                        }
                                                        j4valid[0] = true;
                                                        for (int ij4 = 0; ij4 < 1; ++ij4)
                                                        {
                                                            if (!j4valid[ij4])
                                                            {
                                                                continue;
                                                            }
                                                            _ij4[0] = ij4;
                                                            _ij4[1] = -1;
                                                            for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                            {
                                                                if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                                {
                                                                    j4valid[iij4] = false;
                                                                    _ij4[1] = iij4;
                                                                    break;
                                                                }
                                                            }
                                                            j4 = j4array[ij4];
                                                            cj4 = cj4array[ij4];
                                                            sj4 = sj4array[ij4];
                                                            {
                                                                IkReal evalcond[4];
                                                                IkReal x1079 = IKsin(j4);
                                                                IkReal x1080 = IKcos(j4);
                                                                IkReal x1081 = (npx * sj6);
                                                                IkReal x1082 = ((0.316) * sj3);
                                                                IkReal x1083 = ((0.0825) * cj3);
                                                                IkReal x1084 = (npy * sj6);
                                                                IkReal x1085 = ((0.088) * cj5);
                                                                IkReal x1086 = ((1.0) * npy);
                                                                IkReal x1087 = ((0.0825) * x1079);
                                                                IkReal x1088 = (cj6 * x1080);
                                                                IkReal x1089 = ((1.0) * npz * sj5);
                                                                IkReal x1090 = ((1.0) * cj5 * npx);
                                                                IkReal x1091 = (cj5 * x1079);
                                                                IkReal x1092 = (cj6 * x1079);
                                                                evalcond[0] = (((x1079 * x1082)) + ((x1079 * x1083)) + (((-1.0) * x1081)) + (((-1.0) * cj6 * x1086)) + (((-1.0) * x1087)));
                                                                evalcond[1] = (((cj5 * x1084)) + x1085 + (((-1.0) * cj6 * x1090)) + (((-0.0825) * x1080)) + ((x1080 * x1083)) + ((x1080 * x1082)) + (((-1.0) * x1089)));
                                                                evalcond[2] = (((x1079 * x1085)) + ((npy * x1088)) + ((x1084 * x1091)) + (((-1.0) * x1090 * x1092)) + (((-1.0) * x1079 * x1089)) + ((x1080 * x1081)));
                                                                evalcond[3] = ((-0.0825) + (((-1.0) * x1086 * x1092)) + x1083 + x1082 + (((-1.0) * x1088 * x1090)) + (((-1.0) * x1079 * x1081)) + (((-1.0) * x1080 * x1089)) + ((cj5 * x1080 * x1084)) + ((x1080 * x1085)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                {
                                                                    continue;
                                                                }
                                                            }

                                                            rotationfunction0(solutions);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            {
                                                IkReal j4array[1], cj4array[1], sj4array[1];
                                                bool j4valid[1] = {false};
                                                _nj4 = 1;
                                                CheckValue<IkReal> x1093 = IKatan2WithCheck(IkReal((((cj6 * npy)) + ((npx * sj6)))), IkReal(((((-0.088) * cj5)) + (((-1.0) * cj5 * npy * sj6)) + ((npz * sj5)) + ((cj5 * cj6 * npx)))), IKFAST_ATAN2_MAGTHRESH);
                                                if (!x1093.valid)
                                                {
                                                    continue;
                                                }
                                                CheckValue<IkReal> x1094 = IKPowWithIntegerCheck(IKsign(((-0.0825) + (((0.0825) * cj3)) + (((0.316) * sj3)))), -1);
                                                if (!x1094.valid)
                                                {
                                                    continue;
                                                }
                                                j4array[0] = ((-1.5707963267949) + (x1093.value) + (((1.5707963267949) * (x1094.value))));
                                                sj4array[0] = IKsin(j4array[0]);
                                                cj4array[0] = IKcos(j4array[0]);
                                                if (j4array[0] > IKPI)
                                                {
                                                    j4array[0] -= IK2PI;
                                                }
                                                else if (j4array[0] < -IKPI)
                                                {
                                                    j4array[0] += IK2PI;
                                                }
                                                j4valid[0] = true;
                                                for (int ij4 = 0; ij4 < 1; ++ij4)
                                                {
                                                    if (!j4valid[ij4])
                                                    {
                                                        continue;
                                                    }
                                                    _ij4[0] = ij4;
                                                    _ij4[1] = -1;
                                                    for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                    {
                                                        if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                        {
                                                            j4valid[iij4] = false;
                                                            _ij4[1] = iij4;
                                                            break;
                                                        }
                                                    }
                                                    j4 = j4array[ij4];
                                                    cj4 = cj4array[ij4];
                                                    sj4 = sj4array[ij4];
                                                    {
                                                        IkReal evalcond[4];
                                                        IkReal x1095 = IKsin(j4);
                                                        IkReal x1096 = IKcos(j4);
                                                        IkReal x1097 = (npx * sj6);
                                                        IkReal x1098 = ((0.316) * sj3);
                                                        IkReal x1099 = ((0.0825) * cj3);
                                                        IkReal x1100 = (npy * sj6);
                                                        IkReal x1101 = ((0.088) * cj5);
                                                        IkReal x1102 = ((1.0) * npy);
                                                        IkReal x1103 = ((0.0825) * x1095);
                                                        IkReal x1104 = (cj6 * x1096);
                                                        IkReal x1105 = ((1.0) * npz * sj5);
                                                        IkReal x1106 = ((1.0) * cj5 * npx);
                                                        IkReal x1107 = (cj5 * x1095);
                                                        IkReal x1108 = (cj6 * x1095);
                                                        evalcond[0] = (((x1095 * x1098)) + ((x1095 * x1099)) + (((-1.0) * x1097)) + (((-1.0) * cj6 * x1102)) + (((-1.0) * x1103)));
                                                        evalcond[1] = (x1101 + (((-0.0825) * x1096)) + ((cj5 * x1100)) + (((-1.0) * cj6 * x1106)) + ((x1096 * x1098)) + ((x1096 * x1099)) + (((-1.0) * x1105)));
                                                        evalcond[2] = (((npy * x1104)) + (((-1.0) * x1106 * x1108)) + ((x1100 * x1107)) + (((-1.0) * x1095 * x1105)) + ((x1096 * x1097)) + ((x1095 * x1101)));
                                                        evalcond[3] = ((-0.0825) + x1098 + x1099 + ((cj5 * x1096 * x1100)) + ((x1096 * x1101)) + (((-1.0) * x1104 * x1106)) + (((-1.0) * x1102 * x1108)) + (((-1.0) * x1095 * x1097)) + (((-1.0) * x1096 * x1105)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                        {
                                                            continue;
                                                        }
                                                    }

                                                    rotationfunction0(solutions);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return solutions.GetNumSolutions() > 0;
    }

    void IKSolver::rotationfunction0(IkSolutionListBase<IkReal> &solutions)
    {
        for (int rotationiter = 0; rotationiter < 1; ++rotationiter)
        {
            IkReal x128 = ((1.0) * sj6);
            IkReal x129 = ((1.0) * sj3);
            IkReal x130 = ((1.0) * cj5);
            IkReal x131 = ((1.0) * sj4);
            IkReal x132 = ((1.0) * cj6);
            IkReal x133 = ((-1.0) * sj4);
            IkReal x134 = ((-1.0) * cj5);
            IkReal x135 = (((cj6 * r00)) + (((-1.0) * r01 * x128)));
            IkReal x136 = ((((-1.0) * r11 * x128)) + ((cj6 * r10)));
            IkReal x137 = (((cj6 * r20)) + (((-1.0) * r21 * x128)));
            IkReal x138 = (sj5 * x135);
            IkReal x139 = ((((-1.0) * r00 * x128)) + (((-1.0) * r01 * x132)));
            IkReal x140 = ((((-1.0) * r10 * x128)) + (((-1.0) * r11 * x132)));
            IkReal x141 = ((((-1.0) * r20 * x128)) + (((-1.0) * r21 * x132)));
            IkReal x142 = (((r02 * sj5)) + ((cj5 * x135)));
            IkReal x143 = (((r12 * sj5)) + ((cj5 * x136)));
            IkReal x144 = (((r22 * sj5)) + ((cj5 * x137)));
            IkReal x145 = (((sj5 * x137)) + (((-1.0) * r22 * x130)));
            IkReal x146 = (cj4 * x142);
            IkReal x147 = (((sj5 * x136)) + ((r12 * x134)));
            IkReal x148 = ((((-1.0) * x131 * x140)) + ((cj4 * x143)));
            IkReal x149 = (((x133 * x141)) + ((cj4 * x144)));
            new_r00 = ((((-1.0) * x129 * ((x138 + (((-1.0) * r02 * x130)))))) + ((cj3 * ((x146 + ((x133 * x139)))))));
            new_r01 = (((sj4 * x142)) + ((cj4 * x139)));
            new_r02 = (((sj3 * ((x146 + (((-1.0) * x131 * x139)))))) + ((cj3 * ((((r02 * x134)) + x138)))));
            new_r10 = ((((-1.0) * x129 * x147)) + ((cj3 * x148)));
            new_r11 = (((sj4 * x143)) + ((cj4 * x140)));
            new_r12 = (((cj3 * x147)) + ((sj3 * x148)));
            new_r20 = ((((-1.0) * x129 * x145)) + ((cj3 * x149)));
            new_r21 = (((sj4 * x144)) + ((cj4 * x141)));
            new_r22 = (((cj3 * x145)) + ((sj3 * x149)));
            {
                IkReal j1array[2], cj1array[2], sj1array[2];
                bool j1valid[2] = {false};
                _nj1 = 2;
                cj1array[0] = new_r22;
                if (cj1array[0] >= -1 - IKFAST_SINCOS_THRESH && cj1array[0] <= 1 + IKFAST_SINCOS_THRESH)
                {
                    j1valid[0] = j1valid[1] = true;
                    j1array[0] = IKacos(cj1array[0]);
                    sj1array[0] = IKsin(j1array[0]);
                    cj1array[1] = cj1array[0];
                    j1array[1] = -j1array[0];
                    sj1array[1] = -sj1array[0];
                }
                else if (isnan(cj1array[0]))
                {
                    // probably any value will work
                    j1valid[0] = true;
                    cj1array[0] = 1;
                    sj1array[0] = 0;
                    j1array[0] = 0;
                }
                for (int ij1 = 0; ij1 < 2; ++ij1)
                {
                    if (!j1valid[ij1])
                    {
                        continue;
                    }
                    _ij1[0] = ij1;
                    _ij1[1] = -1;
                    for (int iij1 = ij1 + 1; iij1 < 2; ++iij1)
                    {
                        if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                        {
                            j1valid[iij1] = false;
                            _ij1[1] = iij1;
                            break;
                        }
                    }
                    j1 = j1array[ij1];
                    cj1 = cj1array[ij1];
                    sj1 = sj1array[ij1];

                    {
                        IkReal j0eval[3];
                        j0eval[0] = sj1;
                        j0eval[1] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                        j0eval[2] = IKsign(sj1);
                        if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000 || IKabs(j0eval[2]) < 0.0000010000000000)
                        {
                            {
                                IkReal j2eval[3];
                                j2eval[0] = sj1;
                                j2eval[1] = IKsign(sj1);
                                j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                {
                                    {
                                        IkReal j0eval[2];
                                        j0eval[0] = new_r12;
                                        j0eval[1] = sj1;
                                        if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000)
                                        {
                                            {
                                                IkReal evalcond[5];
                                                bool bgotonextstatement = true;
                                                do
                                                {
                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                    evalcond[1] = new_r20;
                                                    evalcond[2] = new_r02;
                                                    evalcond[3] = new_r12;
                                                    evalcond[4] = new_r21;
                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                    {
                                                        bgotonextstatement = false;
                                                        IkReal j2mul = 1;
                                                        j2 = 0;
                                                        j0mul = -1.0;
                                                        if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(new_r00) - 1) <= IKFAST_SINCOS_THRESH)
                                                            continue;
                                                        j0 = IKatan2(((-1.0) * new_r01), new_r00);
                                                        {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                            vinfos[0].jointtype = 1;
                                                            vinfos[0].foffset = j0;
                                                            vinfos[0].fmul = j0mul;
                                                            vinfos[0].freeind = 0;
                                                            vinfos[0].maxsolutions = 0;
                                                            vinfos[1].jointtype = 1;
                                                            vinfos[1].foffset = j1;
                                                            vinfos[1].indices[0] = _ij1[0];
                                                            vinfos[1].indices[1] = _ij1[1];
                                                            vinfos[1].maxsolutions = _nj1;
                                                            vinfos[2].jointtype = 1;
                                                            vinfos[2].foffset = j2;
                                                            vinfos[2].fmul = j2mul;
                                                            vinfos[2].freeind = 0;
                                                            vinfos[2].maxsolutions = 0;
                                                            vinfos[3].jointtype = 1;
                                                            vinfos[3].foffset = j3;
                                                            vinfos[3].indices[0] = _ij3[0];
                                                            vinfos[3].indices[1] = _ij3[1];
                                                            vinfos[3].maxsolutions = _nj3;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j4;
                                                            vinfos[4].indices[0] = _ij4[0];
                                                            vinfos[4].indices[1] = _ij4[1];
                                                            vinfos[4].maxsolutions = _nj4;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j5;
                                                            vinfos[5].indices[0] = _ij5[0];
                                                            vinfos[5].indices[1] = _ij5[1];
                                                            vinfos[5].maxsolutions = _nj5;
                                                            vinfos[6].jointtype = 1;
                                                            vinfos[6].foffset = j6;
                                                            vinfos[6].indices[0] = _ij6[0];
                                                            vinfos[6].indices[1] = _ij6[1];
                                                            vinfos[6].maxsolutions = _nj6;
                                                            std::vector<int> vfree(1);
                                                            vfree[0] = 2;
                                                            solutions.AddSolution(vinfos, vfree);
                                                        }
                                                    }
                                                } while (0);
                                                if (bgotonextstatement)
                                                {
                                                    bool bgotonextstatement = true;
                                                    do
                                                    {
                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                        evalcond[1] = new_r20;
                                                        evalcond[2] = new_r02;
                                                        evalcond[3] = new_r12;
                                                        evalcond[4] = new_r21;
                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                        {
                                                            bgotonextstatement = false;
                                                            IkReal j2mul = 1;
                                                            j2 = 0;
                                                            j0mul = 1.0;
                                                            if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(((-1.0) * new_r00)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                continue;
                                                            j0 = IKatan2(((-1.0) * new_r01), ((-1.0) * new_r00));
                                                            {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].fmul = j0mul;
                                                                vinfos[0].freeind = 0;
                                                                vinfos[0].maxsolutions = 0;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].fmul = j2mul;
                                                                vinfos[2].freeind = 0;
                                                                vinfos[2].maxsolutions = 0;
                                                                vinfos[3].jointtype = 1;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(1);
                                                                vfree[0] = 2;
                                                                solutions.AddSolution(vinfos, vfree);
                                                            }
                                                        }
                                                    } while (0);
                                                    if (bgotonextstatement)
                                                    {
                                                        bool bgotonextstatement = true;
                                                        do
                                                        {
                                                            evalcond[0] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                            {
                                                                bgotonextstatement = false;
                                                                {
                                                                    IkReal j0eval[1];
                                                                    new_r02 = 0;
                                                                    new_r12 = 0;
                                                                    new_r20 = 0;
                                                                    new_r21 = 0;
                                                                    IkReal x150 = new_r22 * new_r22;
                                                                    IkReal x151 = ((16.0) * new_r10);
                                                                    IkReal x152 = ((16.0) * new_r01);
                                                                    IkReal x153 = ((16.0) * new_r22);
                                                                    IkReal x154 = ((8.0) * new_r11);
                                                                    IkReal x155 = ((8.0) * new_r00);
                                                                    IkReal x156 = (x150 * x151);
                                                                    IkReal x157 = (x150 * x152);
                                                                    j0eval[0] = ((IKabs(((((-1.0) * x152)) + x157))) + (IKabs((((x150 * x154)) + (((-1.0) * new_r22 * x155))))) + (IKabs(((((-1.0) * x155)) + ((new_r22 * x154))))) + (IKabs(((((-32.0) * new_r00 * x150)) + ((new_r11 * x153)) + (((16.0) * new_r00))))) + (IKabs(((((-1.0) * x151)) + x156))) + (IKabs(((((-1.0) * x156)) + x151))) + (IKabs(((((32.0) * new_r11)) + (((-1.0) * new_r00 * x153)) + (((-16.0) * new_r11 * x150))))) + (IKabs(((((-1.0) * x157)) + x152))));
                                                                    if (IKabs(j0eval[0]) < 0.0000000100000000)
                                                                    {
                                                                        continue; // no branches [j0, j2]
                                                                    }
                                                                    else
                                                                    {
                                                                        IkReal op[4 + 1], zeror[4];
                                                                        int numroots;
                                                                        IkReal j0evalpoly[1];
                                                                        IkReal x158 = new_r22 * new_r22;
                                                                        IkReal x159 = ((16.0) * new_r10);
                                                                        IkReal x160 = (new_r11 * new_r22);
                                                                        IkReal x161 = (x158 * x159);
                                                                        IkReal x162 = ((((8.0) * x160)) + (((-8.0) * new_r00)));
                                                                        op[0] = x162;
                                                                        op[1] = ((((-1.0) * x161)) + x159);
                                                                        op[2] = ((((-32.0) * new_r00 * x158)) + (((16.0) * new_r00)) + (((16.0) * x160)));
                                                                        op[3] = ((((-1.0) * x159)) + x161);
                                                                        op[4] = x162;
                                                                        polyroots4(op, zeror, numroots);
                                                                        IkReal j0array[4], cj0array[4], sj0array[4], tempj0array[1];
                                                                        int numsolutions = 0;
                                                                        for (int ij0 = 0; ij0 < numroots; ++ij0)
                                                                        {
                                                                            IkReal htj0 = zeror[ij0];
                                                                            tempj0array[0] = ((2.0) * (atan(htj0)));
                                                                            for (int kj0 = 0; kj0 < 1; ++kj0)
                                                                            {
                                                                                j0array[numsolutions] = tempj0array[kj0];
                                                                                if (j0array[numsolutions] > IKPI)
                                                                                {
                                                                                    j0array[numsolutions] -= IK2PI;
                                                                                }
                                                                                else if (j0array[numsolutions] < -IKPI)
                                                                                {
                                                                                    j0array[numsolutions] += IK2PI;
                                                                                }
                                                                                sj0array[numsolutions] = IKsin(j0array[numsolutions]);
                                                                                cj0array[numsolutions] = IKcos(j0array[numsolutions]);
                                                                                numsolutions++;
                                                                            }
                                                                        }
                                                                        bool j0valid[4] = {true, true, true, true};
                                                                        _nj0 = 4;
                                                                        for (int ij0 = 0; ij0 < numsolutions; ++ij0)
                                                                        {
                                                                            if (!j0valid[ij0])
                                                                            {
                                                                                continue;
                                                                            }
                                                                            j0 = j0array[ij0];
                                                                            cj0 = cj0array[ij0];
                                                                            sj0 = sj0array[ij0];
                                                                            htj0 = IKtan(j0 / 2);

                                                                            IkReal x163 = ((16.0) * new_r01);
                                                                            IkReal x164 = new_r22 * new_r22;
                                                                            IkReal x165 = (new_r00 * new_r22);
                                                                            IkReal x166 = ((8.0) * x165);
                                                                            IkReal x167 = (new_r11 * x164);
                                                                            IkReal x168 = (x163 * x164);
                                                                            IkReal x169 = ((8.0) * x167);
                                                                            j0evalpoly[0] = ((((htj0 * htj0) * (((((32.0) * new_r11)) + (((-16.0) * x167)) + (((-16.0) * x165)))))) + (((htj0 * htj0 * htj0 * htj0) * (((((-1.0) * x166)) + x169)))) + ((htj0 * (((((-1.0) * x168)) + x163)))) + (((-1.0) * x166)) + (((htj0 * htj0 * htj0) * (((((-1.0) * x163)) + x168)))) + x169);
                                                                            if (IKabs(j0evalpoly[0]) > 0.0000001000000000)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            _ij0[0] = ij0;
                                                                            _ij0[1] = -1;
                                                                            for (int iij0 = ij0 + 1; iij0 < numsolutions; ++iij0)
                                                                            {
                                                                                if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                    j0valid[iij0] = false;
                                                                                    _ij0[1] = iij0;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            {
                                                                                IkReal j2eval[3];
                                                                                new_r02 = 0;
                                                                                new_r12 = 0;
                                                                                new_r20 = 0;
                                                                                new_r21 = 0;
                                                                                IkReal x170 = cj0 * cj0;
                                                                                IkReal x171 = (cj0 * new_r22);
                                                                                IkReal x172 = ((-1.0) + x170 + (((-1.0) * x170 * (new_r22 * new_r22))));
                                                                                j2eval[0] = x172;
                                                                                j2eval[1] = IKsign(x172);
                                                                                j2eval[2] = ((IKabs((((new_r01 * sj0)) + (((-1.0) * new_r00 * x171))))) + (IKabs((((new_r01 * x171)) + ((new_r00 * sj0))))));
                                                                                if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                                {
                                                                                    {
                                                                                        IkReal j2eval[1];
                                                                                        new_r02 = 0;
                                                                                        new_r12 = 0;
                                                                                        new_r20 = 0;
                                                                                        new_r21 = 0;
                                                                                        j2eval[0] = new_r22;
                                                                                        if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                        {
                                                                                            {
                                                                                                IkReal j2eval[2];
                                                                                                new_r02 = 0;
                                                                                                new_r12 = 0;
                                                                                                new_r20 = 0;
                                                                                                new_r21 = 0;
                                                                                                IkReal x173 = new_r22 * new_r22;
                                                                                                j2eval[0] = (((cj0 * x173)) + (((-1.0) * cj0)));
                                                                                                j2eval[1] = ((((-1.0) * sj0)) + ((sj0 * x173)));
                                                                                                if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                                                {
                                                                                                    {
                                                                                                        IkReal evalcond[1];
                                                                                                        bool bgotonextstatement = true;
                                                                                                        do
                                                                                                        {
                                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                            {
                                                                                                                bgotonextstatement = false;
                                                                                                                {
                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                    bool j2valid[1] = {false};
                                                                                                                    _nj2 = 1;
                                                                                                                    if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r00)) + IKsqr(((-1.0) * new_r01)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                        continue;
                                                                                                                    j2array[0] = IKatan2(((-1.0) * new_r00), ((-1.0) * new_r01));
                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j2valid[0] = true;
                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                    {
                                                                                                                        if (!j2valid[ij2])
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij2[0] = ij2;
                                                                                                                        _ij2[1] = -1;
                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                        {
                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                            {
                                                                                                                                j2valid[iij2] = false;
                                                                                                                                _ij2[1] = iij2;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j2 = j2array[ij2];
                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                        {
                                                                                                                            IkReal evalcond[4];
                                                                                                                            IkReal x174 = IKsin(j2);
                                                                                                                            IkReal x175 = IKcos(j2);
                                                                                                                            evalcond[0] = x174;
                                                                                                                            evalcond[1] = ((-1.0) * x175);
                                                                                                                            evalcond[2] = ((((-1.0) * x174)) + (((-1.0) * new_r00)));
                                                                                                                            evalcond[3] = ((((-1.0) * x175)) + (((-1.0) * new_r01)));
                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                            std::vector<int> vfree(0);
                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } while (0);
                                                                                                        if (bgotonextstatement)
                                                                                                        {
                                                                                                            bool bgotonextstatement = true;
                                                                                                            do
                                                                                                            {
                                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                {
                                                                                                                    bgotonextstatement = false;
                                                                                                                    {
                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                        bool j2valid[1] = {false};
                                                                                                                        _nj2 = 1;
                                                                                                                        if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00) + IKsqr(new_r01) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                            continue;
                                                                                                                        j2array[0] = IKatan2(new_r00, new_r01);
                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                        {
                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                        {
                                                                                                                            j2array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j2valid[0] = true;
                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                        {
                                                                                                                            if (!j2valid[ij2])
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij2[0] = ij2;
                                                                                                                            _ij2[1] = -1;
                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                            {
                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                {
                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j2 = j2array[ij2];
                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                            {
                                                                                                                                IkReal evalcond[4];
                                                                                                                                IkReal x176 = IKsin(j2);
                                                                                                                                IkReal x177 = IKcos(j2);
                                                                                                                                evalcond[0] = x176;
                                                                                                                                evalcond[1] = ((-1.0) * x177);
                                                                                                                                evalcond[2] = ((((-1.0) * x176)) + new_r00);
                                                                                                                                evalcond[3] = ((((-1.0) * x177)) + new_r01);
                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            {
                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            } while (0);
                                                                                                            if (bgotonextstatement)
                                                                                                            {
                                                                                                                bool bgotonextstatement = true;
                                                                                                                do
                                                                                                                {
                                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                    {
                                                                                                                        bgotonextstatement = false;
                                                                                                                        {
                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                            bool j2valid[1] = {false};
                                                                                                                            _nj2 = 1;
                                                                                                                            if (IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10) + IKsqr(new_r11) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                continue;
                                                                                                                            j2array[0] = IKatan2(new_r10, new_r11);
                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                            {
                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                            }
                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                            {
                                                                                                                                j2array[0] += IK2PI;
                                                                                                                            }
                                                                                                                            j2valid[0] = true;
                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                            {
                                                                                                                                if (!j2valid[ij2])
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                _ij2[0] = ij2;
                                                                                                                                _ij2[1] = -1;
                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                {
                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                    {
                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                        break;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                j2 = j2array[ij2];
                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                {
                                                                                                                                    IkReal evalcond[4];
                                                                                                                                    IkReal x178 = IKsin(j2);
                                                                                                                                    IkReal x179 = IKcos(j2);
                                                                                                                                    evalcond[0] = x178;
                                                                                                                                    evalcond[1] = ((-1.0) * x179);
                                                                                                                                    evalcond[2] = ((((-1.0) * x178)) + new_r10);
                                                                                                                                    evalcond[3] = ((((-1.0) * x179)) + new_r11);
                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                }

                                                                                                                                {
                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } while (0);
                                                                                                                if (bgotonextstatement)
                                                                                                                {
                                                                                                                    bool bgotonextstatement = true;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                        {
                                                                                                                            bgotonextstatement = false;
                                                                                                                            {
                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                _nj2 = 1;
                                                                                                                                if (IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r10)) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                    continue;
                                                                                                                                j2array[0] = IKatan2(((-1.0) * new_r10), ((-1.0) * new_r11));
                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                {
                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                }
                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                {
                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                }
                                                                                                                                j2valid[0] = true;
                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                {
                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                    _ij2[1] = -1;
                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                    {
                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                        {
                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                    {
                                                                                                                                        IkReal evalcond[4];
                                                                                                                                        IkReal x180 = IKsin(j2);
                                                                                                                                        IkReal x181 = IKcos(j2);
                                                                                                                                        evalcond[0] = x180;
                                                                                                                                        evalcond[1] = ((-1.0) * x181);
                                                                                                                                        evalcond[2] = ((((-1.0) * x180)) + (((-1.0) * new_r10)));
                                                                                                                                        evalcond[3] = ((((-1.0) * x181)) + (((-1.0) * new_r11)));
                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                    {
                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } while (0);
                                                                                                                    if (bgotonextstatement)
                                                                                                                    {
                                                                                                                        bool bgotonextstatement = true;
                                                                                                                        do
                                                                                                                        {
                                                                                                                            CheckValue<IkReal> x182 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                            if (!x182.valid)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            if ((x182.value) < -0.00001)
                                                                                                                                continue;
                                                                                                                            IkReal gconst0 = ((-1.0) * (IKsqrt(x182.value)));
                                                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs((cj0 + (((-1.0) * gconst0))))) + (IKabs(((-1.0) + (IKsign(sj0)))))), 6.28318530717959)));
                                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                            {
                                                                                                                                bgotonextstatement = false;
                                                                                                                                {
                                                                                                                                    IkReal j2eval[1];
                                                                                                                                    new_r02 = 0;
                                                                                                                                    new_r12 = 0;
                                                                                                                                    new_r20 = 0;
                                                                                                                                    new_r21 = 0;
                                                                                                                                    if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) < -0.00001)
                                                                                                                                        continue;
                                                                                                                                    sj0 = IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))));
                                                                                                                                    cj0 = gconst0;
                                                                                                                                    if ((gconst0) < -1 - IKFAST_SINCOS_THRESH || (gconst0) > 1 + IKFAST_SINCOS_THRESH)
                                                                                                                                        continue;
                                                                                                                                    j0 = IKacos(gconst0);
                                                                                                                                    CheckValue<IkReal> x183 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                                    if (!x183.valid)
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    if ((x183.value) < -0.00001)
                                                                                                                                        continue;
                                                                                                                                    IkReal gconst0 = ((-1.0) * (IKsqrt(x183.value)));
                                                                                                                                    j2eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                                                                    {
                                                                                                                                        {
                                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                            bool j2valid[1] = {false};
                                                                                                                                            _nj2 = 1;
                                                                                                                                            if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) < -0.00001)
                                                                                                                                                continue;
                                                                                                                                            CheckValue<IkReal> x184 = IKPowWithIntegerCheck(gconst0, -1);
                                                                                                                                            if (!x184.valid)
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            if (IKabs(((((-1.0) * new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))))))) + ((gconst0 * new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11 * (x184.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))))))) + ((gconst0 * new_r10)))) + IKsqr((new_r11 * (x184.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                continue;
                                                                                                                                            j2array[0] = IKatan2(((((-1.0) * new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))))))) + ((gconst0 * new_r10))), (new_r11 * (x184.value)));
                                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                                            {
                                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                                            }
                                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                                            {
                                                                                                                                                j2array[0] += IK2PI;
                                                                                                                                            }
                                                                                                                                            j2valid[0] = true;
                                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                            {
                                                                                                                                                if (!j2valid[ij2])
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                _ij2[0] = ij2;
                                                                                                                                                _ij2[1] = -1;
                                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                {
                                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                    {
                                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                                        break;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                j2 = j2array[ij2];
                                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                                {
                                                                                                                                                    IkReal evalcond[8];
                                                                                                                                                    IkReal x185 = IKcos(j2);
                                                                                                                                                    IkReal x186 = IKsin(j2);
                                                                                                                                                    IkReal x187 = ((1.0) * gconst0);
                                                                                                                                                    if ((((1.0) + (((-1.0) * gconst0 * x187)))) < -0.00001)
                                                                                                                                                        continue;
                                                                                                                                                    IkReal x188 = IKsqrt(((1.0) + (((-1.0) * gconst0 * x187))));
                                                                                                                                                    IkReal x189 = ((1.0) * x188);
                                                                                                                                                    evalcond[0] = x186;
                                                                                                                                                    evalcond[1] = ((-1.0) * x185);
                                                                                                                                                    evalcond[2] = ((((-1.0) * x185 * x187)) + new_r11);
                                                                                                                                                    evalcond[3] = ((((-1.0) * x186 * x187)) + new_r10);
                                                                                                                                                    evalcond[4] = (((x185 * x188)) + new_r01);
                                                                                                                                                    evalcond[5] = (((x186 * x188)) + new_r00);
                                                                                                                                                    evalcond[6] = ((((-1.0) * x186)) + ((gconst0 * new_r10)) + (((-1.0) * new_r00 * x189)));
                                                                                                                                                    evalcond[7] = ((((-1.0) * x185)) + (((-1.0) * new_r01 * x189)) + ((gconst0 * new_r11)));
                                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                }

                                                                                                                                                {
                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        {
                                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                            bool j2valid[1] = {false};
                                                                                                                                            _nj2 = 1;
                                                                                                                                            CheckValue<IkReal> x190 = IKPowWithIntegerCheck(IKsign(gconst0), -1);
                                                                                                                                            if (!x190.valid)
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            CheckValue<IkReal> x191 = IKatan2WithCheck(IkReal(new_r10), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                                            if (!x191.valid)
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x190.value))) + (x191.value));
                                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                                            {
                                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                                            }
                                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                                            {
                                                                                                                                                j2array[0] += IK2PI;
                                                                                                                                            }
                                                                                                                                            j2valid[0] = true;
                                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                            {
                                                                                                                                                if (!j2valid[ij2])
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                _ij2[0] = ij2;
                                                                                                                                                _ij2[1] = -1;
                                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                {
                                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                    {
                                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                                        break;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                j2 = j2array[ij2];
                                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                                {
                                                                                                                                                    IkReal evalcond[8];
                                                                                                                                                    IkReal x192 = IKcos(j2);
                                                                                                                                                    IkReal x193 = IKsin(j2);
                                                                                                                                                    IkReal x194 = ((1.0) * gconst0);
                                                                                                                                                    if ((((1.0) + (((-1.0) * gconst0 * x194)))) < -0.00001)
                                                                                                                                                        continue;
                                                                                                                                                    IkReal x195 = IKsqrt(((1.0) + (((-1.0) * gconst0 * x194))));
                                                                                                                                                    IkReal x196 = ((1.0) * x195);
                                                                                                                                                    evalcond[0] = x193;
                                                                                                                                                    evalcond[1] = ((-1.0) * x192);
                                                                                                                                                    evalcond[2] = ((((-1.0) * x192 * x194)) + new_r11);
                                                                                                                                                    evalcond[3] = (new_r10 + (((-1.0) * x193 * x194)));
                                                                                                                                                    evalcond[4] = (((x192 * x195)) + new_r01);
                                                                                                                                                    evalcond[5] = (((x193 * x195)) + new_r00);
                                                                                                                                                    evalcond[6] = ((((-1.0) * x193)) + ((gconst0 * new_r10)) + (((-1.0) * new_r00 * x196)));
                                                                                                                                                    evalcond[7] = ((((-1.0) * x192)) + (((-1.0) * new_r01 * x196)) + ((gconst0 * new_r11)));
                                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                }

                                                                                                                                                {
                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } while (0);
                                                                                                                        if (bgotonextstatement)
                                                                                                                        {
                                                                                                                            bool bgotonextstatement = true;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                CheckValue<IkReal> x197 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                                if (!x197.valid)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if ((x197.value) < -0.00001)
                                                                                                                                    continue;
                                                                                                                                IkReal gconst0 = ((-1.0) * (IKsqrt(x197.value)));
                                                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.0) + (IKsign(sj0))))) + (IKabs((cj0 + (((-1.0) * gconst0)))))), 6.28318530717959)));
                                                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                                {
                                                                                                                                    bgotonextstatement = false;
                                                                                                                                    {
                                                                                                                                        IkReal j2eval[1];
                                                                                                                                        new_r02 = 0;
                                                                                                                                        new_r12 = 0;
                                                                                                                                        new_r20 = 0;
                                                                                                                                        new_r21 = 0;
                                                                                                                                        if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) < -0.00001)
                                                                                                                                            continue;
                                                                                                                                        sj0 = ((-1.0) * (IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))))));
                                                                                                                                        cj0 = gconst0;
                                                                                                                                        if ((gconst0) < -1 - IKFAST_SINCOS_THRESH || (gconst0) > 1 + IKFAST_SINCOS_THRESH)
                                                                                                                                            continue;
                                                                                                                                        j0 = ((-1.0) * (IKacos(gconst0)));
                                                                                                                                        CheckValue<IkReal> x198 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                                        if (!x198.valid)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if ((x198.value) < -0.00001)
                                                                                                                                            continue;
                                                                                                                                        IkReal gconst0 = ((-1.0) * (IKsqrt(x198.value)));
                                                                                                                                        j2eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                                                                                        if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                                                                        {
                                                                                                                                            {
                                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                                _nj2 = 1;
                                                                                                                                                if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) < -0.00001)
                                                                                                                                                    continue;
                                                                                                                                                CheckValue<IkReal> x199 = IKPowWithIntegerCheck(gconst0, -1);
                                                                                                                                                if (!x199.valid)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if (IKabs((((new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))))))) + ((gconst0 * new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11 * (x199.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))))))) + ((gconst0 * new_r10)))) + IKsqr((new_r11 * (x199.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                    continue;
                                                                                                                                                j2array[0] = IKatan2((((new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))))))) + ((gconst0 * new_r10))), (new_r11 * (x199.value)));
                                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                                }
                                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                                }
                                                                                                                                                j2valid[0] = true;
                                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                {
                                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                                    _ij2[1] = -1;
                                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                    {
                                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                        {
                                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                                            break;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                                    {
                                                                                                                                                        IkReal evalcond[8];
                                                                                                                                                        IkReal x200 = IKcos(j2);
                                                                                                                                                        IkReal x201 = IKsin(j2);
                                                                                                                                                        IkReal x202 = ((1.0) * x201);
                                                                                                                                                        IkReal x203 = ((1.0) * x200);
                                                                                                                                                        if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) < -0.00001)
                                                                                                                                                            continue;
                                                                                                                                                        IkReal x204 = IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))));
                                                                                                                                                        evalcond[0] = x201;
                                                                                                                                                        evalcond[1] = ((-1.0) * x200);
                                                                                                                                                        evalcond[2] = ((((-1.0) * gconst0 * x203)) + new_r11);
                                                                                                                                                        evalcond[3] = ((((-1.0) * gconst0 * x202)) + new_r10);
                                                                                                                                                        evalcond[4] = ((((-1.0) * x203 * x204)) + new_r01);
                                                                                                                                                        evalcond[5] = ((((-1.0) * x202 * x204)) + new_r00);
                                                                                                                                                        evalcond[6] = (((new_r00 * x204)) + (((-1.0) * x202)) + ((gconst0 * new_r10)));
                                                                                                                                                        evalcond[7] = (((new_r01 * x204)) + (((-1.0) * x203)) + ((gconst0 * new_r11)));
                                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                    }

                                                                                                                                                    {
                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            {
                                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                                _nj2 = 1;
                                                                                                                                                CheckValue<IkReal> x205 = IKPowWithIntegerCheck(IKsign(gconst0), -1);
                                                                                                                                                if (!x205.valid)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                CheckValue<IkReal> x206 = IKatan2WithCheck(IkReal(new_r10), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                                                if (!x206.valid)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x205.value))) + (x206.value));
                                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                                }
                                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                                }
                                                                                                                                                j2valid[0] = true;
                                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                {
                                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                                    _ij2[1] = -1;
                                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                    {
                                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                        {
                                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                                            break;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                                    {
                                                                                                                                                        IkReal evalcond[8];
                                                                                                                                                        IkReal x207 = IKcos(j2);
                                                                                                                                                        IkReal x208 = IKsin(j2);
                                                                                                                                                        IkReal x209 = ((1.0) * x208);
                                                                                                                                                        IkReal x210 = ((1.0) * x207);
                                                                                                                                                        if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) < -0.00001)
                                                                                                                                                            continue;
                                                                                                                                                        IkReal x211 = IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))));
                                                                                                                                                        evalcond[0] = x208;
                                                                                                                                                        evalcond[1] = ((-1.0) * x207);
                                                                                                                                                        evalcond[2] = ((((-1.0) * gconst0 * x210)) + new_r11);
                                                                                                                                                        evalcond[3] = ((((-1.0) * gconst0 * x209)) + new_r10);
                                                                                                                                                        evalcond[4] = ((((-1.0) * x210 * x211)) + new_r01);
                                                                                                                                                        evalcond[5] = (new_r00 + (((-1.0) * x209 * x211)));
                                                                                                                                                        evalcond[6] = ((((-1.0) * x209)) + ((new_r00 * x211)) + ((gconst0 * new_r10)));
                                                                                                                                                        evalcond[7] = (((new_r01 * x211)) + ((gconst0 * new_r11)) + (((-1.0) * x210)));
                                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                    }

                                                                                                                                                    {
                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } while (0);
                                                                                                                            if (bgotonextstatement)
                                                                                                                            {
                                                                                                                                bool bgotonextstatement = true;
                                                                                                                                do
                                                                                                                                {
                                                                                                                                    CheckValue<IkReal> x212 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                                    if (!x212.valid)
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    if ((x212.value) < -0.00001)
                                                                                                                                        continue;
                                                                                                                                    IkReal gconst1 = IKsqrt(x212.value);
                                                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs((cj0 + (((-1.0) * gconst1))))) + (IKabs(((-1.0) + (IKsign(sj0)))))), 6.28318530717959)));
                                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                                    {
                                                                                                                                        bgotonextstatement = false;
                                                                                                                                        {
                                                                                                                                            IkReal j2eval[1];
                                                                                                                                            new_r02 = 0;
                                                                                                                                            new_r12 = 0;
                                                                                                                                            new_r20 = 0;
                                                                                                                                            new_r21 = 0;
                                                                                                                                            if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) < -0.00001)
                                                                                                                                                continue;
                                                                                                                                            sj0 = IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))));
                                                                                                                                            cj0 = gconst1;
                                                                                                                                            if ((gconst1) < -1 - IKFAST_SINCOS_THRESH || (gconst1) > 1 + IKFAST_SINCOS_THRESH)
                                                                                                                                                continue;
                                                                                                                                            j0 = IKacos(gconst1);
                                                                                                                                            CheckValue<IkReal> x213 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                                            if (!x213.valid)
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            if ((x213.value) < -0.00001)
                                                                                                                                                continue;
                                                                                                                                            IkReal gconst1 = IKsqrt(x213.value);
                                                                                                                                            j2eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                                                                                            if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                                                                            {
                                                                                                                                                {
                                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                                    _nj2 = 1;
                                                                                                                                                    if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) < -0.00001)
                                                                                                                                                        continue;
                                                                                                                                                    CheckValue<IkReal> x214 = IKPowWithIntegerCheck(gconst1, -1);
                                                                                                                                                    if (!x214.valid)
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    if (IKabs((((gconst1 * new_r10)) + (((-1.0) * new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11 * (x214.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst1 * new_r10)) + (((-1.0) * new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))))))))) + IKsqr((new_r11 * (x214.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                        continue;
                                                                                                                                                    j2array[0] = IKatan2((((gconst1 * new_r10)) + (((-1.0) * new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1))))))))), (new_r11 * (x214.value)));
                                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                                    }
                                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                                    }
                                                                                                                                                    j2valid[0] = true;
                                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                    {
                                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                                        _ij2[1] = -1;
                                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                        {
                                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                            {
                                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                                break;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                                        {
                                                                                                                                                            IkReal evalcond[8];
                                                                                                                                                            IkReal x215 = IKcos(j2);
                                                                                                                                                            IkReal x216 = IKsin(j2);
                                                                                                                                                            IkReal x217 = ((1.0) * gconst1);
                                                                                                                                                            if ((((1.0) + (((-1.0) * gconst1 * x217)))) < -0.00001)
                                                                                                                                                                continue;
                                                                                                                                                            IkReal x218 = IKsqrt(((1.0) + (((-1.0) * gconst1 * x217))));
                                                                                                                                                            IkReal x219 = ((1.0) * x218);
                                                                                                                                                            evalcond[0] = x216;
                                                                                                                                                            evalcond[1] = ((-1.0) * x215);
                                                                                                                                                            evalcond[2] = (new_r11 + (((-1.0) * x215 * x217)));
                                                                                                                                                            evalcond[3] = (new_r10 + (((-1.0) * x216 * x217)));
                                                                                                                                                            evalcond[4] = (((x215 * x218)) + new_r01);
                                                                                                                                                            evalcond[5] = (((x216 * x218)) + new_r00);
                                                                                                                                                            evalcond[6] = (((gconst1 * new_r10)) + (((-1.0) * x216)) + (((-1.0) * new_r00 * x219)));
                                                                                                                                                            evalcond[7] = (((gconst1 * new_r11)) + (((-1.0) * x215)) + (((-1.0) * new_r01 * x219)));
                                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                        }

                                                                                                                                                        {
                                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                {
                                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                                    _nj2 = 1;
                                                                                                                                                    CheckValue<IkReal> x220 = IKPowWithIntegerCheck(IKsign(gconst1), -1);
                                                                                                                                                    if (!x220.valid)
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    CheckValue<IkReal> x221 = IKatan2WithCheck(IkReal(new_r10), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                                                    if (!x221.valid)
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x220.value))) + (x221.value));
                                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                                    }
                                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                                    }
                                                                                                                                                    j2valid[0] = true;
                                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                    {
                                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                                        _ij2[1] = -1;
                                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                        {
                                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                            {
                                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                                break;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                                        {
                                                                                                                                                            IkReal evalcond[8];
                                                                                                                                                            IkReal x222 = IKcos(j2);
                                                                                                                                                            IkReal x223 = IKsin(j2);
                                                                                                                                                            IkReal x224 = ((1.0) * gconst1);
                                                                                                                                                            if ((((1.0) + (((-1.0) * gconst1 * x224)))) < -0.00001)
                                                                                                                                                                continue;
                                                                                                                                                            IkReal x225 = IKsqrt(((1.0) + (((-1.0) * gconst1 * x224))));
                                                                                                                                                            IkReal x226 = ((1.0) * x225);
                                                                                                                                                            evalcond[0] = x223;
                                                                                                                                                            evalcond[1] = ((-1.0) * x222);
                                                                                                                                                            evalcond[2] = ((((-1.0) * x222 * x224)) + new_r11);
                                                                                                                                                            evalcond[3] = ((((-1.0) * x223 * x224)) + new_r10);
                                                                                                                                                            evalcond[4] = (((x222 * x225)) + new_r01);
                                                                                                                                                            evalcond[5] = (((x223 * x225)) + new_r00);
                                                                                                                                                            evalcond[6] = (((gconst1 * new_r10)) + (((-1.0) * new_r00 * x226)) + (((-1.0) * x223)));
                                                                                                                                                            evalcond[7] = ((((-1.0) * new_r01 * x226)) + ((gconst1 * new_r11)) + (((-1.0) * x222)));
                                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                        }

                                                                                                                                                        {
                                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                } while (0);
                                                                                                                                if (bgotonextstatement)
                                                                                                                                {
                                                                                                                                    bool bgotonextstatement = true;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        CheckValue<IkReal> x227 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                                        if (!x227.valid)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if ((x227.value) < -0.00001)
                                                                                                                                            continue;
                                                                                                                                        IkReal gconst1 = IKsqrt(x227.value);
                                                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.0) + (IKsign(sj0))))) + (IKabs((cj0 + (((-1.0) * gconst1)))))), 6.28318530717959)));
                                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                                        {
                                                                                                                                            bgotonextstatement = false;
                                                                                                                                            {
                                                                                                                                                IkReal j2eval[1];
                                                                                                                                                new_r02 = 0;
                                                                                                                                                new_r12 = 0;
                                                                                                                                                new_r20 = 0;
                                                                                                                                                new_r21 = 0;
                                                                                                                                                if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) < -0.00001)
                                                                                                                                                    continue;
                                                                                                                                                sj0 = ((-1.0) * (IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))))));
                                                                                                                                                cj0 = gconst1;
                                                                                                                                                if ((gconst1) < -1 - IKFAST_SINCOS_THRESH || (gconst1) > 1 + IKFAST_SINCOS_THRESH)
                                                                                                                                                    continue;
                                                                                                                                                j0 = ((-1.0) * (IKacos(gconst1)));
                                                                                                                                                CheckValue<IkReal> x228 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                                                if (!x228.valid)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if ((x228.value) < -0.00001)
                                                                                                                                                    continue;
                                                                                                                                                IkReal gconst1 = IKsqrt(x228.value);
                                                                                                                                                j2eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                                                                                                if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                                                                                {
                                                                                                                                                    {
                                                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                        bool j2valid[1] = {false};
                                                                                                                                                        _nj2 = 1;
                                                                                                                                                        if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) < -0.00001)
                                                                                                                                                            continue;
                                                                                                                                                        CheckValue<IkReal> x229 = IKPowWithIntegerCheck(gconst1, -1);
                                                                                                                                                        if (!x229.valid)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if (IKabs((((gconst1 * new_r10)) + ((new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11 * (x229.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst1 * new_r10)) + ((new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))))))))) + IKsqr((new_r11 * (x229.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                            continue;
                                                                                                                                                        j2array[0] = IKatan2((((gconst1 * new_r10)) + ((new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1))))))))), (new_r11 * (x229.value)));
                                                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                                                        {
                                                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                                                        }
                                                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                                                        {
                                                                                                                                                            j2array[0] += IK2PI;
                                                                                                                                                        }
                                                                                                                                                        j2valid[0] = true;
                                                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                        {
                                                                                                                                                            if (!j2valid[ij2])
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            _ij2[0] = ij2;
                                                                                                                                                            _ij2[1] = -1;
                                                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                            {
                                                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                {
                                                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                                                    break;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            j2 = j2array[ij2];
                                                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                                                            {
                                                                                                                                                                IkReal evalcond[8];
                                                                                                                                                                IkReal x230 = IKcos(j2);
                                                                                                                                                                IkReal x231 = IKsin(j2);
                                                                                                                                                                IkReal x232 = ((1.0) * x230);
                                                                                                                                                                IkReal x233 = ((1.0) * x231);
                                                                                                                                                                if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) < -0.00001)
                                                                                                                                                                    continue;
                                                                                                                                                                IkReal x234 = IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))));
                                                                                                                                                                evalcond[0] = x231;
                                                                                                                                                                evalcond[1] = ((-1.0) * x230);
                                                                                                                                                                evalcond[2] = ((((-1.0) * gconst1 * x232)) + new_r11);
                                                                                                                                                                evalcond[3] = ((((-1.0) * gconst1 * x233)) + new_r10);
                                                                                                                                                                evalcond[4] = (new_r01 + (((-1.0) * x232 * x234)));
                                                                                                                                                                evalcond[5] = ((((-1.0) * x233 * x234)) + new_r00);
                                                                                                                                                                evalcond[6] = (((gconst1 * new_r10)) + ((new_r00 * x234)) + (((-1.0) * x233)));
                                                                                                                                                                evalcond[7] = (((gconst1 * new_r11)) + ((new_r01 * x234)) + (((-1.0) * x232)));
                                                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                            }

                                                                                                                                                            {
                                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    {
                                                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                        bool j2valid[1] = {false};
                                                                                                                                                        _nj2 = 1;
                                                                                                                                                        CheckValue<IkReal> x235 = IKPowWithIntegerCheck(IKsign(gconst1), -1);
                                                                                                                                                        if (!x235.valid)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        CheckValue<IkReal> x236 = IKatan2WithCheck(IkReal(new_r10), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                                                        if (!x236.valid)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x235.value))) + (x236.value));
                                                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                                                        {
                                                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                                                        }
                                                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                                                        {
                                                                                                                                                            j2array[0] += IK2PI;
                                                                                                                                                        }
                                                                                                                                                        j2valid[0] = true;
                                                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                        {
                                                                                                                                                            if (!j2valid[ij2])
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            _ij2[0] = ij2;
                                                                                                                                                            _ij2[1] = -1;
                                                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                            {
                                                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                {
                                                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                                                    break;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            j2 = j2array[ij2];
                                                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                                                            {
                                                                                                                                                                IkReal evalcond[8];
                                                                                                                                                                IkReal x237 = IKcos(j2);
                                                                                                                                                                IkReal x238 = IKsin(j2);
                                                                                                                                                                IkReal x239 = ((1.0) * x237);
                                                                                                                                                                IkReal x240 = ((1.0) * x238);
                                                                                                                                                                if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) < -0.00001)
                                                                                                                                                                    continue;
                                                                                                                                                                IkReal x241 = IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))));
                                                                                                                                                                evalcond[0] = x238;
                                                                                                                                                                evalcond[1] = ((-1.0) * x237);
                                                                                                                                                                evalcond[2] = ((((-1.0) * gconst1 * x239)) + new_r11);
                                                                                                                                                                evalcond[3] = ((((-1.0) * gconst1 * x240)) + new_r10);
                                                                                                                                                                evalcond[4] = (new_r01 + (((-1.0) * x239 * x241)));
                                                                                                                                                                evalcond[5] = ((((-1.0) * x240 * x241)) + new_r00);
                                                                                                                                                                evalcond[6] = (((gconst1 * new_r10)) + ((new_r00 * x241)) + (((-1.0) * x240)));
                                                                                                                                                                evalcond[7] = (((gconst1 * new_r11)) + (((-1.0) * x239)) + ((new_r01 * x241)));
                                                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                            }

                                                                                                                                                            {
                                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    } while (0);
                                                                                                                                    if (bgotonextstatement)
                                                                                                                                    {
                                                                                                                                        bool bgotonextstatement = true;
                                                                                                                                        do
                                                                                                                                        {
                                                                                                                                            if (1)
                                                                                                                                            {
                                                                                                                                                bgotonextstatement = false;
                                                                                                                                                continue; // branch miss [j2]
                                                                                                                                            }
                                                                                                                                        } while (0);
                                                                                                                                        if (bgotonextstatement)
                                                                                                                                        {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                        bool j2valid[1] = {false};
                                                                                                        _nj2 = 1;
                                                                                                        IkReal x242 = new_r22 * new_r22;
                                                                                                        CheckValue<IkReal> x243 = IKPowWithIntegerCheck((((cj0 * x242)) + (((-1.0) * cj0))), -1);
                                                                                                        if (!x243.valid)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        CheckValue<IkReal> x244 = IKPowWithIntegerCheck(((((-1.0) * sj0)) + ((sj0 * x242))), -1);
                                                                                                        if (!x244.valid)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if (IKabs(((x243.value) * (((((-1.0) * new_r01 * new_r22)) + (((-1.0) * new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x244.value) * ((((new_r10 * new_r22)) + new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x243.value) * (((((-1.0) * new_r01 * new_r22)) + (((-1.0) * new_r10)))))) + IKsqr(((x244.value) * ((((new_r10 * new_r22)) + new_r01)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                            continue;
                                                                                                        j2array[0] = IKatan2(((x243.value) * (((((-1.0) * new_r01 * new_r22)) + (((-1.0) * new_r10))))), ((x244.value) * ((((new_r10 * new_r22)) + new_r01))));
                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                        if (j2array[0] > IKPI)
                                                                                                        {
                                                                                                            j2array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                        {
                                                                                                            j2array[0] += IK2PI;
                                                                                                        }
                                                                                                        j2valid[0] = true;
                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                        {
                                                                                                            if (!j2valid[ij2])
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij2[0] = ij2;
                                                                                                            _ij2[1] = -1;
                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                            {
                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                {
                                                                                                                    j2valid[iij2] = false;
                                                                                                                    _ij2[1] = iij2;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j2 = j2array[ij2];
                                                                                                            cj2 = cj2array[ij2];
                                                                                                            sj2 = sj2array[ij2];
                                                                                                            {
                                                                                                                IkReal evalcond[10];
                                                                                                                IkReal x245 = IKsin(j2);
                                                                                                                IkReal x246 = IKcos(j2);
                                                                                                                IkReal x247 = (cj0 * new_r22);
                                                                                                                IkReal x248 = (new_r22 * sj0);
                                                                                                                IkReal x249 = ((1.0) * sj0);
                                                                                                                IkReal x250 = ((1.0) * x246);
                                                                                                                IkReal x251 = ((1.0) * x245);
                                                                                                                evalcond[0] = (((new_r11 * sj0)) + ((new_r22 * x245)) + ((cj0 * new_r01)));
                                                                                                                evalcond[1] = (x245 + ((new_r01 * x247)) + ((new_r11 * x248)));
                                                                                                                evalcond[2] = ((((-1.0) * new_r00 * x249)) + ((cj0 * new_r10)) + (((-1.0) * x251)));
                                                                                                                evalcond[3] = ((((-1.0) * new_r01 * x249)) + ((cj0 * new_r11)) + (((-1.0) * x250)));
                                                                                                                evalcond[4] = (new_r01 + ((x245 * x247)) + ((sj0 * x246)));
                                                                                                                evalcond[5] = (((new_r10 * sj0)) + ((cj0 * new_r00)) + (((-1.0) * new_r22 * x250)));
                                                                                                                evalcond[6] = ((((-1.0) * x247 * x250)) + new_r00 + ((sj0 * x245)));
                                                                                                                evalcond[7] = ((((-1.0) * cj0 * x250)) + new_r11 + ((x245 * x248)));
                                                                                                                evalcond[8] = (((new_r00 * x247)) + ((new_r10 * x248)) + (((-1.0) * x250)));
                                                                                                                evalcond[9] = ((((-1.0) * cj0 * x251)) + (((-1.0) * x248 * x250)) + new_r10);
                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j0;
                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j1;
                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j2;
                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                vinfos[3].foffset = j3;
                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                vinfos[4].foffset = j4;
                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                vinfos[5].foffset = j5;
                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                vinfos[6].foffset = j6;
                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                std::vector<int> vfree(0);
                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            {
                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                bool j2valid[1] = {false};
                                                                                                _nj2 = 1;
                                                                                                IkReal x252 = ((1.0) * new_r01);
                                                                                                CheckValue<IkReal> x253 = IKPowWithIntegerCheck(new_r22, -1);
                                                                                                if (!x253.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                if (IKabs(((x253.value) * (((((-1.0) * cj0 * x252)) + (((-1.0) * new_r11 * sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * sj0 * x252)) + ((cj0 * new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x253.value) * (((((-1.0) * cj0 * x252)) + (((-1.0) * new_r11 * sj0)))))) + IKsqr(((((-1.0) * sj0 * x252)) + ((cj0 * new_r11)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                    continue;
                                                                                                j2array[0] = IKatan2(((x253.value) * (((((-1.0) * cj0 * x252)) + (((-1.0) * new_r11 * sj0))))), ((((-1.0) * sj0 * x252)) + ((cj0 * new_r11))));
                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                if (j2array[0] > IKPI)
                                                                                                {
                                                                                                    j2array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j2array[0] < -IKPI)
                                                                                                {
                                                                                                    j2array[0] += IK2PI;
                                                                                                }
                                                                                                j2valid[0] = true;
                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                {
                                                                                                    if (!j2valid[ij2])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij2[0] = ij2;
                                                                                                    _ij2[1] = -1;
                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                    {
                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j2valid[iij2] = false;
                                                                                                            _ij2[1] = iij2;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j2 = j2array[ij2];
                                                                                                    cj2 = cj2array[ij2];
                                                                                                    sj2 = sj2array[ij2];
                                                                                                    {
                                                                                                        IkReal evalcond[10];
                                                                                                        IkReal x254 = IKsin(j2);
                                                                                                        IkReal x255 = IKcos(j2);
                                                                                                        IkReal x256 = (cj0 * new_r22);
                                                                                                        IkReal x257 = (new_r22 * sj0);
                                                                                                        IkReal x258 = ((1.0) * sj0);
                                                                                                        IkReal x259 = ((1.0) * x255);
                                                                                                        IkReal x260 = ((1.0) * x254);
                                                                                                        evalcond[0] = (((new_r11 * sj0)) + ((new_r22 * x254)) + ((cj0 * new_r01)));
                                                                                                        evalcond[1] = (((new_r01 * x256)) + x254 + ((new_r11 * x257)));
                                                                                                        evalcond[2] = ((((-1.0) * x260)) + ((cj0 * new_r10)) + (((-1.0) * new_r00 * x258)));
                                                                                                        evalcond[3] = ((((-1.0) * new_r01 * x258)) + ((cj0 * new_r11)) + (((-1.0) * x259)));
                                                                                                        evalcond[4] = (((sj0 * x255)) + ((x254 * x256)) + new_r01);
                                                                                                        evalcond[5] = (((new_r10 * sj0)) + ((cj0 * new_r00)) + (((-1.0) * new_r22 * x259)));
                                                                                                        evalcond[6] = ((((-1.0) * x256 * x259)) + ((sj0 * x254)) + new_r00);
                                                                                                        evalcond[7] = ((((-1.0) * cj0 * x259)) + ((x254 * x257)) + new_r11);
                                                                                                        evalcond[8] = (((new_r00 * x256)) + ((new_r10 * x257)) + (((-1.0) * x259)));
                                                                                                        evalcond[9] = ((((-1.0) * x257 * x259)) + (((-1.0) * cj0 * x260)) + new_r10);
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j0;
                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j1;
                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j2;
                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                        vinfos[3].jointtype = 1;
                                                                                                        vinfos[3].foffset = j3;
                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                        vinfos[4].jointtype = 1;
                                                                                                        vinfos[4].foffset = j4;
                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                        vinfos[5].jointtype = 1;
                                                                                                        vinfos[5].foffset = j5;
                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                        vinfos[6].jointtype = 1;
                                                                                                        vinfos[6].foffset = j6;
                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                        std::vector<int> vfree(0);
                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                        bool j2valid[1] = {false};
                                                                                        _nj2 = 1;
                                                                                        IkReal x261 = cj0 * cj0;
                                                                                        IkReal x262 = (cj0 * new_r22);
                                                                                        CheckValue<IkReal> x263 = IKatan2WithCheck(IkReal((((new_r00 * sj0)) + ((new_r01 * x262)))), IkReal((((new_r01 * sj0)) + (((-1.0) * new_r00 * x262)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (!x263.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        CheckValue<IkReal> x264 = IKPowWithIntegerCheck(IKsign(((-1.0) + (((-1.0) * x261 * (new_r22 * new_r22))) + x261)), -1);
                                                                                        if (!x264.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        j2array[0] = ((-1.5707963267949) + (x263.value) + (((1.5707963267949) * (x264.value))));
                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                        if (j2array[0] > IKPI)
                                                                                        {
                                                                                            j2array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j2array[0] < -IKPI)
                                                                                        {
                                                                                            j2array[0] += IK2PI;
                                                                                        }
                                                                                        j2valid[0] = true;
                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                        {
                                                                                            if (!j2valid[ij2])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij2[0] = ij2;
                                                                                            _ij2[1] = -1;
                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                            {
                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j2valid[iij2] = false;
                                                                                                    _ij2[1] = iij2;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j2 = j2array[ij2];
                                                                                            cj2 = cj2array[ij2];
                                                                                            sj2 = sj2array[ij2];
                                                                                            {
                                                                                                IkReal evalcond[10];
                                                                                                IkReal x265 = IKsin(j2);
                                                                                                IkReal x266 = IKcos(j2);
                                                                                                IkReal x267 = (cj0 * new_r22);
                                                                                                IkReal x268 = (new_r22 * sj0);
                                                                                                IkReal x269 = ((1.0) * sj0);
                                                                                                IkReal x270 = ((1.0) * x266);
                                                                                                IkReal x271 = ((1.0) * x265);
                                                                                                evalcond[0] = (((new_r22 * x265)) + ((new_r11 * sj0)) + ((cj0 * new_r01)));
                                                                                                evalcond[1] = (x265 + ((new_r01 * x267)) + ((new_r11 * x268)));
                                                                                                evalcond[2] = ((((-1.0) * new_r00 * x269)) + (((-1.0) * x271)) + ((cj0 * new_r10)));
                                                                                                evalcond[3] = ((((-1.0) * new_r01 * x269)) + (((-1.0) * x270)) + ((cj0 * new_r11)));
                                                                                                evalcond[4] = (new_r01 + ((x265 * x267)) + ((sj0 * x266)));
                                                                                                evalcond[5] = (((new_r10 * sj0)) + (((-1.0) * new_r22 * x270)) + ((cj0 * new_r00)));
                                                                                                evalcond[6] = (new_r00 + (((-1.0) * x267 * x270)) + ((sj0 * x265)));
                                                                                                evalcond[7] = ((((-1.0) * cj0 * x270)) + new_r11 + ((x265 * x268)));
                                                                                                evalcond[8] = (((new_r00 * x267)) + (((-1.0) * x270)) + ((new_r10 * x268)));
                                                                                                evalcond[9] = ((((-1.0) * cj0 * x271)) + (((-1.0) * x268 * x270)) + new_r10);
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                vinfos[0].jointtype = 1;
                                                                                                vinfos[0].foffset = j0;
                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                vinfos[1].jointtype = 1;
                                                                                                vinfos[1].foffset = j1;
                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                vinfos[2].jointtype = 1;
                                                                                                vinfos[2].foffset = j2;
                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                vinfos[3].jointtype = 1;
                                                                                                vinfos[3].foffset = j3;
                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j4;
                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j5;
                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                vinfos[6].jointtype = 1;
                                                                                                vinfos[6].foffset = j6;
                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                std::vector<int> vfree(0);
                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } while (0);
                                                        if (bgotonextstatement)
                                                        {
                                                            bool bgotonextstatement = true;
                                                            do
                                                            {
                                                                if (1)
                                                                {
                                                                    bgotonextstatement = false;
                                                                    continue; // branch miss [j0, j2]
                                                                }
                                                            } while (0);
                                                            if (bgotonextstatement)
                                                            {
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            {
                                                IkReal j0array[1], cj0array[1], sj0array[1];
                                                bool j0valid[1] = {false};
                                                _nj0 = 1;
                                                CheckValue<IkReal> x273 = IKPowWithIntegerCheck(sj1, -1);
                                                if (!x273.valid)
                                                {
                                                    continue;
                                                }
                                                IkReal x272 = x273.value;
                                                CheckValue<IkReal> x274 = IKPowWithIntegerCheck(new_r12, -1);
                                                if (!x274.valid)
                                                {
                                                    continue;
                                                }
                                                if (IKabs((x272 * (x274.value) * (((1.0) + (((-1.0) * (new_r02 * new_r02))) + (((-1.0) * (cj1 * cj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02 * x272)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x272 * (x274.value) * (((1.0) + (((-1.0) * (new_r02 * new_r02))) + (((-1.0) * (cj1 * cj1))))))) + IKsqr((new_r02 * x272)) - 1) <= IKFAST_SINCOS_THRESH)
                                                    continue;
                                                j0array[0] = IKatan2((x272 * (x274.value) * (((1.0) + (((-1.0) * (new_r02 * new_r02))) + (((-1.0) * (cj1 * cj1)))))), (new_r02 * x272));
                                                sj0array[0] = IKsin(j0array[0]);
                                                cj0array[0] = IKcos(j0array[0]);
                                                if (j0array[0] > IKPI)
                                                {
                                                    j0array[0] -= IK2PI;
                                                }
                                                else if (j0array[0] < -IKPI)
                                                {
                                                    j0array[0] += IK2PI;
                                                }
                                                j0valid[0] = true;
                                                for (int ij0 = 0; ij0 < 1; ++ij0)
                                                {
                                                    if (!j0valid[ij0])
                                                    {
                                                        continue;
                                                    }
                                                    _ij0[0] = ij0;
                                                    _ij0[1] = -1;
                                                    for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                                    {
                                                        if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                        {
                                                            j0valid[iij0] = false;
                                                            _ij0[1] = iij0;
                                                            break;
                                                        }
                                                    }
                                                    j0 = j0array[ij0];
                                                    cj0 = cj0array[ij0];
                                                    sj0 = sj0array[ij0];
                                                    {
                                                        IkReal evalcond[8];
                                                        IkReal x275 = IKcos(j0);
                                                        IkReal x276 = IKsin(j0);
                                                        IkReal x277 = ((1.0) * cj1);
                                                        IkReal x278 = ((1.0) * sj1);
                                                        IkReal x279 = (new_r12 * x276);
                                                        IkReal x280 = (new_r02 * x275);
                                                        evalcond[0] = ((((-1.0) * x275 * x278)) + new_r02);
                                                        evalcond[1] = (new_r12 + (((-1.0) * x276 * x278)));
                                                        evalcond[2] = ((((-1.0) * new_r02 * x276)) + ((new_r12 * x275)));
                                                        evalcond[3] = (x279 + x280 + (((-1.0) * x278)));
                                                        evalcond[4] = ((((-1.0) * new_r22 * x278)) + ((cj1 * x279)) + ((cj1 * x280)));
                                                        evalcond[5] = ((((-1.0) * new_r10 * x276 * x278)) + (((-1.0) * new_r20 * x277)) + (((-1.0) * new_r00 * x275 * x278)));
                                                        evalcond[6] = ((((-1.0) * new_r21 * x277)) + (((-1.0) * new_r01 * x275 * x278)) + (((-1.0) * new_r11 * x276 * x278)));
                                                        evalcond[7] = ((1.0) + (((-1.0) * new_r22 * x277)) + (((-1.0) * x278 * x279)) + (((-1.0) * x278 * x280)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                        {
                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkReal j2eval[3];
                                                        j2eval[0] = sj1;
                                                        j2eval[1] = IKsign(sj1);
                                                        j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                        if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                        {
                                                            {
                                                                IkReal j2eval[2];
                                                                j2eval[0] = sj0;
                                                                j2eval[1] = sj1;
                                                                if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                {
                                                                    {
                                                                        IkReal j2eval[3];
                                                                        j2eval[0] = cj0;
                                                                        j2eval[1] = cj1;
                                                                        j2eval[2] = sj1;
                                                                        if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                        {
                                                                            {
                                                                                IkReal evalcond[5];
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                    evalcond[1] = new_r02;
                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                    {
                                                                                        bgotonextstatement = false;
                                                                                        {
                                                                                            IkReal j2eval[3];
                                                                                            sj0 = 1.0;
                                                                                            cj0 = 0;
                                                                                            j0 = 1.5707963267949;
                                                                                            j2eval[0] = sj1;
                                                                                            j2eval[1] = IKsign(sj1);
                                                                                            j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                                            {
                                                                                                {
                                                                                                    IkReal j2eval[3];
                                                                                                    sj0 = 1.0;
                                                                                                    cj0 = 0;
                                                                                                    j0 = 1.5707963267949;
                                                                                                    j2eval[0] = cj1;
                                                                                                    j2eval[1] = IKsign(cj1);
                                                                                                    j2eval[2] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j2eval[1];
                                                                                                            sj0 = 1.0;
                                                                                                            cj0 = 0;
                                                                                                            j0 = 1.5707963267949;
                                                                                                            j2eval[0] = sj1;
                                                                                                            if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal evalcond[4];
                                                                                                                    bool bgotonextstatement = true;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                                                                                        evalcond[1] = new_r20;
                                                                                                                        evalcond[2] = new_r12;
                                                                                                                        evalcond[3] = new_r21;
                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                        {
                                                                                                                            bgotonextstatement = false;
                                                                                                                            {
                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                _nj2 = 1;
                                                                                                                                if (IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r11)) + IKsqr(new_r10) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                    continue;
                                                                                                                                j2array[0] = IKatan2(((-1.0) * new_r11), new_r10);
                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                {
                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                }
                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                {
                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                }
                                                                                                                                j2valid[0] = true;
                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                {
                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                    _ij2[1] = -1;
                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                    {
                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                        {
                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                    {
                                                                                                                                        IkReal evalcond[4];
                                                                                                                                        IkReal x281 = IKsin(j2);
                                                                                                                                        IkReal x282 = ((1.0) * (IKcos(j2)));
                                                                                                                                        evalcond[0] = (x281 + new_r11);
                                                                                                                                        evalcond[1] = ((((-1.0) * x282)) + new_r10);
                                                                                                                                        evalcond[2] = ((((-1.0) * x281)) + (((-1.0) * new_r00)));
                                                                                                                                        evalcond[3] = ((((-1.0) * x282)) + (((-1.0) * new_r01)));
                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                    {
                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } while (0);
                                                                                                                    if (bgotonextstatement)
                                                                                                                    {
                                                                                                                        bool bgotonextstatement = true;
                                                                                                                        do
                                                                                                                        {
                                                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                                                                                            evalcond[1] = new_r20;
                                                                                                                            evalcond[2] = new_r12;
                                                                                                                            evalcond[3] = new_r21;
                                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                            {
                                                                                                                                bgotonextstatement = false;
                                                                                                                                {
                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                    _nj2 = 1;
                                                                                                                                    if (IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11) + IKsqr(((-1.0) * new_r10)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                        continue;
                                                                                                                                    j2array[0] = IKatan2(new_r11, ((-1.0) * new_r10));
                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                    {
                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                    }
                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                    {
                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                    }
                                                                                                                                    j2valid[0] = true;
                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                    {
                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                        _ij2[1] = -1;
                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                        {
                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                            {
                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                        {
                                                                                                                                            IkReal evalcond[4];
                                                                                                                                            IkReal x283 = IKcos(j2);
                                                                                                                                            IkReal x284 = ((1.0) * (IKsin(j2)));
                                                                                                                                            evalcond[0] = (x283 + new_r10);
                                                                                                                                            evalcond[1] = ((((-1.0) * x284)) + new_r11);
                                                                                                                                            evalcond[2] = ((((-1.0) * x284)) + (((-1.0) * new_r00)));
                                                                                                                                            evalcond[3] = ((((-1.0) * x283)) + (((-1.0) * new_r01)));
                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        {
                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } while (0);
                                                                                                                        if (bgotonextstatement)
                                                                                                                        {
                                                                                                                            bool bgotonextstatement = true;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                                evalcond[1] = new_r22;
                                                                                                                                evalcond[2] = new_r11;
                                                                                                                                evalcond[3] = new_r10;
                                                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                {
                                                                                                                                    bgotonextstatement = false;
                                                                                                                                    {
                                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                        bool j2valid[1] = {false};
                                                                                                                                        _nj2 = 1;
                                                                                                                                        if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                            continue;
                                                                                                                                        j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                                        {
                                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                                        }
                                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                                        {
                                                                                                                                            j2array[0] += IK2PI;
                                                                                                                                        }
                                                                                                                                        j2valid[0] = true;
                                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                        {
                                                                                                                                            if (!j2valid[ij2])
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            _ij2[0] = ij2;
                                                                                                                                            _ij2[1] = -1;
                                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                            {
                                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                {
                                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                                    break;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            j2 = j2array[ij2];
                                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                                            {
                                                                                                                                                IkReal evalcond[4];
                                                                                                                                                IkReal x285 = IKcos(j2);
                                                                                                                                                IkReal x286 = ((1.0) * (IKsin(j2)));
                                                                                                                                                evalcond[0] = (x285 + new_r20);
                                                                                                                                                evalcond[1] = ((((-1.0) * x286)) + new_r21);
                                                                                                                                                evalcond[2] = ((((-1.0) * x286)) + (((-1.0) * new_r00)));
                                                                                                                                                evalcond[3] = ((((-1.0) * x285)) + (((-1.0) * new_r01)));
                                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                            }

                                                                                                                                            {
                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } while (0);
                                                                                                                            if (bgotonextstatement)
                                                                                                                            {
                                                                                                                                bool bgotonextstatement = true;
                                                                                                                                do
                                                                                                                                {
                                                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                                    evalcond[1] = new_r22;
                                                                                                                                    evalcond[2] = new_r11;
                                                                                                                                    evalcond[3] = new_r10;
                                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                    {
                                                                                                                                        bgotonextstatement = false;
                                                                                                                                        {
                                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                            bool j2valid[1] = {false};
                                                                                                                                            _nj2 = 1;
                                                                                                                                            if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                continue;
                                                                                                                                            j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                                            {
                                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                                            }
                                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                                            {
                                                                                                                                                j2array[0] += IK2PI;
                                                                                                                                            }
                                                                                                                                            j2valid[0] = true;
                                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                            {
                                                                                                                                                if (!j2valid[ij2])
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                _ij2[0] = ij2;
                                                                                                                                                _ij2[1] = -1;
                                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                {
                                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                    {
                                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                                        break;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                j2 = j2array[ij2];
                                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                                {
                                                                                                                                                    IkReal evalcond[4];
                                                                                                                                                    IkReal x287 = IKsin(j2);
                                                                                                                                                    IkReal x288 = ((1.0) * (IKcos(j2)));
                                                                                                                                                    evalcond[0] = (x287 + new_r21);
                                                                                                                                                    evalcond[1] = ((((-1.0) * x288)) + new_r20);
                                                                                                                                                    evalcond[2] = ((((-1.0) * x287)) + (((-1.0) * new_r00)));
                                                                                                                                                    evalcond[3] = ((((-1.0) * x288)) + (((-1.0) * new_r01)));
                                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                }

                                                                                                                                                {
                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                } while (0);
                                                                                                                                if (bgotonextstatement)
                                                                                                                                {
                                                                                                                                    bool bgotonextstatement = true;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                                        {
                                                                                                                                            bgotonextstatement = false;
                                                                                                                                            {
                                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                                _nj2 = 1;
                                                                                                                                                if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r00)) + IKsqr(((-1.0) * new_r01)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                    continue;
                                                                                                                                                j2array[0] = IKatan2(((-1.0) * new_r00), ((-1.0) * new_r01));
                                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                                }
                                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                                }
                                                                                                                                                j2valid[0] = true;
                                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                {
                                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                                    _ij2[1] = -1;
                                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                    {
                                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                        {
                                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                                            break;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                                    {
                                                                                                                                                        IkReal evalcond[6];
                                                                                                                                                        IkReal x289 = IKsin(j2);
                                                                                                                                                        IkReal x290 = IKcos(j2);
                                                                                                                                                        IkReal x291 = ((-1.0) * x290);
                                                                                                                                                        evalcond[0] = x289;
                                                                                                                                                        evalcond[1] = (new_r22 * x289);
                                                                                                                                                        evalcond[2] = x291;
                                                                                                                                                        evalcond[3] = (new_r22 * x291);
                                                                                                                                                        evalcond[4] = ((((-1.0) * x289)) + (((-1.0) * new_r00)));
                                                                                                                                                        evalcond[5] = ((((-1.0) * x290)) + (((-1.0) * new_r01)));
                                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                    }

                                                                                                                                                    {
                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    } while (0);
                                                                                                                                    if (bgotonextstatement)
                                                                                                                                    {
                                                                                                                                        bool bgotonextstatement = true;
                                                                                                                                        do
                                                                                                                                        {
                                                                                                                                            if (1)
                                                                                                                                            {
                                                                                                                                                bgotonextstatement = false;
                                                                                                                                                continue; // branch miss [j2]
                                                                                                                                            }
                                                                                                                                        } while (0);
                                                                                                                                        if (bgotonextstatement)
                                                                                                                                        {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                    bool j2valid[1] = {false};
                                                                                                                    _nj2 = 1;
                                                                                                                    CheckValue<IkReal> x292 = IKPowWithIntegerCheck(sj1, -1);
                                                                                                                    if (!x292.valid)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * (x292.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r00)) + IKsqr(((-1.0) * new_r20 * (x292.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                        continue;
                                                                                                                    j2array[0] = IKatan2(((-1.0) * new_r00), ((-1.0) * new_r20 * (x292.value)));
                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j2valid[0] = true;
                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                    {
                                                                                                                        if (!j2valid[ij2])
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij2[0] = ij2;
                                                                                                                        _ij2[1] = -1;
                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                        {
                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                            {
                                                                                                                                j2valid[iij2] = false;
                                                                                                                                _ij2[1] = iij2;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j2 = j2array[ij2];
                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                        {
                                                                                                                            IkReal evalcond[8];
                                                                                                                            IkReal x293 = IKsin(j2);
                                                                                                                            IkReal x294 = IKcos(j2);
                                                                                                                            IkReal x295 = ((1.0) * sj1);
                                                                                                                            IkReal x296 = ((1.0) * x294);
                                                                                                                            evalcond[0] = (((sj1 * x294)) + new_r20);
                                                                                                                            evalcond[1] = (((cj1 * x293)) + new_r11);
                                                                                                                            evalcond[2] = ((((-1.0) * x293 * x295)) + new_r21);
                                                                                                                            evalcond[3] = ((((-1.0) * cj1 * x296)) + new_r10);
                                                                                                                            evalcond[4] = ((((-1.0) * x293)) + (((-1.0) * new_r00)));
                                                                                                                            evalcond[5] = ((((-1.0) * x296)) + (((-1.0) * new_r01)));
                                                                                                                            evalcond[6] = ((((-1.0) * new_r21 * x295)) + ((cj1 * new_r11)) + x293);
                                                                                                                            evalcond[7] = ((((-1.0) * new_r20 * x295)) + (((-1.0) * x296)) + ((cj1 * new_r10)));
                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                            std::vector<int> vfree(0);
                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                            bool j2valid[1] = {false};
                                                                                                            _nj2 = 1;
                                                                                                            CheckValue<IkReal> x297 = IKPowWithIntegerCheck(IKsign(cj1), -1);
                                                                                                            if (!x297.valid)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            CheckValue<IkReal> x298 = IKatan2WithCheck(IkReal(((-1.0) * new_r11)), IkReal(new_r10), IKFAST_ATAN2_MAGTHRESH);
                                                                                                            if (!x298.valid)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x297.value))) + (x298.value));
                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                            if (j2array[0] > IKPI)
                                                                                                            {
                                                                                                                j2array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                            {
                                                                                                                j2array[0] += IK2PI;
                                                                                                            }
                                                                                                            j2valid[0] = true;
                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                            {
                                                                                                                if (!j2valid[ij2])
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij2[0] = ij2;
                                                                                                                _ij2[1] = -1;
                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                {
                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                    {
                                                                                                                        j2valid[iij2] = false;
                                                                                                                        _ij2[1] = iij2;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j2 = j2array[ij2];
                                                                                                                cj2 = cj2array[ij2];
                                                                                                                sj2 = sj2array[ij2];
                                                                                                                {
                                                                                                                    IkReal evalcond[8];
                                                                                                                    IkReal x299 = IKsin(j2);
                                                                                                                    IkReal x300 = IKcos(j2);
                                                                                                                    IkReal x301 = ((1.0) * sj1);
                                                                                                                    IkReal x302 = ((1.0) * x300);
                                                                                                                    evalcond[0] = (new_r20 + ((sj1 * x300)));
                                                                                                                    evalcond[1] = (((cj1 * x299)) + new_r11);
                                                                                                                    evalcond[2] = ((((-1.0) * x299 * x301)) + new_r21);
                                                                                                                    evalcond[3] = ((((-1.0) * cj1 * x302)) + new_r10);
                                                                                                                    evalcond[4] = ((((-1.0) * x299)) + (((-1.0) * new_r00)));
                                                                                                                    evalcond[5] = ((((-1.0) * new_r01)) + (((-1.0) * x302)));
                                                                                                                    evalcond[6] = ((((-1.0) * new_r21 * x301)) + ((cj1 * new_r11)) + x299);
                                                                                                                    evalcond[7] = (((cj1 * new_r10)) + (((-1.0) * new_r20 * x301)) + (((-1.0) * x302)));
                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                {
                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                    std::vector<int> vfree(0);
                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                    bool j2valid[1] = {false};
                                                                                                    _nj2 = 1;
                                                                                                    CheckValue<IkReal> x303 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                                                                    if (!x303.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    CheckValue<IkReal> x304 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (!x304.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x303.value))) + (x304.value));
                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                    if (j2array[0] > IKPI)
                                                                                                    {
                                                                                                        j2array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                    {
                                                                                                        j2array[0] += IK2PI;
                                                                                                    }
                                                                                                    j2valid[0] = true;
                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                    {
                                                                                                        if (!j2valid[ij2])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij2[0] = ij2;
                                                                                                        _ij2[1] = -1;
                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                        {
                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j2valid[iij2] = false;
                                                                                                                _ij2[1] = iij2;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j2 = j2array[ij2];
                                                                                                        cj2 = cj2array[ij2];
                                                                                                        sj2 = sj2array[ij2];
                                                                                                        {
                                                                                                            IkReal evalcond[8];
                                                                                                            IkReal x305 = IKsin(j2);
                                                                                                            IkReal x306 = IKcos(j2);
                                                                                                            IkReal x307 = ((1.0) * sj1);
                                                                                                            IkReal x308 = ((1.0) * x306);
                                                                                                            evalcond[0] = (new_r20 + ((sj1 * x306)));
                                                                                                            evalcond[1] = (((cj1 * x305)) + new_r11);
                                                                                                            evalcond[2] = ((((-1.0) * x305 * x307)) + new_r21);
                                                                                                            evalcond[3] = ((((-1.0) * cj1 * x308)) + new_r10);
                                                                                                            evalcond[4] = ((((-1.0) * x305)) + (((-1.0) * new_r00)));
                                                                                                            evalcond[5] = ((((-1.0) * new_r01)) + (((-1.0) * x308)));
                                                                                                            evalcond[6] = ((((-1.0) * new_r21 * x307)) + ((cj1 * new_r11)) + x305);
                                                                                                            evalcond[7] = (((cj1 * new_r10)) + (((-1.0) * new_r20 * x307)) + (((-1.0) * x308)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j3;
                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j4;
                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j5;
                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                            vinfos[6].jointtype = 1;
                                                                                                            vinfos[6].foffset = j6;
                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                            std::vector<int> vfree(0);
                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                        evalcond[1] = new_r02;
                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                        {
                                                                                            bgotonextstatement = false;
                                                                                            {
                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                bool j2valid[1] = {false};
                                                                                                _nj2 = 1;
                                                                                                if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00) + IKsqr(new_r01) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                    continue;
                                                                                                j2array[0] = IKatan2(new_r00, new_r01);
                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                if (j2array[0] > IKPI)
                                                                                                {
                                                                                                    j2array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j2array[0] < -IKPI)
                                                                                                {
                                                                                                    j2array[0] += IK2PI;
                                                                                                }
                                                                                                j2valid[0] = true;
                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                {
                                                                                                    if (!j2valid[ij2])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij2[0] = ij2;
                                                                                                    _ij2[1] = -1;
                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                    {
                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j2valid[iij2] = false;
                                                                                                            _ij2[1] = iij2;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j2 = j2array[ij2];
                                                                                                    cj2 = cj2array[ij2];
                                                                                                    sj2 = sj2array[ij2];
                                                                                                    {
                                                                                                        IkReal evalcond[8];
                                                                                                        IkReal x309 = IKcos(j2);
                                                                                                        IkReal x310 = IKsin(j2);
                                                                                                        IkReal x311 = ((1.0) * sj1);
                                                                                                        IkReal x312 = ((1.0) * new_r11);
                                                                                                        IkReal x313 = ((1.0) * new_r10);
                                                                                                        IkReal x314 = ((1.0) * x309);
                                                                                                        evalcond[0] = (new_r20 + ((sj1 * x309)));
                                                                                                        evalcond[1] = ((((-1.0) * x310)) + new_r00);
                                                                                                        evalcond[2] = ((((-1.0) * x314)) + new_r01);
                                                                                                        evalcond[3] = ((((-1.0) * x310 * x311)) + new_r21);
                                                                                                        evalcond[4] = (((cj1 * x310)) + (((-1.0) * x312)));
                                                                                                        evalcond[5] = ((((-1.0) * x313)) + (((-1.0) * cj1 * x314)));
                                                                                                        evalcond[6] = ((((-1.0) * new_r21 * x311)) + x310 + (((-1.0) * cj1 * x312)));
                                                                                                        evalcond[7] = ((((-1.0) * new_r20 * x311)) + (((-1.0) * x314)) + (((-1.0) * cj1 * x313)));
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j0;
                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j1;
                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j2;
                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                        vinfos[3].jointtype = 1;
                                                                                                        vinfos[3].foffset = j3;
                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                        vinfos[4].jointtype = 1;
                                                                                                        vinfos[4].foffset = j4;
                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                        vinfos[5].jointtype = 1;
                                                                                                        vinfos[5].foffset = j5;
                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                        vinfos[6].jointtype = 1;
                                                                                                        vinfos[6].foffset = j6;
                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                        std::vector<int> vfree(0);
                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                        bool bgotonextstatement = true;
                                                                                        do
                                                                                        {
                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                            evalcond[1] = new_r22;
                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                            {
                                                                                                bgotonextstatement = false;
                                                                                                {
                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                    bool j2valid[1] = {false};
                                                                                                    _nj2 = 1;
                                                                                                    if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                        continue;
                                                                                                    j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                    if (j2array[0] > IKPI)
                                                                                                    {
                                                                                                        j2array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                    {
                                                                                                        j2array[0] += IK2PI;
                                                                                                    }
                                                                                                    j2valid[0] = true;
                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                    {
                                                                                                        if (!j2valid[ij2])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij2[0] = ij2;
                                                                                                        _ij2[1] = -1;
                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                        {
                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j2valid[iij2] = false;
                                                                                                                _ij2[1] = iij2;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j2 = j2array[ij2];
                                                                                                        cj2 = cj2array[ij2];
                                                                                                        sj2 = sj2array[ij2];
                                                                                                        {
                                                                                                            IkReal evalcond[8];
                                                                                                            IkReal x315 = IKcos(j2);
                                                                                                            IkReal x316 = IKsin(j2);
                                                                                                            IkReal x317 = ((1.0) * sj0);
                                                                                                            IkReal x318 = ((1.0) * x316);
                                                                                                            IkReal x319 = ((1.0) * x315);
                                                                                                            evalcond[0] = (x315 + new_r20);
                                                                                                            evalcond[1] = ((((-1.0) * x318)) + new_r21);
                                                                                                            evalcond[2] = (((sj0 * x315)) + new_r01);
                                                                                                            evalcond[3] = (((sj0 * x316)) + new_r00);
                                                                                                            evalcond[4] = ((((-1.0) * cj0 * x319)) + new_r11);
                                                                                                            evalcond[5] = ((((-1.0) * new_r02 * x318)) + new_r10);
                                                                                                            evalcond[6] = ((((-1.0) * new_r00 * x317)) + (((-1.0) * x318)) + ((cj0 * new_r10)));
                                                                                                            evalcond[7] = ((((-1.0) * x319)) + ((cj0 * new_r11)) + (((-1.0) * new_r01 * x317)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j3;
                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j4;
                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j5;
                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                            vinfos[6].jointtype = 1;
                                                                                                            vinfos[6].foffset = j6;
                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                            std::vector<int> vfree(0);
                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } while (0);
                                                                                        if (bgotonextstatement)
                                                                                        {
                                                                                            bool bgotonextstatement = true;
                                                                                            do
                                                                                            {
                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                evalcond[1] = new_r22;
                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                                {
                                                                                                    bgotonextstatement = false;
                                                                                                    {
                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                        bool j2valid[1] = {false};
                                                                                                        _nj2 = 1;
                                                                                                        if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                            continue;
                                                                                                        j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                        if (j2array[0] > IKPI)
                                                                                                        {
                                                                                                            j2array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                        {
                                                                                                            j2array[0] += IK2PI;
                                                                                                        }
                                                                                                        j2valid[0] = true;
                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                        {
                                                                                                            if (!j2valid[ij2])
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij2[0] = ij2;
                                                                                                            _ij2[1] = -1;
                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                            {
                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                {
                                                                                                                    j2valid[iij2] = false;
                                                                                                                    _ij2[1] = iij2;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j2 = j2array[ij2];
                                                                                                            cj2 = cj2array[ij2];
                                                                                                            sj2 = sj2array[ij2];
                                                                                                            {
                                                                                                                IkReal evalcond[8];
                                                                                                                IkReal x320 = IKcos(j2);
                                                                                                                IkReal x321 = IKsin(j2);
                                                                                                                IkReal x322 = ((1.0) * sj0);
                                                                                                                IkReal x323 = ((1.0) * x320);
                                                                                                                evalcond[0] = (x321 + new_r21);
                                                                                                                evalcond[1] = ((((-1.0) * x323)) + new_r20);
                                                                                                                evalcond[2] = (((sj0 * x320)) + new_r01);
                                                                                                                evalcond[3] = (((sj0 * x321)) + new_r00);
                                                                                                                evalcond[4] = (new_r10 + ((new_r02 * x321)));
                                                                                                                evalcond[5] = ((((-1.0) * cj0 * x323)) + new_r11);
                                                                                                                evalcond[6] = ((((-1.0) * x321)) + (((-1.0) * new_r00 * x322)) + ((cj0 * new_r10)));
                                                                                                                evalcond[7] = ((((-1.0) * x323)) + (((-1.0) * new_r01 * x322)) + ((cj0 * new_r11)));
                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j0;
                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j1;
                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j2;
                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                vinfos[3].foffset = j3;
                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                vinfos[4].foffset = j4;
                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                vinfos[5].foffset = j5;
                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                vinfos[6].foffset = j6;
                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                std::vector<int> vfree(0);
                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } while (0);
                                                                                            if (bgotonextstatement)
                                                                                            {
                                                                                                bool bgotonextstatement = true;
                                                                                                do
                                                                                                {
                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                                                                    evalcond[1] = new_r20;
                                                                                                    evalcond[2] = new_r02;
                                                                                                    evalcond[3] = new_r12;
                                                                                                    evalcond[4] = new_r21;
                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                                                                    {
                                                                                                        bgotonextstatement = false;
                                                                                                        {
                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                            bool j2valid[1] = {false};
                                                                                                            _nj2 = 1;
                                                                                                            IkReal x324 = ((1.0) * new_r01);
                                                                                                            if (IKabs(((((-1.0) * cj0 * x324)) + (((-1.0) * new_r00 * sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * sj0 * x324)) + ((cj0 * new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * cj0 * x324)) + (((-1.0) * new_r00 * sj0)))) + IKsqr(((((-1.0) * sj0 * x324)) + ((cj0 * new_r00)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                continue;
                                                                                                            j2array[0] = IKatan2(((((-1.0) * cj0 * x324)) + (((-1.0) * new_r00 * sj0))), ((((-1.0) * sj0 * x324)) + ((cj0 * new_r00))));
                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                            if (j2array[0] > IKPI)
                                                                                                            {
                                                                                                                j2array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                            {
                                                                                                                j2array[0] += IK2PI;
                                                                                                            }
                                                                                                            j2valid[0] = true;
                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                            {
                                                                                                                if (!j2valid[ij2])
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij2[0] = ij2;
                                                                                                                _ij2[1] = -1;
                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                {
                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                    {
                                                                                                                        j2valid[iij2] = false;
                                                                                                                        _ij2[1] = iij2;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j2 = j2array[ij2];
                                                                                                                cj2 = cj2array[ij2];
                                                                                                                sj2 = sj2array[ij2];
                                                                                                                {
                                                                                                                    IkReal evalcond[8];
                                                                                                                    IkReal x325 = IKsin(j2);
                                                                                                                    IkReal x326 = IKcos(j2);
                                                                                                                    IkReal x327 = ((1.0) * sj0);
                                                                                                                    IkReal x328 = ((1.0) * x326);
                                                                                                                    IkReal x329 = (sj0 * x325);
                                                                                                                    IkReal x330 = (cj0 * x325);
                                                                                                                    IkReal x331 = (cj0 * x328);
                                                                                                                    evalcond[0] = (((new_r11 * sj0)) + x325 + ((cj0 * new_r01)));
                                                                                                                    evalcond[1] = (x330 + ((sj0 * x326)) + new_r01);
                                                                                                                    evalcond[2] = (((new_r10 * sj0)) + (((-1.0) * x328)) + ((cj0 * new_r00)));
                                                                                                                    evalcond[3] = ((((-1.0) * x325)) + (((-1.0) * new_r00 * x327)) + ((cj0 * new_r10)));
                                                                                                                    evalcond[4] = ((((-1.0) * x328)) + (((-1.0) * new_r01 * x327)) + ((cj0 * new_r11)));
                                                                                                                    evalcond[5] = (x329 + (((-1.0) * x331)) + new_r00);
                                                                                                                    evalcond[6] = (x329 + (((-1.0) * x331)) + new_r11);
                                                                                                                    evalcond[7] = ((((-1.0) * x326 * x327)) + (((-1.0) * x330)) + new_r10);
                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                {
                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                    std::vector<int> vfree(0);
                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } while (0);
                                                                                                if (bgotonextstatement)
                                                                                                {
                                                                                                    bool bgotonextstatement = true;
                                                                                                    do
                                                                                                    {
                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                                                                        evalcond[1] = new_r20;
                                                                                                        evalcond[2] = new_r02;
                                                                                                        evalcond[3] = new_r12;
                                                                                                        evalcond[4] = new_r21;
                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                                                                        {
                                                                                                            bgotonextstatement = false;
                                                                                                            {
                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                bool j2valid[1] = {false};
                                                                                                                _nj2 = 1;
                                                                                                                IkReal x332 = ((1.0) * sj0);
                                                                                                                if (IKabs(((((-1.0) * new_r00 * x332)) + ((cj0 * new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * cj0 * new_r00)) + (((-1.0) * new_r01 * x332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * new_r00 * x332)) + ((cj0 * new_r01)))) + IKsqr(((((-1.0) * cj0 * new_r00)) + (((-1.0) * new_r01 * x332)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                    continue;
                                                                                                                j2array[0] = IKatan2(((((-1.0) * new_r00 * x332)) + ((cj0 * new_r01))), ((((-1.0) * cj0 * new_r00)) + (((-1.0) * new_r01 * x332))));
                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                if (j2array[0] > IKPI)
                                                                                                                {
                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                }
                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                {
                                                                                                                    j2array[0] += IK2PI;
                                                                                                                }
                                                                                                                j2valid[0] = true;
                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                {
                                                                                                                    if (!j2valid[ij2])
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    _ij2[0] = ij2;
                                                                                                                    _ij2[1] = -1;
                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                    {
                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                        {
                                                                                                                            j2valid[iij2] = false;
                                                                                                                            _ij2[1] = iij2;
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    j2 = j2array[ij2];
                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                    {
                                                                                                                        IkReal evalcond[8];
                                                                                                                        IkReal x333 = IKsin(j2);
                                                                                                                        IkReal x334 = IKcos(j2);
                                                                                                                        IkReal x335 = ((1.0) * sj0);
                                                                                                                        IkReal x336 = ((1.0) * x333);
                                                                                                                        IkReal x337 = (sj0 * x334);
                                                                                                                        IkReal x338 = ((1.0) * x334);
                                                                                                                        IkReal x339 = (cj0 * x336);
                                                                                                                        evalcond[0] = (((new_r10 * sj0)) + x334 + ((cj0 * new_r00)));
                                                                                                                        evalcond[1] = (((new_r11 * sj0)) + (((-1.0) * x336)) + ((cj0 * new_r01)));
                                                                                                                        evalcond[2] = (((cj0 * x334)) + new_r00 + ((sj0 * x333)));
                                                                                                                        evalcond[3] = ((((-1.0) * new_r00 * x335)) + (((-1.0) * x336)) + ((cj0 * new_r10)));
                                                                                                                        evalcond[4] = ((((-1.0) * x338)) + ((cj0 * new_r11)) + (((-1.0) * new_r01 * x335)));
                                                                                                                        evalcond[5] = (x337 + (((-1.0) * x339)) + new_r01);
                                                                                                                        evalcond[6] = (x337 + (((-1.0) * x339)) + new_r10);
                                                                                                                        evalcond[7] = ((((-1.0) * x333 * x335)) + (((-1.0) * cj0 * x338)) + new_r11);
                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    {
                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                        std::vector<int> vfree(0);
                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    } while (0);
                                                                                                    if (bgotonextstatement)
                                                                                                    {
                                                                                                        bool bgotonextstatement = true;
                                                                                                        do
                                                                                                        {
                                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                                                                            evalcond[1] = new_r12;
                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                                            {
                                                                                                                bgotonextstatement = false;
                                                                                                                {
                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                    bool j2valid[1] = {false};
                                                                                                                    _nj2 = 1;
                                                                                                                    if (IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10) + IKsqr(new_r11) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                        continue;
                                                                                                                    j2array[0] = IKatan2(new_r10, new_r11);
                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j2valid[0] = true;
                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                    {
                                                                                                                        if (!j2valid[ij2])
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij2[0] = ij2;
                                                                                                                        _ij2[1] = -1;
                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                        {
                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                            {
                                                                                                                                j2valid[iij2] = false;
                                                                                                                                _ij2[1] = iij2;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j2 = j2array[ij2];
                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                        {
                                                                                                                            IkReal evalcond[8];
                                                                                                                            IkReal x340 = IKcos(j2);
                                                                                                                            IkReal x341 = IKsin(j2);
                                                                                                                            IkReal x342 = ((1.0) * sj1);
                                                                                                                            IkReal x343 = ((1.0) * x340);
                                                                                                                            evalcond[0] = (((sj1 * x340)) + new_r20);
                                                                                                                            evalcond[1] = (new_r10 + (((-1.0) * x341)));
                                                                                                                            evalcond[2] = (new_r11 + (((-1.0) * x343)));
                                                                                                                            evalcond[3] = (((cj1 * x341)) + new_r01);
                                                                                                                            evalcond[4] = ((((-1.0) * x341 * x342)) + new_r21);
                                                                                                                            evalcond[5] = ((((-1.0) * cj1 * x343)) + new_r00);
                                                                                                                            evalcond[6] = (((cj1 * new_r01)) + x341 + (((-1.0) * new_r21 * x342)));
                                                                                                                            evalcond[7] = (((cj1 * new_r00)) + (((-1.0) * new_r20 * x342)) + (((-1.0) * x343)));
                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                            std::vector<int> vfree(0);
                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } while (0);
                                                                                                        if (bgotonextstatement)
                                                                                                        {
                                                                                                            bool bgotonextstatement = true;
                                                                                                            do
                                                                                                            {
                                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                                                                                evalcond[1] = new_r12;
                                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                                                {
                                                                                                                    bgotonextstatement = false;
                                                                                                                    {
                                                                                                                        IkReal j2eval[3];
                                                                                                                        sj0 = 0;
                                                                                                                        cj0 = -1.0;
                                                                                                                        j0 = 3.14159265358979;
                                                                                                                        j2eval[0] = sj1;
                                                                                                                        j2eval[1] = IKsign(sj1);
                                                                                                                        j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                                        if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                                                                        {
                                                                                                                            {
                                                                                                                                IkReal j2eval[1];
                                                                                                                                sj0 = 0;
                                                                                                                                cj0 = -1.0;
                                                                                                                                j0 = 3.14159265358979;
                                                                                                                                j2eval[0] = sj1;
                                                                                                                                if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                                                                {
                                                                                                                                    {
                                                                                                                                        IkReal j2eval[2];
                                                                                                                                        sj0 = 0;
                                                                                                                                        cj0 = -1.0;
                                                                                                                                        j0 = 3.14159265358979;
                                                                                                                                        j2eval[0] = cj1;
                                                                                                                                        j2eval[1] = sj1;
                                                                                                                                        if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                                                                                        {
                                                                                                                                            {
                                                                                                                                                IkReal evalcond[4];
                                                                                                                                                bool bgotonextstatement = true;
                                                                                                                                                do
                                                                                                                                                {
                                                                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                                                    evalcond[1] = new_r22;
                                                                                                                                                    evalcond[2] = new_r01;
                                                                                                                                                    evalcond[3] = new_r00;
                                                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                                    {
                                                                                                                                                        bgotonextstatement = false;
                                                                                                                                                        {
                                                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                            bool j2valid[1] = {false};
                                                                                                                                                            _nj2 = 1;
                                                                                                                                                            if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                                continue;
                                                                                                                                                            j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                                                            {
                                                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                                                            }
                                                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                                                            {
                                                                                                                                                                j2array[0] += IK2PI;
                                                                                                                                                            }
                                                                                                                                                            j2valid[0] = true;
                                                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                            {
                                                                                                                                                                if (!j2valid[ij2])
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                _ij2[0] = ij2;
                                                                                                                                                                _ij2[1] = -1;
                                                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                                {
                                                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                    {
                                                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                                                        break;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                j2 = j2array[ij2];
                                                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                                                {
                                                                                                                                                                    IkReal evalcond[4];
                                                                                                                                                                    IkReal x344 = IKcos(j2);
                                                                                                                                                                    IkReal x345 = ((1.0) * (IKsin(j2)));
                                                                                                                                                                    evalcond[0] = (x344 + new_r20);
                                                                                                                                                                    evalcond[1] = (new_r21 + (((-1.0) * x345)));
                                                                                                                                                                    evalcond[2] = ((((-1.0) * new_r10)) + (((-1.0) * x345)));
                                                                                                                                                                    evalcond[3] = ((((-1.0) * new_r11)) + (((-1.0) * x344)));
                                                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                    {
                                                                                                                                                                        continue;
                                                                                                                                                                    }
                                                                                                                                                                }

                                                                                                                                                                {
                                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                } while (0);
                                                                                                                                                if (bgotonextstatement)
                                                                                                                                                {
                                                                                                                                                    bool bgotonextstatement = true;
                                                                                                                                                    do
                                                                                                                                                    {
                                                                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                                                        evalcond[1] = new_r22;
                                                                                                                                                        evalcond[2] = new_r01;
                                                                                                                                                        evalcond[3] = new_r00;
                                                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                                        {
                                                                                                                                                            bgotonextstatement = false;
                                                                                                                                                            {
                                                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                                                _nj2 = 1;
                                                                                                                                                                if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                                    continue;
                                                                                                                                                                j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                                                {
                                                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                                                }
                                                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                                                {
                                                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                                                }
                                                                                                                                                                j2valid[0] = true;
                                                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                                {
                                                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                                                    {
                                                                                                                                                                        continue;
                                                                                                                                                                    }
                                                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                                                    _ij2[1] = -1;
                                                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                                    {
                                                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                        {
                                                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                                                            break;
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                                                    {
                                                                                                                                                                        IkReal evalcond[4];
                                                                                                                                                                        IkReal x346 = IKsin(j2);
                                                                                                                                                                        IkReal x347 = ((1.0) * (IKcos(j2)));
                                                                                                                                                                        evalcond[0] = (x346 + new_r21);
                                                                                                                                                                        evalcond[1] = (new_r20 + (((-1.0) * x347)));
                                                                                                                                                                        evalcond[2] = ((((-1.0) * new_r10)) + (((-1.0) * x346)));
                                                                                                                                                                        evalcond[3] = ((((-1.0) * new_r11)) + (((-1.0) * x347)));
                                                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                    }

                                                                                                                                                                    {
                                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    } while (0);
                                                                                                                                                    if (bgotonextstatement)
                                                                                                                                                    {
                                                                                                                                                        bool bgotonextstatement = true;
                                                                                                                                                        do
                                                                                                                                                        {
                                                                                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                                                                                                                            evalcond[1] = new_r20;
                                                                                                                                                            evalcond[2] = new_r02;
                                                                                                                                                            evalcond[3] = new_r21;
                                                                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                                            {
                                                                                                                                                                bgotonextstatement = false;
                                                                                                                                                                {
                                                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                                                    _nj2 = 1;
                                                                                                                                                                    if (IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                                        continue;
                                                                                                                                                                    j2array[0] = IKatan2(new_r01, ((-1.0) * new_r11));
                                                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                                                    {
                                                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                                                    }
                                                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                                                    {
                                                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                                                    }
                                                                                                                                                                    j2valid[0] = true;
                                                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                                    {
                                                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                                                        _ij2[1] = -1;
                                                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                                        {
                                                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                            {
                                                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                                                break;
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                                                        {
                                                                                                                                                                            IkReal evalcond[4];
                                                                                                                                                                            IkReal x348 = IKsin(j2);
                                                                                                                                                                            IkReal x349 = ((1.0) * (IKcos(j2)));
                                                                                                                                                                            evalcond[0] = (x348 + (((-1.0) * new_r01)));
                                                                                                                                                                            evalcond[1] = ((((-1.0) * new_r10)) + (((-1.0) * x348)));
                                                                                                                                                                            evalcond[2] = ((((-1.0) * new_r11)) + (((-1.0) * x349)));
                                                                                                                                                                            evalcond[3] = ((((-1.0) * new_r00)) + (((-1.0) * x349)));
                                                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                            {
                                                                                                                                                                                continue;
                                                                                                                                                                            }
                                                                                                                                                                        }

                                                                                                                                                                        {
                                                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        } while (0);
                                                                                                                                                        if (bgotonextstatement)
                                                                                                                                                        {
                                                                                                                                                            bool bgotonextstatement = true;
                                                                                                                                                            do
                                                                                                                                                            {
                                                                                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                                                                                                                                evalcond[1] = new_r20;
                                                                                                                                                                evalcond[2] = new_r02;
                                                                                                                                                                evalcond[3] = new_r21;
                                                                                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                                                {
                                                                                                                                                                    bgotonextstatement = false;
                                                                                                                                                                    {
                                                                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                                        bool j2valid[1] = {false};
                                                                                                                                                                        _nj2 = 1;
                                                                                                                                                                        if (IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r10)) + IKsqr(new_r00) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                                            continue;
                                                                                                                                                                        j2array[0] = IKatan2(((-1.0) * new_r10), new_r00);
                                                                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                                                                        {
                                                                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                                                                        }
                                                                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                                                                        {
                                                                                                                                                                            j2array[0] += IK2PI;
                                                                                                                                                                        }
                                                                                                                                                                        j2valid[0] = true;
                                                                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                                        {
                                                                                                                                                                            if (!j2valid[ij2])
                                                                                                                                                                            {
                                                                                                                                                                                continue;
                                                                                                                                                                            }
                                                                                                                                                                            _ij2[0] = ij2;
                                                                                                                                                                            _ij2[1] = -1;
                                                                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                                            {
                                                                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                                {
                                                                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                                                                    break;
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            j2 = j2array[ij2];
                                                                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                                                                            {
                                                                                                                                                                                IkReal evalcond[4];
                                                                                                                                                                                IkReal x350 = IKcos(j2);
                                                                                                                                                                                IkReal x351 = ((1.0) * (IKsin(j2)));
                                                                                                                                                                                evalcond[0] = (x350 + (((-1.0) * new_r00)));
                                                                                                                                                                                evalcond[1] = ((((-1.0) * x351)) + (((-1.0) * new_r10)));
                                                                                                                                                                                evalcond[2] = ((((-1.0) * x350)) + (((-1.0) * new_r11)));
                                                                                                                                                                                evalcond[3] = ((((-1.0) * x351)) + (((-1.0) * new_r01)));
                                                                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                            }

                                                                                                                                                                            {
                                                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            } while (0);
                                                                                                                                                            if (bgotonextstatement)
                                                                                                                                                            {
                                                                                                                                                                bool bgotonextstatement = true;
                                                                                                                                                                do
                                                                                                                                                                {
                                                                                                                                                                    evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                                                                    {
                                                                                                                                                                        bgotonextstatement = false;
                                                                                                                                                                        {
                                                                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                                            bool j2valid[1] = {false};
                                                                                                                                                                            _nj2 = 1;
                                                                                                                                                                            if (IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r10)) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                                                continue;
                                                                                                                                                                            j2array[0] = IKatan2(((-1.0) * new_r10), ((-1.0) * new_r11));
                                                                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                                                                            {
                                                                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                                                                            }
                                                                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                                                                            {
                                                                                                                                                                                j2array[0] += IK2PI;
                                                                                                                                                                            }
                                                                                                                                                                            j2valid[0] = true;
                                                                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                                            {
                                                                                                                                                                                if (!j2valid[ij2])
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                _ij2[0] = ij2;
                                                                                                                                                                                _ij2[1] = -1;
                                                                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                                                {
                                                                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                                    {
                                                                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                                                                        break;
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                j2 = j2array[ij2];
                                                                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                                                                {
                                                                                                                                                                                    IkReal evalcond[6];
                                                                                                                                                                                    IkReal x352 = IKsin(j2);
                                                                                                                                                                                    IkReal x353 = IKcos(j2);
                                                                                                                                                                                    IkReal x354 = ((-1.0) * x353);
                                                                                                                                                                                    evalcond[0] = x352;
                                                                                                                                                                                    evalcond[1] = (new_r22 * x352);
                                                                                                                                                                                    evalcond[2] = x354;
                                                                                                                                                                                    evalcond[3] = (new_r22 * x354);
                                                                                                                                                                                    evalcond[4] = ((((-1.0) * x352)) + (((-1.0) * new_r10)));
                                                                                                                                                                                    evalcond[5] = ((((-1.0) * x353)) + (((-1.0) * new_r11)));
                                                                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                                    {
                                                                                                                                                                                        continue;
                                                                                                                                                                                    }
                                                                                                                                                                                }

                                                                                                                                                                                {
                                                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                } while (0);
                                                                                                                                                                if (bgotonextstatement)
                                                                                                                                                                {
                                                                                                                                                                    bool bgotonextstatement = true;
                                                                                                                                                                    do
                                                                                                                                                                    {
                                                                                                                                                                        if (1)
                                                                                                                                                                        {
                                                                                                                                                                            bgotonextstatement = false;
                                                                                                                                                                            continue; // branch miss [j2]
                                                                                                                                                                        }
                                                                                                                                                                    } while (0);
                                                                                                                                                                    if (bgotonextstatement)
                                                                                                                                                                    {
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            {
                                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                                _nj2 = 1;
                                                                                                                                                CheckValue<IkReal> x355 = IKPowWithIntegerCheck(cj1, -1);
                                                                                                                                                if (!x355.valid)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                CheckValue<IkReal> x356 = IKPowWithIntegerCheck(sj1, -1);
                                                                                                                                                if (!x356.valid)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if (IKabs((new_r01 * (x355.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * (x356.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01 * (x355.value))) + IKsqr(((-1.0) * new_r20 * (x356.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                    continue;
                                                                                                                                                j2array[0] = IKatan2((new_r01 * (x355.value)), ((-1.0) * new_r20 * (x356.value)));
                                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                                }
                                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                                }
                                                                                                                                                j2valid[0] = true;
                                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                {
                                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                                    _ij2[1] = -1;
                                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                    {
                                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                        {
                                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                                            break;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                                    {
                                                                                                                                                        IkReal evalcond[8];
                                                                                                                                                        IkReal x357 = IKsin(j2);
                                                                                                                                                        IkReal x358 = IKcos(j2);
                                                                                                                                                        IkReal x359 = ((1.0) * new_r00);
                                                                                                                                                        IkReal x360 = ((1.0) * sj1);
                                                                                                                                                        IkReal x361 = ((1.0) * new_r01);
                                                                                                                                                        IkReal x362 = ((1.0) * x358);
                                                                                                                                                        evalcond[0] = (((sj1 * x358)) + new_r20);
                                                                                                                                                        evalcond[1] = (new_r21 + (((-1.0) * x357 * x360)));
                                                                                                                                                        evalcond[2] = ((((-1.0) * x357)) + (((-1.0) * new_r10)));
                                                                                                                                                        evalcond[3] = ((((-1.0) * x362)) + (((-1.0) * new_r11)));
                                                                                                                                                        evalcond[4] = (((cj1 * x357)) + (((-1.0) * x361)));
                                                                                                                                                        evalcond[5] = ((((-1.0) * x359)) + (((-1.0) * cj1 * x362)));
                                                                                                                                                        evalcond[6] = ((((-1.0) * cj1 * x361)) + x357 + (((-1.0) * new_r21 * x360)));
                                                                                                                                                        evalcond[7] = ((((-1.0) * new_r20 * x360)) + (((-1.0) * x362)) + (((-1.0) * cj1 * x359)));
                                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                    }

                                                                                                                                                    {
                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    {
                                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                        bool j2valid[1] = {false};
                                                                                                                                        _nj2 = 1;
                                                                                                                                        CheckValue<IkReal> x363 = IKPowWithIntegerCheck(sj1, -1);
                                                                                                                                        if (!x363.valid)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if (IKabs((new_r21 * (x363.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r21 * (x363.value))) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                            continue;
                                                                                                                                        j2array[0] = IKatan2((new_r21 * (x363.value)), ((-1.0) * new_r11));
                                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                                        {
                                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                                        }
                                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                                        {
                                                                                                                                            j2array[0] += IK2PI;
                                                                                                                                        }
                                                                                                                                        j2valid[0] = true;
                                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                        {
                                                                                                                                            if (!j2valid[ij2])
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            _ij2[0] = ij2;
                                                                                                                                            _ij2[1] = -1;
                                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                            {
                                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                {
                                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                                    break;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            j2 = j2array[ij2];
                                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                                            {
                                                                                                                                                IkReal evalcond[8];
                                                                                                                                                IkReal x364 = IKsin(j2);
                                                                                                                                                IkReal x365 = IKcos(j2);
                                                                                                                                                IkReal x366 = ((1.0) * new_r00);
                                                                                                                                                IkReal x367 = ((1.0) * sj1);
                                                                                                                                                IkReal x368 = ((1.0) * new_r01);
                                                                                                                                                IkReal x369 = ((1.0) * x365);
                                                                                                                                                evalcond[0] = (((sj1 * x365)) + new_r20);
                                                                                                                                                evalcond[1] = ((((-1.0) * x364 * x367)) + new_r21);
                                                                                                                                                evalcond[2] = ((((-1.0) * x364)) + (((-1.0) * new_r10)));
                                                                                                                                                evalcond[3] = ((((-1.0) * x369)) + (((-1.0) * new_r11)));
                                                                                                                                                evalcond[4] = ((((-1.0) * x368)) + ((cj1 * x364)));
                                                                                                                                                evalcond[5] = ((((-1.0) * x366)) + (((-1.0) * cj1 * x369)));
                                                                                                                                                evalcond[6] = ((((-1.0) * cj1 * x368)) + x364 + (((-1.0) * new_r21 * x367)));
                                                                                                                                                evalcond[7] = ((((-1.0) * new_r20 * x367)) + (((-1.0) * x369)) + (((-1.0) * cj1 * x366)));
                                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                            }

                                                                                                                                            {
                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            {
                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                _nj2 = 1;
                                                                                                                                CheckValue<IkReal> x370 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                                                                                                if (!x370.valid)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                CheckValue<IkReal> x371 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                                if (!x371.valid)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x370.value))) + (x371.value));
                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                {
                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                }
                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                {
                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                }
                                                                                                                                j2valid[0] = true;
                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                {
                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                    _ij2[1] = -1;
                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                    {
                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                        {
                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                    {
                                                                                                                                        IkReal evalcond[8];
                                                                                                                                        IkReal x372 = IKsin(j2);
                                                                                                                                        IkReal x373 = IKcos(j2);
                                                                                                                                        IkReal x374 = ((1.0) * new_r00);
                                                                                                                                        IkReal x375 = ((1.0) * sj1);
                                                                                                                                        IkReal x376 = ((1.0) * new_r01);
                                                                                                                                        IkReal x377 = ((1.0) * x373);
                                                                                                                                        evalcond[0] = (((sj1 * x373)) + new_r20);
                                                                                                                                        evalcond[1] = ((((-1.0) * x372 * x375)) + new_r21);
                                                                                                                                        evalcond[2] = ((((-1.0) * x372)) + (((-1.0) * new_r10)));
                                                                                                                                        evalcond[3] = ((((-1.0) * x377)) + (((-1.0) * new_r11)));
                                                                                                                                        evalcond[4] = ((((-1.0) * x376)) + ((cj1 * x372)));
                                                                                                                                        evalcond[5] = ((((-1.0) * cj1 * x377)) + (((-1.0) * x374)));
                                                                                                                                        evalcond[6] = ((((-1.0) * new_r21 * x375)) + (((-1.0) * cj1 * x376)) + x372);
                                                                                                                                        evalcond[7] = ((((-1.0) * new_r20 * x375)) + (((-1.0) * cj1 * x374)) + (((-1.0) * x377)));
                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                    {
                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            } while (0);
                                                                                                            if (bgotonextstatement)
                                                                                                            {
                                                                                                                bool bgotonextstatement = true;
                                                                                                                do
                                                                                                                {
                                                                                                                    evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                    {
                                                                                                                        bgotonextstatement = false;
                                                                                                                        {
                                                                                                                            IkReal j2eval[1];
                                                                                                                            new_r21 = 0;
                                                                                                                            new_r20 = 0;
                                                                                                                            new_r02 = 0;
                                                                                                                            new_r12 = 0;
                                                                                                                            j2eval[0] = IKabs(new_r22);
                                                                                                                            if (IKabs(j2eval[0]) < 0.0000000100000000)
                                                                                                                            {
                                                                                                                                continue; // no branches [j2]
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                IkReal op[2 + 1], zeror[2];
                                                                                                                                int numroots;
                                                                                                                                op[0] = new_r22;
                                                                                                                                op[1] = 0;
                                                                                                                                op[2] = ((-1.0) * new_r22);
                                                                                                                                polyroots2(op, zeror, numroots);
                                                                                                                                IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
                                                                                                                                int numsolutions = 0;
                                                                                                                                for (int ij2 = 0; ij2 < numroots; ++ij2)
                                                                                                                                {
                                                                                                                                    IkReal htj2 = zeror[ij2];
                                                                                                                                    tempj2array[0] = ((2.0) * (atan(htj2)));
                                                                                                                                    for (int kj2 = 0; kj2 < 1; ++kj2)
                                                                                                                                    {
                                                                                                                                        j2array[numsolutions] = tempj2array[kj2];
                                                                                                                                        if (j2array[numsolutions] > IKPI)
                                                                                                                                        {
                                                                                                                                            j2array[numsolutions] -= IK2PI;
                                                                                                                                        }
                                                                                                                                        else if (j2array[numsolutions] < -IKPI)
                                                                                                                                        {
                                                                                                                                            j2array[numsolutions] += IK2PI;
                                                                                                                                        }
                                                                                                                                        sj2array[numsolutions] = IKsin(j2array[numsolutions]);
                                                                                                                                        cj2array[numsolutions] = IKcos(j2array[numsolutions]);
                                                                                                                                        numsolutions++;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                bool j2valid[2] = {true, true};
                                                                                                                                _nj2 = 2;
                                                                                                                                for (int ij2 = 0; ij2 < numsolutions; ++ij2)
                                                                                                                                {
                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                    htj2 = IKtan(j2 / 2);

                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                    _ij2[1] = -1;
                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < numsolutions; ++iij2)
                                                                                                                                    {
                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                        {
                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    {
                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } while (0);
                                                                                                                if (bgotonextstatement)
                                                                                                                {
                                                                                                                    bool bgotonextstatement = true;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        if (1)
                                                                                                                        {
                                                                                                                            bgotonextstatement = false;
                                                                                                                            continue; // branch miss [j2]
                                                                                                                        }
                                                                                                                    } while (0);
                                                                                                                    if (bgotonextstatement)
                                                                                                                    {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            {
                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                bool j2valid[1] = {false};
                                                                                _nj2 = 1;
                                                                                CheckValue<IkReal> x379 = IKPowWithIntegerCheck(sj1, -1);
                                                                                if (!x379.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                IkReal x378 = x379.value;
                                                                                CheckValue<IkReal> x380 = IKPowWithIntegerCheck(cj0, -1);
                                                                                if (!x380.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                CheckValue<IkReal> x381 = IKPowWithIntegerCheck(cj1, -1);
                                                                                if (!x381.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                if (IKabs((x378 * (x380.value) * (x381.value) * ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * x378)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x378 * (x380.value) * (x381.value) * ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1)))))) + IKsqr(((-1.0) * new_r20 * x378)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                    continue;
                                                                                j2array[0] = IKatan2((x378 * (x380.value) * (x381.value) * ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1))))), ((-1.0) * new_r20 * x378));
                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                if (j2array[0] > IKPI)
                                                                                {
                                                                                    j2array[0] -= IK2PI;
                                                                                }
                                                                                else if (j2array[0] < -IKPI)
                                                                                {
                                                                                    j2array[0] += IK2PI;
                                                                                }
                                                                                j2valid[0] = true;
                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                {
                                                                                    if (!j2valid[ij2])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij2[0] = ij2;
                                                                                    _ij2[1] = -1;
                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                    {
                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j2valid[iij2] = false;
                                                                                            _ij2[1] = iij2;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j2 = j2array[ij2];
                                                                                    cj2 = cj2array[ij2];
                                                                                    sj2 = sj2array[ij2];
                                                                                    {
                                                                                        IkReal evalcond[12];
                                                                                        IkReal x382 = IKsin(j2);
                                                                                        IkReal x383 = IKcos(j2);
                                                                                        IkReal x384 = ((1.0) * sj1);
                                                                                        IkReal x385 = ((1.0) * sj0);
                                                                                        IkReal x386 = (cj0 * new_r00);
                                                                                        IkReal x387 = (cj0 * cj1);
                                                                                        IkReal x388 = (new_r11 * sj0);
                                                                                        IkReal x389 = (new_r10 * sj0);
                                                                                        IkReal x390 = ((1.0) * x383);
                                                                                        IkReal x391 = (cj1 * x382);
                                                                                        IkReal x392 = ((1.0) * x382);
                                                                                        evalcond[0] = (new_r20 + ((sj1 * x383)));
                                                                                        evalcond[1] = (new_r21 + (((-1.0) * x382 * x384)));
                                                                                        evalcond[2] = (x388 + x391 + ((cj0 * new_r01)));
                                                                                        evalcond[3] = ((((-1.0) * x392)) + (((-1.0) * new_r00 * x385)) + ((cj0 * new_r10)));
                                                                                        evalcond[4] = ((((-1.0) * x390)) + (((-1.0) * new_r01 * x385)) + ((cj0 * new_r11)));
                                                                                        evalcond[5] = (((x382 * x387)) + new_r01 + ((sj0 * x383)));
                                                                                        evalcond[6] = ((((-1.0) * cj1 * x390)) + x386 + x389);
                                                                                        evalcond[7] = ((((-1.0) * x387 * x390)) + new_r00 + ((sj0 * x382)));
                                                                                        evalcond[8] = ((((-1.0) * cj0 * x390)) + ((sj0 * x391)) + new_r11);
                                                                                        evalcond[9] = ((((-1.0) * cj0 * x392)) + (((-1.0) * cj1 * x383 * x385)) + new_r10);
                                                                                        evalcond[10] = (((cj1 * x388)) + ((new_r01 * x387)) + x382 + (((-1.0) * new_r21 * x384)));
                                                                                        evalcond[11] = ((((-1.0) * x390)) + ((cj1 * x386)) + ((cj1 * x389)) + (((-1.0) * new_r20 * x384)));
                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                        vinfos[0].jointtype = 1;
                                                                                        vinfos[0].foffset = j0;
                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                        vinfos[1].jointtype = 1;
                                                                                        vinfos[1].foffset = j1;
                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                        vinfos[2].jointtype = 1;
                                                                                        vinfos[2].foffset = j2;
                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                        vinfos[3].jointtype = 1;
                                                                                        vinfos[3].foffset = j3;
                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j4;
                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j5;
                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                        vinfos[6].jointtype = 1;
                                                                                        vinfos[6].foffset = j6;
                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    {
                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                        bool j2valid[1] = {false};
                                                                        _nj2 = 1;
                                                                        CheckValue<IkReal> x394 = IKPowWithIntegerCheck(sj1, -1);
                                                                        if (!x394.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        IkReal x393 = x394.value;
                                                                        CheckValue<IkReal> x395 = IKPowWithIntegerCheck(sj0, -1);
                                                                        if (!x395.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        if (IKabs((x393 * (x395.value) * (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * x393)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x393 * (x395.value) * (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1)))))) + IKsqr(((-1.0) * new_r20 * x393)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                            continue;
                                                                        j2array[0] = IKatan2((x393 * (x395.value) * (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1))))), ((-1.0) * new_r20 * x393));
                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                        if (j2array[0] > IKPI)
                                                                        {
                                                                            j2array[0] -= IK2PI;
                                                                        }
                                                                        else if (j2array[0] < -IKPI)
                                                                        {
                                                                            j2array[0] += IK2PI;
                                                                        }
                                                                        j2valid[0] = true;
                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                        {
                                                                            if (!j2valid[ij2])
                                                                            {
                                                                                continue;
                                                                            }
                                                                            _ij2[0] = ij2;
                                                                            _ij2[1] = -1;
                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                            {
                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                    j2valid[iij2] = false;
                                                                                    _ij2[1] = iij2;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            j2 = j2array[ij2];
                                                                            cj2 = cj2array[ij2];
                                                                            sj2 = sj2array[ij2];
                                                                            {
                                                                                IkReal evalcond[12];
                                                                                IkReal x396 = IKsin(j2);
                                                                                IkReal x397 = IKcos(j2);
                                                                                IkReal x398 = ((1.0) * sj1);
                                                                                IkReal x399 = ((1.0) * sj0);
                                                                                IkReal x400 = (cj0 * new_r00);
                                                                                IkReal x401 = (cj0 * cj1);
                                                                                IkReal x402 = (new_r11 * sj0);
                                                                                IkReal x403 = (new_r10 * sj0);
                                                                                IkReal x404 = ((1.0) * x397);
                                                                                IkReal x405 = (cj1 * x396);
                                                                                IkReal x406 = ((1.0) * x396);
                                                                                evalcond[0] = (((sj1 * x397)) + new_r20);
                                                                                evalcond[1] = ((((-1.0) * x396 * x398)) + new_r21);
                                                                                evalcond[2] = (x402 + x405 + ((cj0 * new_r01)));
                                                                                evalcond[3] = ((((-1.0) * new_r00 * x399)) + ((cj0 * new_r10)) + (((-1.0) * x406)));
                                                                                evalcond[4] = ((((-1.0) * new_r01 * x399)) + ((cj0 * new_r11)) + (((-1.0) * x404)));
                                                                                evalcond[5] = (((sj0 * x397)) + new_r01 + ((x396 * x401)));
                                                                                evalcond[6] = ((((-1.0) * cj1 * x404)) + x400 + x403);
                                                                                evalcond[7] = (((sj0 * x396)) + (((-1.0) * x401 * x404)) + new_r00);
                                                                                evalcond[8] = (((sj0 * x405)) + (((-1.0) * cj0 * x404)) + new_r11);
                                                                                evalcond[9] = ((((-1.0) * cj0 * x406)) + new_r10 + (((-1.0) * cj1 * x397 * x399)));
                                                                                evalcond[10] = ((((-1.0) * new_r21 * x398)) + x396 + ((cj1 * x402)) + ((new_r01 * x401)));
                                                                                evalcond[11] = (((cj1 * x400)) + ((cj1 * x403)) + (((-1.0) * x404)) + (((-1.0) * new_r20 * x398)));
                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                            }

                                                                            {
                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 1;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 1;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 1;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j6;
                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                bool j2valid[1] = {false};
                                                                _nj2 = 1;
                                                                CheckValue<IkReal> x407 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                                if (!x407.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x408 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                                                if (!x408.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x407.value))) + (x408.value));
                                                                sj2array[0] = IKsin(j2array[0]);
                                                                cj2array[0] = IKcos(j2array[0]);
                                                                if (j2array[0] > IKPI)
                                                                {
                                                                    j2array[0] -= IK2PI;
                                                                }
                                                                else if (j2array[0] < -IKPI)
                                                                {
                                                                    j2array[0] += IK2PI;
                                                                }
                                                                j2valid[0] = true;
                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                {
                                                                    if (!j2valid[ij2])
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij2[0] = ij2;
                                                                    _ij2[1] = -1;
                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                    {
                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                        {
                                                                            j2valid[iij2] = false;
                                                                            _ij2[1] = iij2;
                                                                            break;
                                                                        }
                                                                    }
                                                                    j2 = j2array[ij2];
                                                                    cj2 = cj2array[ij2];
                                                                    sj2 = sj2array[ij2];
                                                                    {
                                                                        IkReal evalcond[12];
                                                                        IkReal x409 = IKsin(j2);
                                                                        IkReal x410 = IKcos(j2);
                                                                        IkReal x411 = ((1.0) * sj1);
                                                                        IkReal x412 = ((1.0) * sj0);
                                                                        IkReal x413 = (cj0 * new_r00);
                                                                        IkReal x414 = (cj0 * cj1);
                                                                        IkReal x415 = (new_r11 * sj0);
                                                                        IkReal x416 = (new_r10 * sj0);
                                                                        IkReal x417 = ((1.0) * x410);
                                                                        IkReal x418 = (cj1 * x409);
                                                                        IkReal x419 = ((1.0) * x409);
                                                                        evalcond[0] = (((sj1 * x410)) + new_r20);
                                                                        evalcond[1] = (new_r21 + (((-1.0) * x409 * x411)));
                                                                        evalcond[2] = (x415 + x418 + ((cj0 * new_r01)));
                                                                        evalcond[3] = ((((-1.0) * new_r00 * x412)) + ((cj0 * new_r10)) + (((-1.0) * x419)));
                                                                        evalcond[4] = (((cj0 * new_r11)) + (((-1.0) * x417)) + (((-1.0) * new_r01 * x412)));
                                                                        evalcond[5] = (((sj0 * x410)) + ((x409 * x414)) + new_r01);
                                                                        evalcond[6] = ((((-1.0) * cj1 * x417)) + x413 + x416);
                                                                        evalcond[7] = (((sj0 * x409)) + new_r00 + (((-1.0) * x414 * x417)));
                                                                        evalcond[8] = (((sj0 * x418)) + (((-1.0) * cj0 * x417)) + new_r11);
                                                                        evalcond[9] = ((((-1.0) * cj1 * x410 * x412)) + (((-1.0) * cj0 * x419)) + new_r10);
                                                                        evalcond[10] = (x409 + (((-1.0) * new_r21 * x411)) + ((cj1 * x415)) + ((new_r01 * x414)));
                                                                        evalcond[11] = ((((-1.0) * new_r20 * x411)) + (((-1.0) * x417)) + ((cj1 * x413)) + ((cj1 * x416)));
                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j0;
                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                        vinfos[0].maxsolutions = _nj0;
                                                                        vinfos[1].jointtype = 1;
                                                                        vinfos[1].foffset = j1;
                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                        vinfos[1].maxsolutions = _nj1;
                                                                        vinfos[2].jointtype = 1;
                                                                        vinfos[2].foffset = j2;
                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                        vinfos[2].maxsolutions = _nj2;
                                                                        vinfos[3].jointtype = 1;
                                                                        vinfos[3].foffset = j3;
                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                        vinfos[3].maxsolutions = _nj3;
                                                                        vinfos[4].jointtype = 1;
                                                                        vinfos[4].foffset = j4;
                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                        vinfos[4].maxsolutions = _nj4;
                                                                        vinfos[5].jointtype = 1;
                                                                        vinfos[5].foffset = j5;
                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                        vinfos[5].maxsolutions = _nj5;
                                                                        vinfos[6].jointtype = 1;
                                                                        vinfos[6].foffset = j6;
                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                        vinfos[6].maxsolutions = _nj6;
                                                                        std::vector<int> vfree(0);
                                                                        solutions.AddSolution(vinfos, vfree);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    {
                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                        bool j2valid[1] = {false};
                                        _nj2 = 1;
                                        CheckValue<IkReal> x420 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                        if (!x420.valid)
                                        {
                                            continue;
                                        }
                                        CheckValue<IkReal> x421 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                        if (!x421.valid)
                                        {
                                            continue;
                                        }
                                        j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x420.value))) + (x421.value));
                                        sj2array[0] = IKsin(j2array[0]);
                                        cj2array[0] = IKcos(j2array[0]);
                                        if (j2array[0] > IKPI)
                                        {
                                            j2array[0] -= IK2PI;
                                        }
                                        else if (j2array[0] < -IKPI)
                                        {
                                            j2array[0] += IK2PI;
                                        }
                                        j2valid[0] = true;
                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                        {
                                            if (!j2valid[ij2])
                                            {
                                                continue;
                                            }
                                            _ij2[0] = ij2;
                                            _ij2[1] = -1;
                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                            {
                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                {
                                                    j2valid[iij2] = false;
                                                    _ij2[1] = iij2;
                                                    break;
                                                }
                                            }
                                            j2 = j2array[ij2];
                                            cj2 = cj2array[ij2];
                                            sj2 = sj2array[ij2];
                                            {
                                                IkReal evalcond[2];
                                                evalcond[0] = (((sj1 * (IKcos(j2)))) + new_r20);
                                                evalcond[1] = ((((-1.0) * sj1 * (IKsin(j2)))) + new_r21);
                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                                {
                                                    continue;
                                                }
                                            }

                                            {
                                                IkReal j0eval[3];
                                                j0eval[0] = sj1;
                                                j0eval[1] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                                                j0eval[2] = IKsign(sj1);
                                                if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000 || IKabs(j0eval[2]) < 0.0000010000000000)
                                                {
                                                    {
                                                        IkReal j0eval[2];
                                                        j0eval[0] = cj2;
                                                        j0eval[1] = sj1;
                                                        if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000)
                                                        {
                                                            {
                                                                IkReal evalcond[5];
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j2)))), 6.28318530717959)));
                                                                    evalcond[1] = new_r20;
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                    {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                            IkReal j0array[1], cj0array[1], sj0array[1];
                                                                            bool j0valid[1] = {false};
                                                                            _nj0 = 1;
                                                                            if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r00)) + IKsqr(new_r10) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                continue;
                                                                            j0array[0] = IKatan2(((-1.0) * new_r00), new_r10);
                                                                            sj0array[0] = IKsin(j0array[0]);
                                                                            cj0array[0] = IKcos(j0array[0]);
                                                                            if (j0array[0] > IKPI)
                                                                            {
                                                                                j0array[0] -= IK2PI;
                                                                            }
                                                                            else if (j0array[0] < -IKPI)
                                                                            {
                                                                                j0array[0] += IK2PI;
                                                                            }
                                                                            j0valid[0] = true;
                                                                            for (int ij0 = 0; ij0 < 1; ++ij0)
                                                                            {
                                                                                if (!j0valid[ij0])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij0[0] = ij0;
                                                                                _ij0[1] = -1;
                                                                                for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                                                                {
                                                                                    if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j0valid[iij0] = false;
                                                                                        _ij0[1] = iij0;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j0 = j0array[ij0];
                                                                                cj0 = cj0array[ij0];
                                                                                sj0 = sj0array[ij0];
                                                                                {
                                                                                    IkReal evalcond[18];
                                                                                    IkReal x422 = IKsin(j0);
                                                                                    IkReal x423 = IKcos(j0);
                                                                                    IkReal x424 = ((1.0) * sj1);
                                                                                    IkReal x425 = ((1.0) * cj1);
                                                                                    IkReal x426 = (new_r10 * x422);
                                                                                    IkReal x427 = (new_r01 * x423);
                                                                                    IkReal x428 = (new_r00 * x423);
                                                                                    IkReal x429 = ((1.0) * x422);
                                                                                    IkReal x430 = (new_r11 * x422);
                                                                                    IkReal x431 = (new_r12 * x422);
                                                                                    IkReal x432 = (cj1 * x423);
                                                                                    IkReal x433 = (new_r02 * x423);
                                                                                    evalcond[0] = (x422 + new_r00);
                                                                                    evalcond[1] = (x432 + new_r01);
                                                                                    evalcond[2] = (new_r11 + ((cj1 * x422)));
                                                                                    evalcond[3] = ((((-1.0) * x423)) + new_r10);
                                                                                    evalcond[4] = (new_r02 + (((-1.0) * x423 * x424)));
                                                                                    evalcond[5] = ((((-1.0) * x422 * x424)) + new_r12);
                                                                                    evalcond[6] = (x428 + x426);
                                                                                    evalcond[7] = (((new_r12 * x423)) + (((-1.0) * new_r02 * x429)));
                                                                                    evalcond[8] = (((new_r11 * x423)) + (((-1.0) * new_r01 * x429)));
                                                                                    evalcond[9] = (cj1 + x427 + x430);
                                                                                    evalcond[10] = ((-1.0) + (((-1.0) * new_r00 * x429)) + ((new_r10 * x423)));
                                                                                    evalcond[11] = (((cj1 * x428)) + ((cj1 * x426)));
                                                                                    evalcond[12] = ((((-1.0) * x424)) + x431 + x433);
                                                                                    evalcond[13] = ((((-1.0) * x424 * x428)) + (((-1.0) * x424 * x426)));
                                                                                    evalcond[14] = (((cj1 * x431)) + (((-1.0) * new_r22 * x424)) + ((new_r02 * x432)));
                                                                                    evalcond[15] = ((1.0) + ((cj1 * x430)) + (((-1.0) * new_r21 * x424)) + ((cj1 * x427)));
                                                                                    evalcond[16] = ((((-1.0) * x424 * x430)) + (((-1.0) * x424 * x427)) + (((-1.0) * new_r21 * x425)));
                                                                                    evalcond[17] = ((1.0) + (((-1.0) * new_r22 * x425)) + (((-1.0) * x424 * x431)) + (((-1.0) * x424 * x433)));
                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                {
                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                    vinfos[0].jointtype = 1;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 1;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 1;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 1;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    vinfos[6].jointtype = 1;
                                                                                    vinfos[6].foffset = j6;
                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                } while (0);
                                                                if (bgotonextstatement)
                                                                {
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j2)))), 6.28318530717959)));
                                                                        evalcond[1] = new_r20;
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                        {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                                IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                bool j0valid[1] = {false};
                                                                                _nj0 = 1;
                                                                                if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00) + IKsqr(((-1.0) * new_r10)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                    continue;
                                                                                j0array[0] = IKatan2(new_r00, ((-1.0) * new_r10));
                                                                                sj0array[0] = IKsin(j0array[0]);
                                                                                cj0array[0] = IKcos(j0array[0]);
                                                                                if (j0array[0] > IKPI)
                                                                                {
                                                                                    j0array[0] -= IK2PI;
                                                                                }
                                                                                else if (j0array[0] < -IKPI)
                                                                                {
                                                                                    j0array[0] += IK2PI;
                                                                                }
                                                                                j0valid[0] = true;
                                                                                for (int ij0 = 0; ij0 < 1; ++ij0)
                                                                                {
                                                                                    if (!j0valid[ij0])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij0[0] = ij0;
                                                                                    _ij0[1] = -1;
                                                                                    for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                                                                    {
                                                                                        if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j0valid[iij0] = false;
                                                                                            _ij0[1] = iij0;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j0 = j0array[ij0];
                                                                                    cj0 = cj0array[ij0];
                                                                                    sj0 = sj0array[ij0];
                                                                                    {
                                                                                        IkReal evalcond[18];
                                                                                        IkReal x434 = IKcos(j0);
                                                                                        IkReal x435 = IKsin(j0);
                                                                                        IkReal x436 = ((1.0) * sj1);
                                                                                        IkReal x437 = ((1.0) * cj1);
                                                                                        IkReal x438 = (new_r10 * x435);
                                                                                        IkReal x439 = (new_r01 * x434);
                                                                                        IkReal x440 = (new_r00 * x434);
                                                                                        IkReal x441 = ((1.0) * x435);
                                                                                        IkReal x442 = (new_r11 * x435);
                                                                                        IkReal x443 = (new_r12 * x435);
                                                                                        IkReal x444 = (new_r02 * x434);
                                                                                        evalcond[0] = (x434 + new_r10);
                                                                                        evalcond[1] = ((((-1.0) * x441)) + new_r00);
                                                                                        evalcond[2] = ((((-1.0) * x434 * x436)) + new_r02);
                                                                                        evalcond[3] = ((((-1.0) * x435 * x436)) + new_r12);
                                                                                        evalcond[4] = ((((-1.0) * x434 * x437)) + new_r01);
                                                                                        evalcond[5] = ((((-1.0) * x435 * x437)) + new_r11);
                                                                                        evalcond[6] = (x438 + x440);
                                                                                        evalcond[7] = (((new_r12 * x434)) + (((-1.0) * new_r02 * x441)));
                                                                                        evalcond[8] = ((((-1.0) * new_r01 * x441)) + ((new_r11 * x434)));
                                                                                        evalcond[9] = ((1.0) + (((-1.0) * new_r00 * x441)) + ((new_r10 * x434)));
                                                                                        evalcond[10] = (((cj1 * x438)) + ((cj1 * x440)));
                                                                                        evalcond[11] = ((((-1.0) * x436)) + x444 + x443);
                                                                                        evalcond[12] = ((((-1.0) * x437)) + x439 + x442);
                                                                                        evalcond[13] = ((((-1.0) * x436 * x438)) + (((-1.0) * x436 * x440)));
                                                                                        evalcond[14] = (((cj1 * x444)) + ((cj1 * x443)) + (((-1.0) * new_r22 * x436)));
                                                                                        evalcond[15] = ((-1.0) + ((cj1 * x439)) + ((cj1 * x442)) + (sj1 * sj1));
                                                                                        evalcond[16] = ((((-1.0) * x436 * x439)) + (((-1.0) * x436 * x442)) + (((-1.0) * new_r21 * x437)));
                                                                                        evalcond[17] = ((1.0) + (((-1.0) * x436 * x444)) + (((-1.0) * x436 * x443)) + (((-1.0) * new_r22 * x437)));
                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                        vinfos[0].jointtype = 1;
                                                                                        vinfos[0].foffset = j0;
                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                        vinfos[1].jointtype = 1;
                                                                                        vinfos[1].foffset = j1;
                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                        vinfos[2].jointtype = 1;
                                                                                        vinfos[2].foffset = j2;
                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                        vinfos[3].jointtype = 1;
                                                                                        vinfos[3].foffset = j3;
                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j4;
                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j5;
                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                        vinfos[6].jointtype = 1;
                                                                                        vinfos[6].foffset = j6;
                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                                            evalcond[1] = new_r20;
                                                                            evalcond[2] = new_r02;
                                                                            evalcond[3] = new_r12;
                                                                            evalcond[4] = new_r21;
                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                                            {
                                                                                bgotonextstatement = false;
                                                                                {
                                                                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                    bool j0valid[1] = {false};
                                                                                    _nj0 = 1;
                                                                                    IkReal x445 = ((1.0) * sj2);
                                                                                    if (IKabs(((((-1.0) * new_r00 * x445)) + (((-1.0) * cj2 * new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * new_r01 * x445)) + ((cj2 * new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * new_r00 * x445)) + (((-1.0) * cj2 * new_r01)))) + IKsqr(((((-1.0) * new_r01 * x445)) + ((cj2 * new_r00)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                    j0array[0] = IKatan2(((((-1.0) * new_r00 * x445)) + (((-1.0) * cj2 * new_r01))), ((((-1.0) * new_r01 * x445)) + ((cj2 * new_r00))));
                                                                                    sj0array[0] = IKsin(j0array[0]);
                                                                                    cj0array[0] = IKcos(j0array[0]);
                                                                                    if (j0array[0] > IKPI)
                                                                                    {
                                                                                        j0array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j0array[0] < -IKPI)
                                                                                    {
                                                                                        j0array[0] += IK2PI;
                                                                                    }
                                                                                    j0valid[0] = true;
                                                                                    for (int ij0 = 0; ij0 < 1; ++ij0)
                                                                                    {
                                                                                        if (!j0valid[ij0])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij0[0] = ij0;
                                                                                        _ij0[1] = -1;
                                                                                        for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                                                                        {
                                                                                            if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j0valid[iij0] = false;
                                                                                                _ij0[1] = iij0;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j0 = j0array[ij0];
                                                                                        cj0 = cj0array[ij0];
                                                                                        sj0 = sj0array[ij0];
                                                                                        {
                                                                                            IkReal evalcond[8];
                                                                                            IkReal x446 = IKcos(j0);
                                                                                            IkReal x447 = IKsin(j0);
                                                                                            IkReal x448 = ((1.0) * cj2);
                                                                                            IkReal x449 = ((1.0) * sj2);
                                                                                            IkReal x450 = (sj2 * x447);
                                                                                            IkReal x451 = ((1.0) * x447);
                                                                                            IkReal x452 = (x446 * x448);
                                                                                            evalcond[0] = (((new_r01 * x446)) + sj2 + ((new_r11 * x447)));
                                                                                            evalcond[1] = (((cj2 * x447)) + ((sj2 * x446)) + new_r01);
                                                                                            evalcond[2] = ((((-1.0) * x452)) + x450 + new_r00);
                                                                                            evalcond[3] = ((((-1.0) * x452)) + x450 + new_r11);
                                                                                            evalcond[4] = (((new_r00 * x446)) + (((-1.0) * x448)) + ((new_r10 * x447)));
                                                                                            evalcond[5] = ((((-1.0) * x447 * x448)) + new_r10 + (((-1.0) * x446 * x449)));
                                                                                            evalcond[6] = ((((-1.0) * x449)) + (((-1.0) * new_r00 * x451)) + ((new_r10 * x446)));
                                                                                            evalcond[7] = ((((-1.0) * x448)) + (((-1.0) * new_r01 * x451)) + ((new_r11 * x446)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                            vinfos[0].jointtype = 1;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                            vinfos[1].jointtype = 1;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                            vinfos[2].jointtype = 1;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                            vinfos[3].jointtype = 1;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                            vinfos[6].jointtype = 1;
                                                                                            vinfos[6].foffset = j6;
                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                                                evalcond[1] = new_r20;
                                                                                evalcond[2] = new_r02;
                                                                                evalcond[3] = new_r12;
                                                                                evalcond[4] = new_r21;
                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                                                {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                        IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                        bool j0valid[1] = {false};
                                                                                        _nj0 = 1;
                                                                                        IkReal x453 = ((1.0) * new_r00);
                                                                                        if (IKabs(((((-1.0) * sj2 * x453)) + (((-1.0) * cj2 * new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01 * sj2)) + (((-1.0) * cj2 * x453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * sj2 * x453)) + (((-1.0) * cj2 * new_r01)))) + IKsqr((((new_r01 * sj2)) + (((-1.0) * cj2 * x453)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                        j0array[0] = IKatan2(((((-1.0) * sj2 * x453)) + (((-1.0) * cj2 * new_r01))), (((new_r01 * sj2)) + (((-1.0) * cj2 * x453))));
                                                                                        sj0array[0] = IKsin(j0array[0]);
                                                                                        cj0array[0] = IKcos(j0array[0]);
                                                                                        if (j0array[0] > IKPI)
                                                                                        {
                                                                                            j0array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j0array[0] < -IKPI)
                                                                                        {
                                                                                            j0array[0] += IK2PI;
                                                                                        }
                                                                                        j0valid[0] = true;
                                                                                        for (int ij0 = 0; ij0 < 1; ++ij0)
                                                                                        {
                                                                                            if (!j0valid[ij0])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij0[0] = ij0;
                                                                                            _ij0[1] = -1;
                                                                                            for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                                                                            {
                                                                                                if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j0valid[iij0] = false;
                                                                                                    _ij0[1] = iij0;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j0 = j0array[ij0];
                                                                                            cj0 = cj0array[ij0];
                                                                                            sj0 = sj0array[ij0];
                                                                                            {
                                                                                                IkReal evalcond[8];
                                                                                                IkReal x454 = IKcos(j0);
                                                                                                IkReal x455 = IKsin(j0);
                                                                                                IkReal x456 = ((1.0) * sj2);
                                                                                                IkReal x457 = (cj2 * x455);
                                                                                                IkReal x458 = (sj2 * x455);
                                                                                                IkReal x459 = ((1.0) * x454);
                                                                                                IkReal x460 = ((1.0) * x455);
                                                                                                IkReal x461 = (x454 * x456);
                                                                                                evalcond[0] = (((new_r10 * x455)) + cj2 + ((new_r00 * x454)));
                                                                                                evalcond[1] = (((cj2 * x454)) + x458 + new_r00);
                                                                                                evalcond[2] = ((((-1.0) * x461)) + x457 + new_r01);
                                                                                                evalcond[3] = ((((-1.0) * x461)) + x457 + new_r10);
                                                                                                evalcond[4] = (((new_r11 * x455)) + ((new_r01 * x454)) + (((-1.0) * x456)));
                                                                                                evalcond[5] = ((((-1.0) * x455 * x456)) + new_r11 + (((-1.0) * cj2 * x459)));
                                                                                                evalcond[6] = (((new_r10 * x454)) + (((-1.0) * x456)) + (((-1.0) * new_r00 * x460)));
                                                                                                evalcond[7] = (((new_r11 * x454)) + (((-1.0) * new_r01 * x460)) + (((-1.0) * cj2)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                vinfos[0].jointtype = 1;
                                                                                                vinfos[0].foffset = j0;
                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                vinfos[1].jointtype = 1;
                                                                                                vinfos[1].foffset = j1;
                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                vinfos[2].jointtype = 1;
                                                                                                vinfos[2].foffset = j2;
                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                vinfos[3].jointtype = 1;
                                                                                                vinfos[3].foffset = j3;
                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j4;
                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j5;
                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                vinfos[6].jointtype = 1;
                                                                                                vinfos[6].foffset = j6;
                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                std::vector<int> vfree(0);
                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } while (0);
                                                                            if (bgotonextstatement)
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                    evalcond[0] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                    {
                                                                                        bgotonextstatement = false;
                                                                                        {
                                                                                            IkReal j0eval[1];
                                                                                            new_r02 = 0;
                                                                                            new_r12 = 0;
                                                                                            new_r20 = 0;
                                                                                            new_r21 = 0;
                                                                                            j0eval[0] = ((IKabs(new_r11)) + (IKabs(new_r01)));
                                                                                            if (IKabs(j0eval[0]) < 0.0000010000000000)
                                                                                            {
                                                                                                {
                                                                                                    IkReal j0eval[1];
                                                                                                    new_r02 = 0;
                                                                                                    new_r12 = 0;
                                                                                                    new_r20 = 0;
                                                                                                    new_r21 = 0;
                                                                                                    j0eval[0] = ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                                                                    if (IKabs(j0eval[0]) < 0.0000010000000000)
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j0eval[1];
                                                                                                            new_r02 = 0;
                                                                                                            new_r12 = 0;
                                                                                                            new_r20 = 0;
                                                                                                            new_r21 = 0;
                                                                                                            j0eval[0] = ((IKabs((new_r11 * new_r22))) + (IKabs((new_r01 * new_r22))));
                                                                                                            if (IKabs(j0eval[0]) < 0.0000010000000000)
                                                                                                            {
                                                                                                                continue; // no branches [j0]
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j0array[2], cj0array[2], sj0array[2];
                                                                                                                    bool j0valid[2] = {false};
                                                                                                                    _nj0 = 2;
                                                                                                                    CheckValue<IkReal> x463 = IKatan2WithCheck(IkReal((new_r01 * new_r22)), IkReal((new_r11 * new_r22)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                    if (!x463.valid)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    IkReal x462 = x463.value;
                                                                                                                    j0array[0] = ((-1.0) * x462);
                                                                                                                    sj0array[0] = IKsin(j0array[0]);
                                                                                                                    cj0array[0] = IKcos(j0array[0]);
                                                                                                                    j0array[1] = ((3.14159265358979) + (((-1.0) * x462)));
                                                                                                                    sj0array[1] = IKsin(j0array[1]);
                                                                                                                    cj0array[1] = IKcos(j0array[1]);
                                                                                                                    if (j0array[0] > IKPI)
                                                                                                                    {
                                                                                                                        j0array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if (j0array[0] < -IKPI)
                                                                                                                    {
                                                                                                                        j0array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j0valid[0] = true;
                                                                                                                    if (j0array[1] > IKPI)
                                                                                                                    {
                                                                                                                        j0array[1] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if (j0array[1] < -IKPI)
                                                                                                                    {
                                                                                                                        j0array[1] += IK2PI;
                                                                                                                    }
                                                                                                                    j0valid[1] = true;
                                                                                                                    for (int ij0 = 0; ij0 < 2; ++ij0)
                                                                                                                    {
                                                                                                                        if (!j0valid[ij0])
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij0[0] = ij0;
                                                                                                                        _ij0[1] = -1;
                                                                                                                        for (int iij0 = ij0 + 1; iij0 < 2; ++iij0)
                                                                                                                        {
                                                                                                                            if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                                                            {
                                                                                                                                j0valid[iij0] = false;
                                                                                                                                _ij0[1] = iij0;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j0 = j0array[ij0];
                                                                                                                        cj0 = cj0array[ij0];
                                                                                                                        sj0 = sj0array[ij0];
                                                                                                                        {
                                                                                                                            IkReal evalcond[5];
                                                                                                                            IkReal x464 = IKcos(j0);
                                                                                                                            IkReal x465 = IKsin(j0);
                                                                                                                            IkReal x466 = (new_r10 * x465);
                                                                                                                            IkReal x467 = ((1.0) * x465);
                                                                                                                            IkReal x468 = (new_r00 * x464);
                                                                                                                            evalcond[0] = (((new_r11 * x465)) + ((new_r01 * x464)));
                                                                                                                            evalcond[1] = (x468 + x466);
                                                                                                                            evalcond[2] = (((new_r10 * x464)) + (((-1.0) * new_r00 * x467)));
                                                                                                                            evalcond[3] = (((new_r11 * x464)) + (((-1.0) * new_r01 * x467)));
                                                                                                                            evalcond[4] = (((new_r22 * x466)) + ((new_r22 * x468)));
                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                            std::vector<int> vfree(0);
                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j0array[2], cj0array[2], sj0array[2];
                                                                                                            bool j0valid[2] = {false};
                                                                                                            _nj0 = 2;
                                                                                                            CheckValue<IkReal> x470 = IKatan2WithCheck(IkReal(new_r00), IkReal(new_r10), IKFAST_ATAN2_MAGTHRESH);
                                                                                                            if (!x470.valid)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            IkReal x469 = x470.value;
                                                                                                            j0array[0] = ((-1.0) * x469);
                                                                                                            sj0array[0] = IKsin(j0array[0]);
                                                                                                            cj0array[0] = IKcos(j0array[0]);
                                                                                                            j0array[1] = ((3.14159265358979) + (((-1.0) * x469)));
                                                                                                            sj0array[1] = IKsin(j0array[1]);
                                                                                                            cj0array[1] = IKcos(j0array[1]);
                                                                                                            if (j0array[0] > IKPI)
                                                                                                            {
                                                                                                                j0array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if (j0array[0] < -IKPI)
                                                                                                            {
                                                                                                                j0array[0] += IK2PI;
                                                                                                            }
                                                                                                            j0valid[0] = true;
                                                                                                            if (j0array[1] > IKPI)
                                                                                                            {
                                                                                                                j0array[1] -= IK2PI;
                                                                                                            }
                                                                                                            else if (j0array[1] < -IKPI)
                                                                                                            {
                                                                                                                j0array[1] += IK2PI;
                                                                                                            }
                                                                                                            j0valid[1] = true;
                                                                                                            for (int ij0 = 0; ij0 < 2; ++ij0)
                                                                                                            {
                                                                                                                if (!j0valid[ij0])
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij0[0] = ij0;
                                                                                                                _ij0[1] = -1;
                                                                                                                for (int iij0 = ij0 + 1; iij0 < 2; ++iij0)
                                                                                                                {
                                                                                                                    if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                                                    {
                                                                                                                        j0valid[iij0] = false;
                                                                                                                        _ij0[1] = iij0;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j0 = j0array[ij0];
                                                                                                                cj0 = cj0array[ij0];
                                                                                                                sj0 = sj0array[ij0];
                                                                                                                {
                                                                                                                    IkReal evalcond[5];
                                                                                                                    IkReal x471 = IKcos(j0);
                                                                                                                    IkReal x472 = IKsin(j0);
                                                                                                                    IkReal x473 = ((1.0) * x472);
                                                                                                                    IkReal x474 = (new_r11 * x472);
                                                                                                                    IkReal x475 = (new_r22 * x471);
                                                                                                                    evalcond[0] = (((new_r01 * x471)) + x474);
                                                                                                                    evalcond[1] = (((new_r10 * x471)) + (((-1.0) * new_r00 * x473)));
                                                                                                                    evalcond[2] = (((new_r11 * x471)) + (((-1.0) * new_r01 * x473)));
                                                                                                                    evalcond[3] = (((new_r01 * x475)) + ((new_r22 * x474)));
                                                                                                                    evalcond[4] = (((new_r00 * x475)) + ((new_r10 * new_r22 * x472)));
                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                {
                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                    std::vector<int> vfree(0);
                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j0array[2], cj0array[2], sj0array[2];
                                                                                                    bool j0valid[2] = {false};
                                                                                                    _nj0 = 2;
                                                                                                    CheckValue<IkReal> x477 = IKatan2WithCheck(IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (!x477.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    IkReal x476 = x477.value;
                                                                                                    j0array[0] = ((-1.0) * x476);
                                                                                                    sj0array[0] = IKsin(j0array[0]);
                                                                                                    cj0array[0] = IKcos(j0array[0]);
                                                                                                    j0array[1] = ((3.14159265358979) + (((-1.0) * x476)));
                                                                                                    sj0array[1] = IKsin(j0array[1]);
                                                                                                    cj0array[1] = IKcos(j0array[1]);
                                                                                                    if (j0array[0] > IKPI)
                                                                                                    {
                                                                                                        j0array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j0array[0] < -IKPI)
                                                                                                    {
                                                                                                        j0array[0] += IK2PI;
                                                                                                    }
                                                                                                    j0valid[0] = true;
                                                                                                    if (j0array[1] > IKPI)
                                                                                                    {
                                                                                                        j0array[1] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j0array[1] < -IKPI)
                                                                                                    {
                                                                                                        j0array[1] += IK2PI;
                                                                                                    }
                                                                                                    j0valid[1] = true;
                                                                                                    for (int ij0 = 0; ij0 < 2; ++ij0)
                                                                                                    {
                                                                                                        if (!j0valid[ij0])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij0[0] = ij0;
                                                                                                        _ij0[1] = -1;
                                                                                                        for (int iij0 = ij0 + 1; iij0 < 2; ++iij0)
                                                                                                        {
                                                                                                            if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j0valid[iij0] = false;
                                                                                                                _ij0[1] = iij0;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j0 = j0array[ij0];
                                                                                                        cj0 = cj0array[ij0];
                                                                                                        sj0 = sj0array[ij0];
                                                                                                        {
                                                                                                            IkReal evalcond[5];
                                                                                                            IkReal x478 = IKcos(j0);
                                                                                                            IkReal x479 = IKsin(j0);
                                                                                                            IkReal x480 = (new_r10 * x479);
                                                                                                            IkReal x481 = ((1.0) * x479);
                                                                                                            IkReal x482 = (new_r00 * x478);
                                                                                                            evalcond[0] = (x480 + x482);
                                                                                                            evalcond[1] = ((((-1.0) * new_r00 * x481)) + ((new_r10 * x478)));
                                                                                                            evalcond[2] = ((((-1.0) * new_r01 * x481)) + ((new_r11 * x478)));
                                                                                                            evalcond[3] = (((new_r11 * new_r22 * x479)) + ((new_r01 * new_r22 * x478)));
                                                                                                            evalcond[4] = (((new_r22 * x480)) + ((new_r22 * x482)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j3;
                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j4;
                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j5;
                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                            vinfos[6].jointtype = 1;
                                                                                                            vinfos[6].foffset = j6;
                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                            std::vector<int> vfree(0);
                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        if (1)
                                                                                        {
                                                                                            bgotonextstatement = false;
                                                                                            continue; // branch miss [j0]
                                                                                        }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j0array[1], cj0array[1], sj0array[1];
                                                                bool j0valid[1] = {false};
                                                                _nj0 = 1;
                                                                CheckValue<IkReal> x484 = IKPowWithIntegerCheck(sj1, -1);
                                                                if (!x484.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                IkReal x483 = x484.value;
                                                                CheckValue<IkReal> x485 = IKPowWithIntegerCheck(cj2, -1);
                                                                if (!x485.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                if (IKabs((x483 * (x485.value) * (((((-1.0) * new_r01 * sj1)) + (((-1.0) * cj1 * new_r02 * sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02 * x483)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x483 * (x485.value) * (((((-1.0) * new_r01 * sj1)) + (((-1.0) * cj1 * new_r02 * sj2)))))) + IKsqr((new_r02 * x483)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                    continue;
                                                                j0array[0] = IKatan2((x483 * (x485.value) * (((((-1.0) * new_r01 * sj1)) + (((-1.0) * cj1 * new_r02 * sj2))))), (new_r02 * x483));
                                                                sj0array[0] = IKsin(j0array[0]);
                                                                cj0array[0] = IKcos(j0array[0]);
                                                                if (j0array[0] > IKPI)
                                                                {
                                                                    j0array[0] -= IK2PI;
                                                                }
                                                                else if (j0array[0] < -IKPI)
                                                                {
                                                                    j0array[0] += IK2PI;
                                                                }
                                                                j0valid[0] = true;
                                                                for (int ij0 = 0; ij0 < 1; ++ij0)
                                                                {
                                                                    if (!j0valid[ij0])
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij0[0] = ij0;
                                                                    _ij0[1] = -1;
                                                                    for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                                                    {
                                                                        if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                        {
                                                                            j0valid[iij0] = false;
                                                                            _ij0[1] = iij0;
                                                                            break;
                                                                        }
                                                                    }
                                                                    j0 = j0array[ij0];
                                                                    cj0 = cj0array[ij0];
                                                                    sj0 = sj0array[ij0];
                                                                    {
                                                                        IkReal evalcond[18];
                                                                        IkReal x486 = IKcos(j0);
                                                                        IkReal x487 = IKsin(j0);
                                                                        IkReal x488 = ((1.0) * cj2);
                                                                        IkReal x489 = ((1.0) * sj1);
                                                                        IkReal x490 = ((1.0) * cj1);
                                                                        IkReal x491 = ((1.0) * sj2);
                                                                        IkReal x492 = (new_r10 * x487);
                                                                        IkReal x493 = (new_r01 * x486);
                                                                        IkReal x494 = (new_r00 * x486);
                                                                        IkReal x495 = ((1.0) * x487);
                                                                        IkReal x496 = (new_r11 * x487);
                                                                        IkReal x497 = (new_r12 * x487);
                                                                        IkReal x498 = (sj2 * x487);
                                                                        IkReal x499 = (cj1 * x486);
                                                                        IkReal x500 = (cj2 * x487);
                                                                        IkReal x501 = (new_r02 * x486);
                                                                        evalcond[0] = ((((-1.0) * x486 * x489)) + new_r02);
                                                                        evalcond[1] = ((((-1.0) * x487 * x489)) + new_r12);
                                                                        evalcond[2] = ((((-1.0) * new_r02 * x495)) + ((new_r12 * x486)));
                                                                        evalcond[3] = (x500 + ((sj2 * x499)) + new_r01);
                                                                        evalcond[4] = ((((-1.0) * x489)) + x497 + x501);
                                                                        evalcond[5] = (((cj1 * sj2)) + x493 + x496);
                                                                        evalcond[6] = ((((-1.0) * x488 * x499)) + x498 + new_r00);
                                                                        evalcond[7] = ((((-1.0) * x486 * x488)) + ((cj1 * x498)) + new_r11);
                                                                        evalcond[8] = ((((-1.0) * new_r00 * x495)) + (((-1.0) * x491)) + ((new_r10 * x486)));
                                                                        evalcond[9] = ((((-1.0) * new_r01 * x495)) + (((-1.0) * x488)) + ((new_r11 * x486)));
                                                                        evalcond[10] = ((((-1.0) * cj1 * x488)) + x492 + x494);
                                                                        evalcond[11] = ((((-1.0) * x486 * x491)) + (((-1.0) * cj1 * x487 * x488)) + new_r10);
                                                                        evalcond[12] = (((new_r02 * x499)) + ((cj1 * x497)) + (((-1.0) * new_r22 * x489)));
                                                                        evalcond[13] = ((((-1.0) * new_r21 * x489)) + sj2 + ((cj1 * x493)) + ((cj1 * x496)));
                                                                        evalcond[14] = ((((-1.0) * new_r20 * x490)) + (((-1.0) * x489 * x492)) + (((-1.0) * x489 * x494)));
                                                                        evalcond[15] = ((((-1.0) * x489 * x496)) + (((-1.0) * x489 * x493)) + (((-1.0) * new_r21 * x490)));
                                                                        evalcond[16] = ((1.0) + (((-1.0) * x489 * x501)) + (((-1.0) * x489 * x497)) + (((-1.0) * new_r22 * x490)));
                                                                        evalcond[17] = ((((-1.0) * x488)) + (((-1.0) * new_r20 * x489)) + ((cj1 * x492)) + ((cj1 * x494)));
                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH)
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j0;
                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                        vinfos[0].maxsolutions = _nj0;
                                                                        vinfos[1].jointtype = 1;
                                                                        vinfos[1].foffset = j1;
                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                        vinfos[1].maxsolutions = _nj1;
                                                                        vinfos[2].jointtype = 1;
                                                                        vinfos[2].foffset = j2;
                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                        vinfos[2].maxsolutions = _nj2;
                                                                        vinfos[3].jointtype = 1;
                                                                        vinfos[3].foffset = j3;
                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                        vinfos[3].maxsolutions = _nj3;
                                                                        vinfos[4].jointtype = 1;
                                                                        vinfos[4].foffset = j4;
                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                        vinfos[4].maxsolutions = _nj4;
                                                                        vinfos[5].jointtype = 1;
                                                                        vinfos[5].foffset = j5;
                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                        vinfos[5].maxsolutions = _nj5;
                                                                        vinfos[6].jointtype = 1;
                                                                        vinfos[6].foffset = j6;
                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                        vinfos[6].maxsolutions = _nj6;
                                                                        std::vector<int> vfree(0);
                                                                        solutions.AddSolution(vinfos, vfree);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j0array[1], cj0array[1], sj0array[1];
                                                        bool j0valid[1] = {false};
                                                        _nj0 = 1;
                                                        CheckValue<IkReal> x502 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                        if (!x502.valid)
                                                        {
                                                            continue;
                                                        }
                                                        CheckValue<IkReal> x503 = IKatan2WithCheck(IkReal(new_r12), IkReal(new_r02), IKFAST_ATAN2_MAGTHRESH);
                                                        if (!x503.valid)
                                                        {
                                                            continue;
                                                        }
                                                        j0array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x502.value))) + (x503.value));
                                                        sj0array[0] = IKsin(j0array[0]);
                                                        cj0array[0] = IKcos(j0array[0]);
                                                        if (j0array[0] > IKPI)
                                                        {
                                                            j0array[0] -= IK2PI;
                                                        }
                                                        else if (j0array[0] < -IKPI)
                                                        {
                                                            j0array[0] += IK2PI;
                                                        }
                                                        j0valid[0] = true;
                                                        for (int ij0 = 0; ij0 < 1; ++ij0)
                                                        {
                                                            if (!j0valid[ij0])
                                                            {
                                                                continue;
                                                            }
                                                            _ij0[0] = ij0;
                                                            _ij0[1] = -1;
                                                            for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                                            {
                                                                if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                {
                                                                    j0valid[iij0] = false;
                                                                    _ij0[1] = iij0;
                                                                    break;
                                                                }
                                                            }
                                                            j0 = j0array[ij0];
                                                            cj0 = cj0array[ij0];
                                                            sj0 = sj0array[ij0];
                                                            {
                                                                IkReal evalcond[18];
                                                                IkReal x504 = IKcos(j0);
                                                                IkReal x505 = IKsin(j0);
                                                                IkReal x506 = ((1.0) * cj2);
                                                                IkReal x507 = ((1.0) * sj1);
                                                                IkReal x508 = ((1.0) * cj1);
                                                                IkReal x509 = ((1.0) * sj2);
                                                                IkReal x510 = (new_r10 * x505);
                                                                IkReal x511 = (new_r01 * x504);
                                                                IkReal x512 = (new_r00 * x504);
                                                                IkReal x513 = ((1.0) * x505);
                                                                IkReal x514 = (new_r11 * x505);
                                                                IkReal x515 = (new_r12 * x505);
                                                                IkReal x516 = (sj2 * x505);
                                                                IkReal x517 = (cj1 * x504);
                                                                IkReal x518 = (cj2 * x505);
                                                                IkReal x519 = (new_r02 * x504);
                                                                evalcond[0] = ((((-1.0) * x504 * x507)) + new_r02);
                                                                evalcond[1] = ((((-1.0) * x505 * x507)) + new_r12);
                                                                evalcond[2] = (((new_r12 * x504)) + (((-1.0) * new_r02 * x513)));
                                                                evalcond[3] = (x518 + ((sj2 * x517)) + new_r01);
                                                                evalcond[4] = ((((-1.0) * x507)) + x519 + x515);
                                                                evalcond[5] = (((cj1 * sj2)) + x514 + x511);
                                                                evalcond[6] = (x516 + (((-1.0) * x506 * x517)) + new_r00);
                                                                evalcond[7] = (((cj1 * x516)) + (((-1.0) * x504 * x506)) + new_r11);
                                                                evalcond[8] = ((((-1.0) * x509)) + ((new_r10 * x504)) + (((-1.0) * new_r00 * x513)));
                                                                evalcond[9] = ((((-1.0) * x506)) + ((new_r11 * x504)) + (((-1.0) * new_r01 * x513)));
                                                                evalcond[10] = (x512 + x510 + (((-1.0) * cj1 * x506)));
                                                                evalcond[11] = ((((-1.0) * cj1 * x505 * x506)) + (((-1.0) * x504 * x509)) + new_r10);
                                                                evalcond[12] = (((new_r02 * x517)) + ((cj1 * x515)) + (((-1.0) * new_r22 * x507)));
                                                                evalcond[13] = ((((-1.0) * new_r21 * x507)) + sj2 + ((cj1 * x514)) + ((cj1 * x511)));
                                                                evalcond[14] = ((((-1.0) * new_r20 * x508)) + (((-1.0) * x507 * x510)) + (((-1.0) * x507 * x512)));
                                                                evalcond[15] = ((((-1.0) * new_r21 * x508)) + (((-1.0) * x507 * x511)) + (((-1.0) * x507 * x514)));
                                                                evalcond[16] = ((1.0) + (((-1.0) * new_r22 * x508)) + (((-1.0) * x507 * x515)) + (((-1.0) * x507 * x519)));
                                                                evalcond[17] = ((((-1.0) * new_r20 * x507)) + (((-1.0) * x506)) + ((cj1 * x512)) + ((cj1 * x510)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH)
                                                                {
                                                                    continue;
                                                                }
                                                            }

                                                            {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 1;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            {
                                IkReal j0array[1], cj0array[1], sj0array[1];
                                bool j0valid[1] = {false};
                                _nj0 = 1;
                                CheckValue<IkReal> x520 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                if (!x520.valid)
                                {
                                    continue;
                                }
                                CheckValue<IkReal> x521 = IKatan2WithCheck(IkReal(new_r12), IkReal(new_r02), IKFAST_ATAN2_MAGTHRESH);
                                if (!x521.valid)
                                {
                                    continue;
                                }
                                j0array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x520.value))) + (x521.value));
                                sj0array[0] = IKsin(j0array[0]);
                                cj0array[0] = IKcos(j0array[0]);
                                if (j0array[0] > IKPI)
                                {
                                    j0array[0] -= IK2PI;
                                }
                                else if (j0array[0] < -IKPI)
                                {
                                    j0array[0] += IK2PI;
                                }
                                j0valid[0] = true;
                                for (int ij0 = 0; ij0 < 1; ++ij0)
                                {
                                    if (!j0valid[ij0])
                                    {
                                        continue;
                                    }
                                    _ij0[0] = ij0;
                                    _ij0[1] = -1;
                                    for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                    {
                                        if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                        {
                                            j0valid[iij0] = false;
                                            _ij0[1] = iij0;
                                            break;
                                        }
                                    }
                                    j0 = j0array[ij0];
                                    cj0 = cj0array[ij0];
                                    sj0 = sj0array[ij0];
                                    {
                                        IkReal evalcond[8];
                                        IkReal x522 = IKcos(j0);
                                        IkReal x523 = IKsin(j0);
                                        IkReal x524 = ((1.0) * cj1);
                                        IkReal x525 = ((1.0) * sj1);
                                        IkReal x526 = (new_r12 * x523);
                                        IkReal x527 = (new_r02 * x522);
                                        evalcond[0] = ((((-1.0) * x522 * x525)) + new_r02);
                                        evalcond[1] = ((((-1.0) * x523 * x525)) + new_r12);
                                        evalcond[2] = (((new_r12 * x522)) + (((-1.0) * new_r02 * x523)));
                                        evalcond[3] = ((((-1.0) * x525)) + x526 + x527);
                                        evalcond[4] = ((((-1.0) * new_r22 * x525)) + ((cj1 * x526)) + ((cj1 * x527)));
                                        evalcond[5] = ((((-1.0) * new_r10 * x523 * x525)) + (((-1.0) * new_r20 * x524)) + (((-1.0) * new_r00 * x522 * x525)));
                                        evalcond[6] = ((((-1.0) * new_r11 * x523 * x525)) + (((-1.0) * new_r01 * x522 * x525)) + (((-1.0) * new_r21 * x524)));
                                        evalcond[7] = ((1.0) + (((-1.0) * new_r22 * x524)) + (((-1.0) * x525 * x526)) + (((-1.0) * x525 * x527)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                        {
                                            continue;
                                        }
                                    }

                                    {
                                        IkReal j2eval[3];
                                        j2eval[0] = sj1;
                                        j2eval[1] = IKsign(sj1);
                                        j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                        if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                        {
                                            {
                                                IkReal j2eval[2];
                                                j2eval[0] = sj0;
                                                j2eval[1] = sj1;
                                                if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                {
                                                    {
                                                        IkReal j2eval[3];
                                                        j2eval[0] = cj0;
                                                        j2eval[1] = cj1;
                                                        j2eval[2] = sj1;
                                                        if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                        {
                                                            {
                                                                IkReal evalcond[5];
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                                    evalcond[1] = new_r02;
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                    {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                            IkReal j2eval[3];
                                                                            sj0 = 1.0;
                                                                            cj0 = 0;
                                                                            j0 = 1.5707963267949;
                                                                            j2eval[0] = sj1;
                                                                            j2eval[1] = IKsign(sj1);
                                                                            j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                            {
                                                                                {
                                                                                    IkReal j2eval[3];
                                                                                    sj0 = 1.0;
                                                                                    cj0 = 0;
                                                                                    j0 = 1.5707963267949;
                                                                                    j2eval[0] = cj1;
                                                                                    j2eval[1] = IKsign(cj1);
                                                                                    j2eval[2] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                                    {
                                                                                        {
                                                                                            IkReal j2eval[1];
                                                                                            sj0 = 1.0;
                                                                                            cj0 = 0;
                                                                                            j0 = 1.5707963267949;
                                                                                            j2eval[0] = sj1;
                                                                                            if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                            {
                                                                                                {
                                                                                                    IkReal evalcond[4];
                                                                                                    bool bgotonextstatement = true;
                                                                                                    do
                                                                                                    {
                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                                                                        evalcond[1] = new_r20;
                                                                                                        evalcond[2] = new_r12;
                                                                                                        evalcond[3] = new_r21;
                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                        {
                                                                                                            bgotonextstatement = false;
                                                                                                            {
                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                bool j2valid[1] = {false};
                                                                                                                _nj2 = 1;
                                                                                                                if (IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r11)) + IKsqr(new_r10) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                    continue;
                                                                                                                j2array[0] = IKatan2(((-1.0) * new_r11), new_r10);
                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                if (j2array[0] > IKPI)
                                                                                                                {
                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                }
                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                {
                                                                                                                    j2array[0] += IK2PI;
                                                                                                                }
                                                                                                                j2valid[0] = true;
                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                {
                                                                                                                    if (!j2valid[ij2])
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    _ij2[0] = ij2;
                                                                                                                    _ij2[1] = -1;
                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                    {
                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                        {
                                                                                                                            j2valid[iij2] = false;
                                                                                                                            _ij2[1] = iij2;
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    j2 = j2array[ij2];
                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                    {
                                                                                                                        IkReal evalcond[4];
                                                                                                                        IkReal x528 = IKsin(j2);
                                                                                                                        IkReal x529 = ((1.0) * (IKcos(j2)));
                                                                                                                        evalcond[0] = (x528 + new_r11);
                                                                                                                        evalcond[1] = ((((-1.0) * x529)) + new_r10);
                                                                                                                        evalcond[2] = ((((-1.0) * x528)) + (((-1.0) * new_r00)));
                                                                                                                        evalcond[3] = ((((-1.0) * x529)) + (((-1.0) * new_r01)));
                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    {
                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                        std::vector<int> vfree(0);
                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    } while (0);
                                                                                                    if (bgotonextstatement)
                                                                                                    {
                                                                                                        bool bgotonextstatement = true;
                                                                                                        do
                                                                                                        {
                                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                                                                            evalcond[1] = new_r20;
                                                                                                            evalcond[2] = new_r12;
                                                                                                            evalcond[3] = new_r21;
                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                            {
                                                                                                                bgotonextstatement = false;
                                                                                                                {
                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                    bool j2valid[1] = {false};
                                                                                                                    _nj2 = 1;
                                                                                                                    if (IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11) + IKsqr(((-1.0) * new_r10)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                        continue;
                                                                                                                    j2array[0] = IKatan2(new_r11, ((-1.0) * new_r10));
                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j2valid[0] = true;
                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                    {
                                                                                                                        if (!j2valid[ij2])
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij2[0] = ij2;
                                                                                                                        _ij2[1] = -1;
                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                        {
                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                            {
                                                                                                                                j2valid[iij2] = false;
                                                                                                                                _ij2[1] = iij2;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j2 = j2array[ij2];
                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                        {
                                                                                                                            IkReal evalcond[4];
                                                                                                                            IkReal x530 = IKcos(j2);
                                                                                                                            IkReal x531 = ((1.0) * (IKsin(j2)));
                                                                                                                            evalcond[0] = (x530 + new_r10);
                                                                                                                            evalcond[1] = ((((-1.0) * x531)) + new_r11);
                                                                                                                            evalcond[2] = ((((-1.0) * x531)) + (((-1.0) * new_r00)));
                                                                                                                            evalcond[3] = ((((-1.0) * x530)) + (((-1.0) * new_r01)));
                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                            std::vector<int> vfree(0);
                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } while (0);
                                                                                                        if (bgotonextstatement)
                                                                                                        {
                                                                                                            bool bgotonextstatement = true;
                                                                                                            do
                                                                                                            {
                                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                evalcond[1] = new_r22;
                                                                                                                evalcond[2] = new_r11;
                                                                                                                evalcond[3] = new_r10;
                                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                {
                                                                                                                    bgotonextstatement = false;
                                                                                                                    {
                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                        bool j2valid[1] = {false};
                                                                                                                        _nj2 = 1;
                                                                                                                        if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                            continue;
                                                                                                                        j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                        {
                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                        {
                                                                                                                            j2array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j2valid[0] = true;
                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                        {
                                                                                                                            if (!j2valid[ij2])
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij2[0] = ij2;
                                                                                                                            _ij2[1] = -1;
                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                            {
                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                {
                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j2 = j2array[ij2];
                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                            {
                                                                                                                                IkReal evalcond[4];
                                                                                                                                IkReal x532 = IKcos(j2);
                                                                                                                                IkReal x533 = ((1.0) * (IKsin(j2)));
                                                                                                                                evalcond[0] = (x532 + new_r20);
                                                                                                                                evalcond[1] = ((((-1.0) * x533)) + new_r21);
                                                                                                                                evalcond[2] = ((((-1.0) * x533)) + (((-1.0) * new_r00)));
                                                                                                                                evalcond[3] = ((((-1.0) * x532)) + (((-1.0) * new_r01)));
                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            {
                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            } while (0);
                                                                                                            if (bgotonextstatement)
                                                                                                            {
                                                                                                                bool bgotonextstatement = true;
                                                                                                                do
                                                                                                                {
                                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                    evalcond[1] = new_r22;
                                                                                                                    evalcond[2] = new_r11;
                                                                                                                    evalcond[3] = new_r10;
                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                    {
                                                                                                                        bgotonextstatement = false;
                                                                                                                        {
                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                            bool j2valid[1] = {false};
                                                                                                                            _nj2 = 1;
                                                                                                                            if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                continue;
                                                                                                                            j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                            {
                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                            }
                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                            {
                                                                                                                                j2array[0] += IK2PI;
                                                                                                                            }
                                                                                                                            j2valid[0] = true;
                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                            {
                                                                                                                                if (!j2valid[ij2])
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                _ij2[0] = ij2;
                                                                                                                                _ij2[1] = -1;
                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                {
                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                    {
                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                        break;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                j2 = j2array[ij2];
                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                {
                                                                                                                                    IkReal evalcond[4];
                                                                                                                                    IkReal x534 = IKsin(j2);
                                                                                                                                    IkReal x535 = ((1.0) * (IKcos(j2)));
                                                                                                                                    evalcond[0] = (x534 + new_r21);
                                                                                                                                    evalcond[1] = ((((-1.0) * x535)) + new_r20);
                                                                                                                                    evalcond[2] = ((((-1.0) * x534)) + (((-1.0) * new_r00)));
                                                                                                                                    evalcond[3] = ((((-1.0) * x535)) + (((-1.0) * new_r01)));
                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                }

                                                                                                                                {
                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } while (0);
                                                                                                                if (bgotonextstatement)
                                                                                                                {
                                                                                                                    bool bgotonextstatement = true;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                        {
                                                                                                                            bgotonextstatement = false;
                                                                                                                            {
                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                _nj2 = 1;
                                                                                                                                if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r00)) + IKsqr(((-1.0) * new_r01)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                    continue;
                                                                                                                                j2array[0] = IKatan2(((-1.0) * new_r00), ((-1.0) * new_r01));
                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                {
                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                }
                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                {
                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                }
                                                                                                                                j2valid[0] = true;
                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                {
                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                    _ij2[1] = -1;
                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                    {
                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                        {
                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                    {
                                                                                                                                        IkReal evalcond[6];
                                                                                                                                        IkReal x536 = IKsin(j2);
                                                                                                                                        IkReal x537 = IKcos(j2);
                                                                                                                                        IkReal x538 = ((-1.0) * x537);
                                                                                                                                        evalcond[0] = x536;
                                                                                                                                        evalcond[1] = (new_r22 * x536);
                                                                                                                                        evalcond[2] = x538;
                                                                                                                                        evalcond[3] = (new_r22 * x538);
                                                                                                                                        evalcond[4] = ((((-1.0) * x536)) + (((-1.0) * new_r00)));
                                                                                                                                        evalcond[5] = ((((-1.0) * x537)) + (((-1.0) * new_r01)));
                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                    {
                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } while (0);
                                                                                                                    if (bgotonextstatement)
                                                                                                                    {
                                                                                                                        bool bgotonextstatement = true;
                                                                                                                        do
                                                                                                                        {
                                                                                                                            if (1)
                                                                                                                            {
                                                                                                                                bgotonextstatement = false;
                                                                                                                                continue; // branch miss [j2]
                                                                                                                            }
                                                                                                                        } while (0);
                                                                                                                        if (bgotonextstatement)
                                                                                                                        {
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                    bool j2valid[1] = {false};
                                                                                                    _nj2 = 1;
                                                                                                    CheckValue<IkReal> x539 = IKPowWithIntegerCheck(sj1, -1);
                                                                                                    if (!x539.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * (x539.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r00)) + IKsqr(((-1.0) * new_r20 * (x539.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                        continue;
                                                                                                    j2array[0] = IKatan2(((-1.0) * new_r00), ((-1.0) * new_r20 * (x539.value)));
                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                    if (j2array[0] > IKPI)
                                                                                                    {
                                                                                                        j2array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                    {
                                                                                                        j2array[0] += IK2PI;
                                                                                                    }
                                                                                                    j2valid[0] = true;
                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                    {
                                                                                                        if (!j2valid[ij2])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij2[0] = ij2;
                                                                                                        _ij2[1] = -1;
                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                        {
                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j2valid[iij2] = false;
                                                                                                                _ij2[1] = iij2;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j2 = j2array[ij2];
                                                                                                        cj2 = cj2array[ij2];
                                                                                                        sj2 = sj2array[ij2];
                                                                                                        {
                                                                                                            IkReal evalcond[8];
                                                                                                            IkReal x540 = IKsin(j2);
                                                                                                            IkReal x541 = IKcos(j2);
                                                                                                            IkReal x542 = ((1.0) * sj1);
                                                                                                            IkReal x543 = ((1.0) * x541);
                                                                                                            evalcond[0] = (((sj1 * x541)) + new_r20);
                                                                                                            evalcond[1] = (((cj1 * x540)) + new_r11);
                                                                                                            evalcond[2] = ((((-1.0) * x540 * x542)) + new_r21);
                                                                                                            evalcond[3] = ((((-1.0) * cj1 * x543)) + new_r10);
                                                                                                            evalcond[4] = ((((-1.0) * x540)) + (((-1.0) * new_r00)));
                                                                                                            evalcond[5] = ((((-1.0) * x543)) + (((-1.0) * new_r01)));
                                                                                                            evalcond[6] = (((cj1 * new_r11)) + (((-1.0) * new_r21 * x542)) + x540);
                                                                                                            evalcond[7] = (((cj1 * new_r10)) + (((-1.0) * new_r20 * x542)) + (((-1.0) * x543)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j3;
                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j4;
                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j5;
                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                            vinfos[6].jointtype = 1;
                                                                                                            vinfos[6].foffset = j6;
                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                            std::vector<int> vfree(0);
                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                            bool j2valid[1] = {false};
                                                                                            _nj2 = 1;
                                                                                            CheckValue<IkReal> x544 = IKPowWithIntegerCheck(IKsign(cj1), -1);
                                                                                            if (!x544.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            CheckValue<IkReal> x545 = IKatan2WithCheck(IkReal(((-1.0) * new_r11)), IkReal(new_r10), IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (!x545.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x544.value))) + (x545.value));
                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                            if (j2array[0] > IKPI)
                                                                                            {
                                                                                                j2array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j2array[0] < -IKPI)
                                                                                            {
                                                                                                j2array[0] += IK2PI;
                                                                                            }
                                                                                            j2valid[0] = true;
                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                            {
                                                                                                if (!j2valid[ij2])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij2[0] = ij2;
                                                                                                _ij2[1] = -1;
                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                {
                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j2valid[iij2] = false;
                                                                                                        _ij2[1] = iij2;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j2 = j2array[ij2];
                                                                                                cj2 = cj2array[ij2];
                                                                                                sj2 = sj2array[ij2];
                                                                                                {
                                                                                                    IkReal evalcond[8];
                                                                                                    IkReal x546 = IKsin(j2);
                                                                                                    IkReal x547 = IKcos(j2);
                                                                                                    IkReal x548 = ((1.0) * sj1);
                                                                                                    IkReal x549 = ((1.0) * x547);
                                                                                                    evalcond[0] = (((sj1 * x547)) + new_r20);
                                                                                                    evalcond[1] = (((cj1 * x546)) + new_r11);
                                                                                                    evalcond[2] = (new_r21 + (((-1.0) * x546 * x548)));
                                                                                                    evalcond[3] = ((((-1.0) * cj1 * x549)) + new_r10);
                                                                                                    evalcond[4] = ((((-1.0) * x546)) + (((-1.0) * new_r00)));
                                                                                                    evalcond[5] = ((((-1.0) * x549)) + (((-1.0) * new_r01)));
                                                                                                    evalcond[6] = (((cj1 * new_r11)) + (((-1.0) * new_r21 * x548)) + x546);
                                                                                                    evalcond[7] = (((cj1 * new_r10)) + (((-1.0) * new_r20 * x548)) + (((-1.0) * x549)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                    vinfos[0].jointtype = 1;
                                                                                                    vinfos[0].foffset = j0;
                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                    vinfos[1].jointtype = 1;
                                                                                                    vinfos[1].foffset = j1;
                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                    vinfos[2].jointtype = 1;
                                                                                                    vinfos[2].foffset = j2;
                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                    vinfos[3].jointtype = 1;
                                                                                                    vinfos[3].foffset = j3;
                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                    vinfos[4].jointtype = 1;
                                                                                                    vinfos[4].foffset = j4;
                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                    vinfos[5].jointtype = 1;
                                                                                                    vinfos[5].foffset = j5;
                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                    vinfos[6].jointtype = 1;
                                                                                                    vinfos[6].foffset = j6;
                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                    std::vector<int> vfree(0);
                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                {
                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                    bool j2valid[1] = {false};
                                                                                    _nj2 = 1;
                                                                                    CheckValue<IkReal> x550 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                                                    if (!x550.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x551 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x551.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x550.value))) + (x551.value));
                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                    if (j2array[0] > IKPI)
                                                                                    {
                                                                                        j2array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j2array[0] < -IKPI)
                                                                                    {
                                                                                        j2array[0] += IK2PI;
                                                                                    }
                                                                                    j2valid[0] = true;
                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                    {
                                                                                        if (!j2valid[ij2])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij2[0] = ij2;
                                                                                        _ij2[1] = -1;
                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                        {
                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j2valid[iij2] = false;
                                                                                                _ij2[1] = iij2;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j2 = j2array[ij2];
                                                                                        cj2 = cj2array[ij2];
                                                                                        sj2 = sj2array[ij2];
                                                                                        {
                                                                                            IkReal evalcond[8];
                                                                                            IkReal x552 = IKsin(j2);
                                                                                            IkReal x553 = IKcos(j2);
                                                                                            IkReal x554 = ((1.0) * sj1);
                                                                                            IkReal x555 = ((1.0) * x553);
                                                                                            evalcond[0] = (((sj1 * x553)) + new_r20);
                                                                                            evalcond[1] = (((cj1 * x552)) + new_r11);
                                                                                            evalcond[2] = ((((-1.0) * x552 * x554)) + new_r21);
                                                                                            evalcond[3] = ((((-1.0) * cj1 * x555)) + new_r10);
                                                                                            evalcond[4] = ((((-1.0) * x552)) + (((-1.0) * new_r00)));
                                                                                            evalcond[5] = ((((-1.0) * x555)) + (((-1.0) * new_r01)));
                                                                                            evalcond[6] = ((((-1.0) * new_r21 * x554)) + ((cj1 * new_r11)) + x552);
                                                                                            evalcond[7] = (((cj1 * new_r10)) + (((-1.0) * x555)) + (((-1.0) * new_r20 * x554)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                            vinfos[0].jointtype = 1;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                            vinfos[1].jointtype = 1;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                            vinfos[2].jointtype = 1;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                            vinfos[3].jointtype = 1;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                            vinfos[6].jointtype = 1;
                                                                                            vinfos[6].foffset = j6;
                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                } while (0);
                                                                if (bgotonextstatement)
                                                                {
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                                        evalcond[1] = new_r02;
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                        {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                bool j2valid[1] = {false};
                                                                                _nj2 = 1;
                                                                                if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00) + IKsqr(new_r01) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                    continue;
                                                                                j2array[0] = IKatan2(new_r00, new_r01);
                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                if (j2array[0] > IKPI)
                                                                                {
                                                                                    j2array[0] -= IK2PI;
                                                                                }
                                                                                else if (j2array[0] < -IKPI)
                                                                                {
                                                                                    j2array[0] += IK2PI;
                                                                                }
                                                                                j2valid[0] = true;
                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                {
                                                                                    if (!j2valid[ij2])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij2[0] = ij2;
                                                                                    _ij2[1] = -1;
                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                    {
                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j2valid[iij2] = false;
                                                                                            _ij2[1] = iij2;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j2 = j2array[ij2];
                                                                                    cj2 = cj2array[ij2];
                                                                                    sj2 = sj2array[ij2];
                                                                                    {
                                                                                        IkReal evalcond[8];
                                                                                        IkReal x556 = IKcos(j2);
                                                                                        IkReal x557 = IKsin(j2);
                                                                                        IkReal x558 = ((1.0) * sj1);
                                                                                        IkReal x559 = ((1.0) * new_r11);
                                                                                        IkReal x560 = ((1.0) * new_r10);
                                                                                        IkReal x561 = ((1.0) * x556);
                                                                                        evalcond[0] = (((sj1 * x556)) + new_r20);
                                                                                        evalcond[1] = ((((-1.0) * x557)) + new_r00);
                                                                                        evalcond[2] = (new_r01 + (((-1.0) * x561)));
                                                                                        evalcond[3] = (new_r21 + (((-1.0) * x557 * x558)));
                                                                                        evalcond[4] = (((cj1 * x557)) + (((-1.0) * x559)));
                                                                                        evalcond[5] = ((((-1.0) * cj1 * x561)) + (((-1.0) * x560)));
                                                                                        evalcond[6] = ((((-1.0) * cj1 * x559)) + (((-1.0) * new_r21 * x558)) + x557);
                                                                                        evalcond[7] = ((((-1.0) * new_r20 * x558)) + (((-1.0) * cj1 * x560)) + (((-1.0) * x561)));
                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                        vinfos[0].jointtype = 1;
                                                                                        vinfos[0].foffset = j0;
                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                        vinfos[1].jointtype = 1;
                                                                                        vinfos[1].foffset = j1;
                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                        vinfos[2].jointtype = 1;
                                                                                        vinfos[2].foffset = j2;
                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                        vinfos[3].jointtype = 1;
                                                                                        vinfos[3].foffset = j3;
                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j4;
                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j5;
                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                        vinfos[6].jointtype = 1;
                                                                                        vinfos[6].foffset = j6;
                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j1)))), 6.28318530717959)));
                                                                            evalcond[1] = new_r22;
                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                            {
                                                                                bgotonextstatement = false;
                                                                                {
                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                    bool j2valid[1] = {false};
                                                                                    _nj2 = 1;
                                                                                    if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                    j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                    if (j2array[0] > IKPI)
                                                                                    {
                                                                                        j2array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j2array[0] < -IKPI)
                                                                                    {
                                                                                        j2array[0] += IK2PI;
                                                                                    }
                                                                                    j2valid[0] = true;
                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                    {
                                                                                        if (!j2valid[ij2])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij2[0] = ij2;
                                                                                        _ij2[1] = -1;
                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                        {
                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j2valid[iij2] = false;
                                                                                                _ij2[1] = iij2;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j2 = j2array[ij2];
                                                                                        cj2 = cj2array[ij2];
                                                                                        sj2 = sj2array[ij2];
                                                                                        {
                                                                                            IkReal evalcond[8];
                                                                                            IkReal x562 = IKcos(j2);
                                                                                            IkReal x563 = IKsin(j2);
                                                                                            IkReal x564 = ((1.0) * sj0);
                                                                                            IkReal x565 = ((1.0) * x563);
                                                                                            IkReal x566 = ((1.0) * x562);
                                                                                            evalcond[0] = (x562 + new_r20);
                                                                                            evalcond[1] = (new_r21 + (((-1.0) * x565)));
                                                                                            evalcond[2] = (((sj0 * x562)) + new_r01);
                                                                                            evalcond[3] = (((sj0 * x563)) + new_r00);
                                                                                            evalcond[4] = ((((-1.0) * cj0 * x566)) + new_r11);
                                                                                            evalcond[5] = ((((-1.0) * new_r02 * x565)) + new_r10);
                                                                                            evalcond[6] = ((((-1.0) * new_r00 * x564)) + ((cj0 * new_r10)) + (((-1.0) * x565)));
                                                                                            evalcond[7] = (((cj0 * new_r11)) + (((-1.0) * x566)) + (((-1.0) * new_r01 * x564)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                            vinfos[0].jointtype = 1;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                            vinfos[1].jointtype = 1;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                            vinfos[2].jointtype = 1;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                            vinfos[3].jointtype = 1;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                            vinfos[6].jointtype = 1;
                                                                                            vinfos[6].foffset = j6;
                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                evalcond[1] = new_r22;
                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                        bool j2valid[1] = {false};
                                                                                        _nj2 = 1;
                                                                                        if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                        j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                        if (j2array[0] > IKPI)
                                                                                        {
                                                                                            j2array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j2array[0] < -IKPI)
                                                                                        {
                                                                                            j2array[0] += IK2PI;
                                                                                        }
                                                                                        j2valid[0] = true;
                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                        {
                                                                                            if (!j2valid[ij2])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij2[0] = ij2;
                                                                                            _ij2[1] = -1;
                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                            {
                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j2valid[iij2] = false;
                                                                                                    _ij2[1] = iij2;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j2 = j2array[ij2];
                                                                                            cj2 = cj2array[ij2];
                                                                                            sj2 = sj2array[ij2];
                                                                                            {
                                                                                                IkReal evalcond[8];
                                                                                                IkReal x567 = IKcos(j2);
                                                                                                IkReal x568 = IKsin(j2);
                                                                                                IkReal x569 = ((1.0) * sj0);
                                                                                                IkReal x570 = ((1.0) * x567);
                                                                                                evalcond[0] = (x568 + new_r21);
                                                                                                evalcond[1] = ((((-1.0) * x570)) + new_r20);
                                                                                                evalcond[2] = (((sj0 * x567)) + new_r01);
                                                                                                evalcond[3] = (((sj0 * x568)) + new_r00);
                                                                                                evalcond[4] = (((new_r02 * x568)) + new_r10);
                                                                                                evalcond[5] = ((((-1.0) * cj0 * x570)) + new_r11);
                                                                                                evalcond[6] = ((((-1.0) * new_r00 * x569)) + (((-1.0) * x568)) + ((cj0 * new_r10)));
                                                                                                evalcond[7] = ((((-1.0) * x570)) + ((cj0 * new_r11)) + (((-1.0) * new_r01 * x569)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                vinfos[0].jointtype = 1;
                                                                                                vinfos[0].foffset = j0;
                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                vinfos[1].jointtype = 1;
                                                                                                vinfos[1].foffset = j1;
                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                vinfos[2].jointtype = 1;
                                                                                                vinfos[2].foffset = j2;
                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                vinfos[3].jointtype = 1;
                                                                                                vinfos[3].foffset = j3;
                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j4;
                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j5;
                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                vinfos[6].jointtype = 1;
                                                                                                vinfos[6].foffset = j6;
                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                std::vector<int> vfree(0);
                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } while (0);
                                                                            if (bgotonextstatement)
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                                                    evalcond[1] = new_r20;
                                                                                    evalcond[2] = new_r02;
                                                                                    evalcond[3] = new_r12;
                                                                                    evalcond[4] = new_r21;
                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                                                    {
                                                                                        bgotonextstatement = false;
                                                                                        {
                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                            bool j2valid[1] = {false};
                                                                                            _nj2 = 1;
                                                                                            IkReal x571 = ((1.0) * new_r01);
                                                                                            if (IKabs(((((-1.0) * cj0 * x571)) + (((-1.0) * new_r00 * sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * sj0 * x571)) + ((cj0 * new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * cj0 * x571)) + (((-1.0) * new_r00 * sj0)))) + IKsqr(((((-1.0) * sj0 * x571)) + ((cj0 * new_r00)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                continue;
                                                                                            j2array[0] = IKatan2(((((-1.0) * cj0 * x571)) + (((-1.0) * new_r00 * sj0))), ((((-1.0) * sj0 * x571)) + ((cj0 * new_r00))));
                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                            if (j2array[0] > IKPI)
                                                                                            {
                                                                                                j2array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j2array[0] < -IKPI)
                                                                                            {
                                                                                                j2array[0] += IK2PI;
                                                                                            }
                                                                                            j2valid[0] = true;
                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                            {
                                                                                                if (!j2valid[ij2])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij2[0] = ij2;
                                                                                                _ij2[1] = -1;
                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                {
                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j2valid[iij2] = false;
                                                                                                        _ij2[1] = iij2;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j2 = j2array[ij2];
                                                                                                cj2 = cj2array[ij2];
                                                                                                sj2 = sj2array[ij2];
                                                                                                {
                                                                                                    IkReal evalcond[8];
                                                                                                    IkReal x572 = IKsin(j2);
                                                                                                    IkReal x573 = IKcos(j2);
                                                                                                    IkReal x574 = ((1.0) * sj0);
                                                                                                    IkReal x575 = ((1.0) * x573);
                                                                                                    IkReal x576 = (sj0 * x572);
                                                                                                    IkReal x577 = (cj0 * x572);
                                                                                                    IkReal x578 = (cj0 * x575);
                                                                                                    evalcond[0] = (((new_r11 * sj0)) + x572 + ((cj0 * new_r01)));
                                                                                                    evalcond[1] = (x577 + new_r01 + ((sj0 * x573)));
                                                                                                    evalcond[2] = (((new_r10 * sj0)) + (((-1.0) * x575)) + ((cj0 * new_r00)));
                                                                                                    evalcond[3] = ((((-1.0) * x572)) + (((-1.0) * new_r00 * x574)) + ((cj0 * new_r10)));
                                                                                                    evalcond[4] = ((((-1.0) * x575)) + (((-1.0) * new_r01 * x574)) + ((cj0 * new_r11)));
                                                                                                    evalcond[5] = ((((-1.0) * x578)) + x576 + new_r00);
                                                                                                    evalcond[6] = ((((-1.0) * x578)) + x576 + new_r11);
                                                                                                    evalcond[7] = ((((-1.0) * x573 * x574)) + (((-1.0) * x577)) + new_r10);
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                    vinfos[0].jointtype = 1;
                                                                                                    vinfos[0].foffset = j0;
                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                    vinfos[1].jointtype = 1;
                                                                                                    vinfos[1].foffset = j1;
                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                    vinfos[2].jointtype = 1;
                                                                                                    vinfos[2].foffset = j2;
                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                    vinfos[3].jointtype = 1;
                                                                                                    vinfos[3].foffset = j3;
                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                    vinfos[4].jointtype = 1;
                                                                                                    vinfos[4].foffset = j4;
                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                    vinfos[5].jointtype = 1;
                                                                                                    vinfos[5].foffset = j5;
                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                    vinfos[6].jointtype = 1;
                                                                                                    vinfos[6].foffset = j6;
                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                    std::vector<int> vfree(0);
                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                                                        evalcond[1] = new_r20;
                                                                                        evalcond[2] = new_r02;
                                                                                        evalcond[3] = new_r12;
                                                                                        evalcond[4] = new_r21;
                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                                                        {
                                                                                            bgotonextstatement = false;
                                                                                            {
                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                bool j2valid[1] = {false};
                                                                                                _nj2 = 1;
                                                                                                IkReal x579 = ((1.0) * sj0);
                                                                                                if (IKabs(((((-1.0) * new_r00 * x579)) + ((cj0 * new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * cj0 * new_r00)) + (((-1.0) * new_r01 * x579)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * new_r00 * x579)) + ((cj0 * new_r01)))) + IKsqr(((((-1.0) * cj0 * new_r00)) + (((-1.0) * new_r01 * x579)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                    continue;
                                                                                                j2array[0] = IKatan2(((((-1.0) * new_r00 * x579)) + ((cj0 * new_r01))), ((((-1.0) * cj0 * new_r00)) + (((-1.0) * new_r01 * x579))));
                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                if (j2array[0] > IKPI)
                                                                                                {
                                                                                                    j2array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j2array[0] < -IKPI)
                                                                                                {
                                                                                                    j2array[0] += IK2PI;
                                                                                                }
                                                                                                j2valid[0] = true;
                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                {
                                                                                                    if (!j2valid[ij2])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij2[0] = ij2;
                                                                                                    _ij2[1] = -1;
                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                    {
                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j2valid[iij2] = false;
                                                                                                            _ij2[1] = iij2;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j2 = j2array[ij2];
                                                                                                    cj2 = cj2array[ij2];
                                                                                                    sj2 = sj2array[ij2];
                                                                                                    {
                                                                                                        IkReal evalcond[8];
                                                                                                        IkReal x580 = IKsin(j2);
                                                                                                        IkReal x581 = IKcos(j2);
                                                                                                        IkReal x582 = ((1.0) * sj0);
                                                                                                        IkReal x583 = ((1.0) * x580);
                                                                                                        IkReal x584 = (sj0 * x581);
                                                                                                        IkReal x585 = ((1.0) * x581);
                                                                                                        IkReal x586 = (cj0 * x583);
                                                                                                        evalcond[0] = (((new_r10 * sj0)) + x581 + ((cj0 * new_r00)));
                                                                                                        evalcond[1] = (((new_r11 * sj0)) + ((cj0 * new_r01)) + (((-1.0) * x583)));
                                                                                                        evalcond[2] = (((sj0 * x580)) + ((cj0 * x581)) + new_r00);
                                                                                                        evalcond[3] = (((cj0 * new_r10)) + (((-1.0) * x583)) + (((-1.0) * new_r00 * x582)));
                                                                                                        evalcond[4] = ((((-1.0) * new_r01 * x582)) + ((cj0 * new_r11)) + (((-1.0) * x585)));
                                                                                                        evalcond[5] = (x584 + new_r01 + (((-1.0) * x586)));
                                                                                                        evalcond[6] = (x584 + new_r10 + (((-1.0) * x586)));
                                                                                                        evalcond[7] = ((((-1.0) * x580 * x582)) + (((-1.0) * cj0 * x585)) + new_r11);
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j0;
                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j1;
                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j2;
                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                        vinfos[3].jointtype = 1;
                                                                                                        vinfos[3].foffset = j3;
                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                        vinfos[4].jointtype = 1;
                                                                                                        vinfos[4].foffset = j4;
                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                        vinfos[5].jointtype = 1;
                                                                                                        vinfos[5].foffset = j5;
                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                        vinfos[6].jointtype = 1;
                                                                                                        vinfos[6].foffset = j6;
                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                        std::vector<int> vfree(0);
                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                        bool bgotonextstatement = true;
                                                                                        do
                                                                                        {
                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                                                            evalcond[1] = new_r12;
                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                            {
                                                                                                bgotonextstatement = false;
                                                                                                {
                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                    bool j2valid[1] = {false};
                                                                                                    _nj2 = 1;
                                                                                                    if (IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10) + IKsqr(new_r11) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                        continue;
                                                                                                    j2array[0] = IKatan2(new_r10, new_r11);
                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                    if (j2array[0] > IKPI)
                                                                                                    {
                                                                                                        j2array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                    {
                                                                                                        j2array[0] += IK2PI;
                                                                                                    }
                                                                                                    j2valid[0] = true;
                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                    {
                                                                                                        if (!j2valid[ij2])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij2[0] = ij2;
                                                                                                        _ij2[1] = -1;
                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                        {
                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j2valid[iij2] = false;
                                                                                                                _ij2[1] = iij2;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j2 = j2array[ij2];
                                                                                                        cj2 = cj2array[ij2];
                                                                                                        sj2 = sj2array[ij2];
                                                                                                        {
                                                                                                            IkReal evalcond[8];
                                                                                                            IkReal x587 = IKcos(j2);
                                                                                                            IkReal x588 = IKsin(j2);
                                                                                                            IkReal x589 = ((1.0) * sj1);
                                                                                                            IkReal x590 = ((1.0) * x587);
                                                                                                            evalcond[0] = (((sj1 * x587)) + new_r20);
                                                                                                            evalcond[1] = ((((-1.0) * x588)) + new_r10);
                                                                                                            evalcond[2] = ((((-1.0) * x590)) + new_r11);
                                                                                                            evalcond[3] = (new_r01 + ((cj1 * x588)));
                                                                                                            evalcond[4] = ((((-1.0) * x588 * x589)) + new_r21);
                                                                                                            evalcond[5] = ((((-1.0) * cj1 * x590)) + new_r00);
                                                                                                            evalcond[6] = (((cj1 * new_r01)) + (((-1.0) * new_r21 * x589)) + x588);
                                                                                                            evalcond[7] = (((cj1 * new_r00)) + (((-1.0) * new_r20 * x589)) + (((-1.0) * x590)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j3;
                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j4;
                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j5;
                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                            vinfos[6].jointtype = 1;
                                                                                                            vinfos[6].foffset = j6;
                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                            std::vector<int> vfree(0);
                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } while (0);
                                                                                        if (bgotonextstatement)
                                                                                        {
                                                                                            bool bgotonextstatement = true;
                                                                                            do
                                                                                            {
                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                                                                evalcond[1] = new_r12;
                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                                {
                                                                                                    bgotonextstatement = false;
                                                                                                    {
                                                                                                        IkReal j2eval[3];
                                                                                                        sj0 = 0;
                                                                                                        cj0 = -1.0;
                                                                                                        j0 = 3.14159265358979;
                                                                                                        j2eval[0] = sj1;
                                                                                                        j2eval[1] = IKsign(sj1);
                                                                                                        j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                        if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j2eval[1];
                                                                                                                sj0 = 0;
                                                                                                                cj0 = -1.0;
                                                                                                                j0 = 3.14159265358979;
                                                                                                                j2eval[0] = sj1;
                                                                                                                if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j2eval[2];
                                                                                                                        sj0 = 0;
                                                                                                                        cj0 = -1.0;
                                                                                                                        j0 = 3.14159265358979;
                                                                                                                        j2eval[0] = cj1;
                                                                                                                        j2eval[1] = sj1;
                                                                                                                        if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                                                                        {
                                                                                                                            {
                                                                                                                                IkReal evalcond[4];
                                                                                                                                bool bgotonextstatement = true;
                                                                                                                                do
                                                                                                                                {
                                                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                                    evalcond[1] = new_r22;
                                                                                                                                    evalcond[2] = new_r01;
                                                                                                                                    evalcond[3] = new_r00;
                                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                    {
                                                                                                                                        bgotonextstatement = false;
                                                                                                                                        {
                                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                            bool j2valid[1] = {false};
                                                                                                                                            _nj2 = 1;
                                                                                                                                            if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                continue;
                                                                                                                                            j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                                            {
                                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                                            }
                                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                                            {
                                                                                                                                                j2array[0] += IK2PI;
                                                                                                                                            }
                                                                                                                                            j2valid[0] = true;
                                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                            {
                                                                                                                                                if (!j2valid[ij2])
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                _ij2[0] = ij2;
                                                                                                                                                _ij2[1] = -1;
                                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                {
                                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                    {
                                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                                        break;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                j2 = j2array[ij2];
                                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                                {
                                                                                                                                                    IkReal evalcond[4];
                                                                                                                                                    IkReal x591 = IKcos(j2);
                                                                                                                                                    IkReal x592 = ((1.0) * (IKsin(j2)));
                                                                                                                                                    evalcond[0] = (x591 + new_r20);
                                                                                                                                                    evalcond[1] = ((((-1.0) * x592)) + new_r21);
                                                                                                                                                    evalcond[2] = ((((-1.0) * x592)) + (((-1.0) * new_r10)));
                                                                                                                                                    evalcond[3] = ((((-1.0) * x591)) + (((-1.0) * new_r11)));
                                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                }

                                                                                                                                                {
                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                } while (0);
                                                                                                                                if (bgotonextstatement)
                                                                                                                                {
                                                                                                                                    bool bgotonextstatement = true;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                                        evalcond[1] = new_r22;
                                                                                                                                        evalcond[2] = new_r01;
                                                                                                                                        evalcond[3] = new_r00;
                                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                        {
                                                                                                                                            bgotonextstatement = false;
                                                                                                                                            {
                                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                                _nj2 = 1;
                                                                                                                                                if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                    continue;
                                                                                                                                                j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                                }
                                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                                }
                                                                                                                                                j2valid[0] = true;
                                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                {
                                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                                    _ij2[1] = -1;
                                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                    {
                                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                        {
                                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                                            break;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                                    {
                                                                                                                                                        IkReal evalcond[4];
                                                                                                                                                        IkReal x593 = IKsin(j2);
                                                                                                                                                        IkReal x594 = ((1.0) * (IKcos(j2)));
                                                                                                                                                        evalcond[0] = (x593 + new_r21);
                                                                                                                                                        evalcond[1] = ((((-1.0) * x594)) + new_r20);
                                                                                                                                                        evalcond[2] = ((((-1.0) * x593)) + (((-1.0) * new_r10)));
                                                                                                                                                        evalcond[3] = ((((-1.0) * x594)) + (((-1.0) * new_r11)));
                                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                    }

                                                                                                                                                    {
                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    } while (0);
                                                                                                                                    if (bgotonextstatement)
                                                                                                                                    {
                                                                                                                                        bool bgotonextstatement = true;
                                                                                                                                        do
                                                                                                                                        {
                                                                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                                                                                                            evalcond[1] = new_r20;
                                                                                                                                            evalcond[2] = new_r02;
                                                                                                                                            evalcond[3] = new_r21;
                                                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                            {
                                                                                                                                                bgotonextstatement = false;
                                                                                                                                                {
                                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                                    _nj2 = 1;
                                                                                                                                                    if (IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                        continue;
                                                                                                                                                    j2array[0] = IKatan2(new_r01, ((-1.0) * new_r11));
                                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                                    }
                                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                                    }
                                                                                                                                                    j2valid[0] = true;
                                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                    {
                                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                                        _ij2[1] = -1;
                                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                        {
                                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                            {
                                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                                break;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                                        {
                                                                                                                                                            IkReal evalcond[4];
                                                                                                                                                            IkReal x595 = IKsin(j2);
                                                                                                                                                            IkReal x596 = ((1.0) * (IKcos(j2)));
                                                                                                                                                            evalcond[0] = (x595 + (((-1.0) * new_r01)));
                                                                                                                                                            evalcond[1] = ((((-1.0) * x595)) + (((-1.0) * new_r10)));
                                                                                                                                                            evalcond[2] = ((((-1.0) * x596)) + (((-1.0) * new_r11)));
                                                                                                                                                            evalcond[3] = ((((-1.0) * x596)) + (((-1.0) * new_r00)));
                                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                        }

                                                                                                                                                        {
                                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } while (0);
                                                                                                                                        if (bgotonextstatement)
                                                                                                                                        {
                                                                                                                                            bool bgotonextstatement = true;
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                                                                                                                evalcond[1] = new_r20;
                                                                                                                                                evalcond[2] = new_r02;
                                                                                                                                                evalcond[3] = new_r21;
                                                                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                                {
                                                                                                                                                    bgotonextstatement = false;
                                                                                                                                                    {
                                                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                        bool j2valid[1] = {false};
                                                                                                                                                        _nj2 = 1;
                                                                                                                                                        if (IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r10)) + IKsqr(new_r00) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                            continue;
                                                                                                                                                        j2array[0] = IKatan2(((-1.0) * new_r10), new_r00);
                                                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                                                        {
                                                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                                                        }
                                                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                                                        {
                                                                                                                                                            j2array[0] += IK2PI;
                                                                                                                                                        }
                                                                                                                                                        j2valid[0] = true;
                                                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                        {
                                                                                                                                                            if (!j2valid[ij2])
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            _ij2[0] = ij2;
                                                                                                                                                            _ij2[1] = -1;
                                                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                            {
                                                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                {
                                                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                                                    break;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            j2 = j2array[ij2];
                                                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                                                            {
                                                                                                                                                                IkReal evalcond[4];
                                                                                                                                                                IkReal x597 = IKcos(j2);
                                                                                                                                                                IkReal x598 = ((1.0) * (IKsin(j2)));
                                                                                                                                                                evalcond[0] = (x597 + (((-1.0) * new_r00)));
                                                                                                                                                                evalcond[1] = ((((-1.0) * x598)) + (((-1.0) * new_r10)));
                                                                                                                                                                evalcond[2] = ((((-1.0) * x597)) + (((-1.0) * new_r11)));
                                                                                                                                                                evalcond[3] = ((((-1.0) * x598)) + (((-1.0) * new_r01)));
                                                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                            }

                                                                                                                                                            {
                                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            } while (0);
                                                                                                                                            if (bgotonextstatement)
                                                                                                                                            {
                                                                                                                                                bool bgotonextstatement = true;
                                                                                                                                                do
                                                                                                                                                {
                                                                                                                                                    evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                                                    {
                                                                                                                                                        bgotonextstatement = false;
                                                                                                                                                        {
                                                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                            bool j2valid[1] = {false};
                                                                                                                                                            _nj2 = 1;
                                                                                                                                                            if (IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r10)) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                                continue;
                                                                                                                                                            j2array[0] = IKatan2(((-1.0) * new_r10), ((-1.0) * new_r11));
                                                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                                                            {
                                                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                                                            }
                                                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                                                            {
                                                                                                                                                                j2array[0] += IK2PI;
                                                                                                                                                            }
                                                                                                                                                            j2valid[0] = true;
                                                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                            {
                                                                                                                                                                if (!j2valid[ij2])
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                _ij2[0] = ij2;
                                                                                                                                                                _ij2[1] = -1;
                                                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                                {
                                                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                    {
                                                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                                                        break;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                j2 = j2array[ij2];
                                                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                                                {
                                                                                                                                                                    IkReal evalcond[6];
                                                                                                                                                                    IkReal x599 = IKsin(j2);
                                                                                                                                                                    IkReal x600 = IKcos(j2);
                                                                                                                                                                    IkReal x601 = ((-1.0) * x600);
                                                                                                                                                                    evalcond[0] = x599;
                                                                                                                                                                    evalcond[1] = (new_r22 * x599);
                                                                                                                                                                    evalcond[2] = x601;
                                                                                                                                                                    evalcond[3] = (new_r22 * x601);
                                                                                                                                                                    evalcond[4] = ((((-1.0) * x599)) + (((-1.0) * new_r10)));
                                                                                                                                                                    evalcond[5] = ((((-1.0) * x600)) + (((-1.0) * new_r11)));
                                                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                    {
                                                                                                                                                                        continue;
                                                                                                                                                                    }
                                                                                                                                                                }

                                                                                                                                                                {
                                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                } while (0);
                                                                                                                                                if (bgotonextstatement)
                                                                                                                                                {
                                                                                                                                                    bool bgotonextstatement = true;
                                                                                                                                                    do
                                                                                                                                                    {
                                                                                                                                                        if (1)
                                                                                                                                                        {
                                                                                                                                                            bgotonextstatement = false;
                                                                                                                                                            continue; // branch miss [j2]
                                                                                                                                                        }
                                                                                                                                                    } while (0);
                                                                                                                                                    if (bgotonextstatement)
                                                                                                                                                    {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            {
                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                _nj2 = 1;
                                                                                                                                CheckValue<IkReal> x602 = IKPowWithIntegerCheck(cj1, -1);
                                                                                                                                if (!x602.valid)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                CheckValue<IkReal> x603 = IKPowWithIntegerCheck(sj1, -1);
                                                                                                                                if (!x603.valid)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if (IKabs((new_r01 * (x602.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * (x603.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01 * (x602.value))) + IKsqr(((-1.0) * new_r20 * (x603.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                    continue;
                                                                                                                                j2array[0] = IKatan2((new_r01 * (x602.value)), ((-1.0) * new_r20 * (x603.value)));
                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                {
                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                }
                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                {
                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                }
                                                                                                                                j2valid[0] = true;
                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                {
                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                    _ij2[1] = -1;
                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                    {
                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                        {
                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                    {
                                                                                                                                        IkReal evalcond[8];
                                                                                                                                        IkReal x604 = IKsin(j2);
                                                                                                                                        IkReal x605 = IKcos(j2);
                                                                                                                                        IkReal x606 = ((1.0) * new_r00);
                                                                                                                                        IkReal x607 = ((1.0) * sj1);
                                                                                                                                        IkReal x608 = ((1.0) * new_r01);
                                                                                                                                        IkReal x609 = ((1.0) * x605);
                                                                                                                                        evalcond[0] = (((sj1 * x605)) + new_r20);
                                                                                                                                        evalcond[1] = ((((-1.0) * x604 * x607)) + new_r21);
                                                                                                                                        evalcond[2] = ((((-1.0) * x604)) + (((-1.0) * new_r10)));
                                                                                                                                        evalcond[3] = ((((-1.0) * new_r11)) + (((-1.0) * x609)));
                                                                                                                                        evalcond[4] = (((cj1 * x604)) + (((-1.0) * x608)));
                                                                                                                                        evalcond[5] = ((((-1.0) * cj1 * x609)) + (((-1.0) * x606)));
                                                                                                                                        evalcond[6] = ((((-1.0) * cj1 * x608)) + x604 + (((-1.0) * new_r21 * x607)));
                                                                                                                                        evalcond[7] = ((((-1.0) * new_r20 * x607)) + (((-1.0) * cj1 * x606)) + (((-1.0) * x609)));
                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                    {
                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                        bool j2valid[1] = {false};
                                                                                                                        _nj2 = 1;
                                                                                                                        CheckValue<IkReal> x610 = IKPowWithIntegerCheck(sj1, -1);
                                                                                                                        if (!x610.valid)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if (IKabs((new_r21 * (x610.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r21 * (x610.value))) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                            continue;
                                                                                                                        j2array[0] = IKatan2((new_r21 * (x610.value)), ((-1.0) * new_r11));
                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                        {
                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                        {
                                                                                                                            j2array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j2valid[0] = true;
                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                        {
                                                                                                                            if (!j2valid[ij2])
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij2[0] = ij2;
                                                                                                                            _ij2[1] = -1;
                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                            {
                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                {
                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j2 = j2array[ij2];
                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                            {
                                                                                                                                IkReal evalcond[8];
                                                                                                                                IkReal x611 = IKsin(j2);
                                                                                                                                IkReal x612 = IKcos(j2);
                                                                                                                                IkReal x613 = ((1.0) * new_r00);
                                                                                                                                IkReal x614 = ((1.0) * sj1);
                                                                                                                                IkReal x615 = ((1.0) * new_r01);
                                                                                                                                IkReal x616 = ((1.0) * x612);
                                                                                                                                evalcond[0] = (((sj1 * x612)) + new_r20);
                                                                                                                                evalcond[1] = ((((-1.0) * x611 * x614)) + new_r21);
                                                                                                                                evalcond[2] = ((((-1.0) * x611)) + (((-1.0) * new_r10)));
                                                                                                                                evalcond[3] = ((((-1.0) * x616)) + (((-1.0) * new_r11)));
                                                                                                                                evalcond[4] = ((((-1.0) * x615)) + ((cj1 * x611)));
                                                                                                                                evalcond[5] = ((((-1.0) * cj1 * x616)) + (((-1.0) * x613)));
                                                                                                                                evalcond[6] = ((((-1.0) * new_r21 * x614)) + (((-1.0) * cj1 * x615)) + x611);
                                                                                                                                evalcond[7] = ((((-1.0) * cj1 * x613)) + (((-1.0) * x616)) + (((-1.0) * new_r20 * x614)));
                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            {
                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                bool j2valid[1] = {false};
                                                                                                                _nj2 = 1;
                                                                                                                CheckValue<IkReal> x617 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                                                                                if (!x617.valid)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                CheckValue<IkReal> x618 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                if (!x618.valid)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x617.value))) + (x618.value));
                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                if (j2array[0] > IKPI)
                                                                                                                {
                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                }
                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                {
                                                                                                                    j2array[0] += IK2PI;
                                                                                                                }
                                                                                                                j2valid[0] = true;
                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                {
                                                                                                                    if (!j2valid[ij2])
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    _ij2[0] = ij2;
                                                                                                                    _ij2[1] = -1;
                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                    {
                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                        {
                                                                                                                            j2valid[iij2] = false;
                                                                                                                            _ij2[1] = iij2;
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    j2 = j2array[ij2];
                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                    {
                                                                                                                        IkReal evalcond[8];
                                                                                                                        IkReal x619 = IKsin(j2);
                                                                                                                        IkReal x620 = IKcos(j2);
                                                                                                                        IkReal x621 = ((1.0) * new_r00);
                                                                                                                        IkReal x622 = ((1.0) * sj1);
                                                                                                                        IkReal x623 = ((1.0) * new_r01);
                                                                                                                        IkReal x624 = ((1.0) * x620);
                                                                                                                        evalcond[0] = (((sj1 * x620)) + new_r20);
                                                                                                                        evalcond[1] = ((((-1.0) * x619 * x622)) + new_r21);
                                                                                                                        evalcond[2] = ((((-1.0) * x619)) + (((-1.0) * new_r10)));
                                                                                                                        evalcond[3] = ((((-1.0) * x624)) + (((-1.0) * new_r11)));
                                                                                                                        evalcond[4] = ((((-1.0) * x623)) + ((cj1 * x619)));
                                                                                                                        evalcond[5] = ((((-1.0) * cj1 * x624)) + (((-1.0) * x621)));
                                                                                                                        evalcond[6] = ((((-1.0) * cj1 * x623)) + (((-1.0) * new_r21 * x622)) + x619);
                                                                                                                        evalcond[7] = ((((-1.0) * cj1 * x621)) + (((-1.0) * x624)) + (((-1.0) * new_r20 * x622)));
                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    {
                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                        std::vector<int> vfree(0);
                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } while (0);
                                                                                            if (bgotonextstatement)
                                                                                            {
                                                                                                bool bgotonextstatement = true;
                                                                                                do
                                                                                                {
                                                                                                    evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                    {
                                                                                                        bgotonextstatement = false;
                                                                                                        {
                                                                                                            IkReal j2eval[1];
                                                                                                            new_r21 = 0;
                                                                                                            new_r20 = 0;
                                                                                                            new_r02 = 0;
                                                                                                            new_r12 = 0;
                                                                                                            j2eval[0] = IKabs(new_r22);
                                                                                                            if (IKabs(j2eval[0]) < 0.0000000100000000)
                                                                                                            {
                                                                                                                continue; // no branches [j2]
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                IkReal op[2 + 1], zeror[2];
                                                                                                                int numroots;
                                                                                                                op[0] = new_r22;
                                                                                                                op[1] = 0;
                                                                                                                op[2] = ((-1.0) * new_r22);
                                                                                                                polyroots2(op, zeror, numroots);
                                                                                                                IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
                                                                                                                int numsolutions = 0;
                                                                                                                for (int ij2 = 0; ij2 < numroots; ++ij2)
                                                                                                                {
                                                                                                                    IkReal htj2 = zeror[ij2];
                                                                                                                    tempj2array[0] = ((2.0) * (atan(htj2)));
                                                                                                                    for (int kj2 = 0; kj2 < 1; ++kj2)
                                                                                                                    {
                                                                                                                        j2array[numsolutions] = tempj2array[kj2];
                                                                                                                        if (j2array[numsolutions] > IKPI)
                                                                                                                        {
                                                                                                                            j2array[numsolutions] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if (j2array[numsolutions] < -IKPI)
                                                                                                                        {
                                                                                                                            j2array[numsolutions] += IK2PI;
                                                                                                                        }
                                                                                                                        sj2array[numsolutions] = IKsin(j2array[numsolutions]);
                                                                                                                        cj2array[numsolutions] = IKcos(j2array[numsolutions]);
                                                                                                                        numsolutions++;
                                                                                                                    }
                                                                                                                }
                                                                                                                bool j2valid[2] = {true, true};
                                                                                                                _nj2 = 2;
                                                                                                                for (int ij2 = 0; ij2 < numsolutions; ++ij2)
                                                                                                                {
                                                                                                                    if (!j2valid[ij2])
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    j2 = j2array[ij2];
                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                    htj2 = IKtan(j2 / 2);

                                                                                                                    _ij2[0] = ij2;
                                                                                                                    _ij2[1] = -1;
                                                                                                                    for (int iij2 = ij2 + 1; iij2 < numsolutions; ++iij2)
                                                                                                                    {
                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                        {
                                                                                                                            j2valid[iij2] = false;
                                                                                                                            _ij2[1] = iij2;
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    {
                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                        std::vector<int> vfree(0);
                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } while (0);
                                                                                                if (bgotonextstatement)
                                                                                                {
                                                                                                    bool bgotonextstatement = true;
                                                                                                    do
                                                                                                    {
                                                                                                        if (1)
                                                                                                        {
                                                                                                            bgotonextstatement = false;
                                                                                                            continue; // branch miss [j2]
                                                                                                        }
                                                                                                    } while (0);
                                                                                                    if (bgotonextstatement)
                                                                                                    {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            {
                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                bool j2valid[1] = {false};
                                                                _nj2 = 1;
                                                                CheckValue<IkReal> x626 = IKPowWithIntegerCheck(sj1, -1);
                                                                if (!x626.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                IkReal x625 = x626.value;
                                                                CheckValue<IkReal> x627 = IKPowWithIntegerCheck(cj0, -1);
                                                                if (!x627.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                CheckValue<IkReal> x628 = IKPowWithIntegerCheck(cj1, -1);
                                                                if (!x628.valid)
                                                                {
                                                                    continue;
                                                                }
                                                                if (IKabs((x625 * (x627.value) * (x628.value) * ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * x625)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x625 * (x627.value) * (x628.value) * ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1)))))) + IKsqr(((-1.0) * new_r20 * x625)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                    continue;
                                                                j2array[0] = IKatan2((x625 * (x627.value) * (x628.value) * ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1))))), ((-1.0) * new_r20 * x625));
                                                                sj2array[0] = IKsin(j2array[0]);
                                                                cj2array[0] = IKcos(j2array[0]);
                                                                if (j2array[0] > IKPI)
                                                                {
                                                                    j2array[0] -= IK2PI;
                                                                }
                                                                else if (j2array[0] < -IKPI)
                                                                {
                                                                    j2array[0] += IK2PI;
                                                                }
                                                                j2valid[0] = true;
                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                {
                                                                    if (!j2valid[ij2])
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij2[0] = ij2;
                                                                    _ij2[1] = -1;
                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                    {
                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                        {
                                                                            j2valid[iij2] = false;
                                                                            _ij2[1] = iij2;
                                                                            break;
                                                                        }
                                                                    }
                                                                    j2 = j2array[ij2];
                                                                    cj2 = cj2array[ij2];
                                                                    sj2 = sj2array[ij2];
                                                                    {
                                                                        IkReal evalcond[12];
                                                                        IkReal x629 = IKsin(j2);
                                                                        IkReal x630 = IKcos(j2);
                                                                        IkReal x631 = ((1.0) * sj1);
                                                                        IkReal x632 = ((1.0) * sj0);
                                                                        IkReal x633 = (cj0 * new_r00);
                                                                        IkReal x634 = (cj0 * cj1);
                                                                        IkReal x635 = (new_r11 * sj0);
                                                                        IkReal x636 = (new_r10 * sj0);
                                                                        IkReal x637 = ((1.0) * x630);
                                                                        IkReal x638 = (cj1 * x629);
                                                                        IkReal x639 = ((1.0) * x629);
                                                                        evalcond[0] = (((sj1 * x630)) + new_r20);
                                                                        evalcond[1] = ((((-1.0) * x629 * x631)) + new_r21);
                                                                        evalcond[2] = (x635 + x638 + ((cj0 * new_r01)));
                                                                        evalcond[3] = ((((-1.0) * new_r00 * x632)) + (((-1.0) * x639)) + ((cj0 * new_r10)));
                                                                        evalcond[4] = ((((-1.0) * new_r01 * x632)) + (((-1.0) * x637)) + ((cj0 * new_r11)));
                                                                        evalcond[5] = (((x629 * x634)) + ((sj0 * x630)) + new_r01);
                                                                        evalcond[6] = ((((-1.0) * cj1 * x637)) + x636 + x633);
                                                                        evalcond[7] = ((((-1.0) * x634 * x637)) + ((sj0 * x629)) + new_r00);
                                                                        evalcond[8] = ((((-1.0) * cj0 * x637)) + ((sj0 * x638)) + new_r11);
                                                                        evalcond[9] = ((((-1.0) * cj0 * x639)) + (((-1.0) * cj1 * x630 * x632)) + new_r10);
                                                                        evalcond[10] = (((new_r01 * x634)) + (((-1.0) * new_r21 * x631)) + x629 + ((cj1 * x635)));
                                                                        evalcond[11] = ((((-1.0) * x637)) + (((-1.0) * new_r20 * x631)) + ((cj1 * x636)) + ((cj1 * x633)));
                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j0;
                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                        vinfos[0].maxsolutions = _nj0;
                                                                        vinfos[1].jointtype = 1;
                                                                        vinfos[1].foffset = j1;
                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                        vinfos[1].maxsolutions = _nj1;
                                                                        vinfos[2].jointtype = 1;
                                                                        vinfos[2].foffset = j2;
                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                        vinfos[2].maxsolutions = _nj2;
                                                                        vinfos[3].jointtype = 1;
                                                                        vinfos[3].foffset = j3;
                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                        vinfos[3].maxsolutions = _nj3;
                                                                        vinfos[4].jointtype = 1;
                                                                        vinfos[4].foffset = j4;
                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                        vinfos[4].maxsolutions = _nj4;
                                                                        vinfos[5].jointtype = 1;
                                                                        vinfos[5].foffset = j5;
                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                        vinfos[5].maxsolutions = _nj5;
                                                                        vinfos[6].jointtype = 1;
                                                                        vinfos[6].foffset = j6;
                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                        vinfos[6].maxsolutions = _nj6;
                                                                        std::vector<int> vfree(0);
                                                                        solutions.AddSolution(vinfos, vfree);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    {
                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                        bool j2valid[1] = {false};
                                                        _nj2 = 1;
                                                        CheckValue<IkReal> x641 = IKPowWithIntegerCheck(sj1, -1);
                                                        if (!x641.valid)
                                                        {
                                                            continue;
                                                        }
                                                        IkReal x640 = x641.value;
                                                        CheckValue<IkReal> x642 = IKPowWithIntegerCheck(sj0, -1);
                                                        if (!x642.valid)
                                                        {
                                                            continue;
                                                        }
                                                        if (IKabs((x640 * (x642.value) * (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * x640)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x640 * (x642.value) * (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1)))))) + IKsqr(((-1.0) * new_r20 * x640)) - 1) <= IKFAST_SINCOS_THRESH)
                                                            continue;
                                                        j2array[0] = IKatan2((x640 * (x642.value) * (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1))))), ((-1.0) * new_r20 * x640));
                                                        sj2array[0] = IKsin(j2array[0]);
                                                        cj2array[0] = IKcos(j2array[0]);
                                                        if (j2array[0] > IKPI)
                                                        {
                                                            j2array[0] -= IK2PI;
                                                        }
                                                        else if (j2array[0] < -IKPI)
                                                        {
                                                            j2array[0] += IK2PI;
                                                        }
                                                        j2valid[0] = true;
                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                        {
                                                            if (!j2valid[ij2])
                                                            {
                                                                continue;
                                                            }
                                                            _ij2[0] = ij2;
                                                            _ij2[1] = -1;
                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                            {
                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                {
                                                                    j2valid[iij2] = false;
                                                                    _ij2[1] = iij2;
                                                                    break;
                                                                }
                                                            }
                                                            j2 = j2array[ij2];
                                                            cj2 = cj2array[ij2];
                                                            sj2 = sj2array[ij2];
                                                            {
                                                                IkReal evalcond[12];
                                                                IkReal x643 = IKsin(j2);
                                                                IkReal x644 = IKcos(j2);
                                                                IkReal x645 = ((1.0) * sj1);
                                                                IkReal x646 = ((1.0) * sj0);
                                                                IkReal x647 = (cj0 * new_r00);
                                                                IkReal x648 = (cj0 * cj1);
                                                                IkReal x649 = (new_r11 * sj0);
                                                                IkReal x650 = (new_r10 * sj0);
                                                                IkReal x651 = ((1.0) * x644);
                                                                IkReal x652 = (cj1 * x643);
                                                                IkReal x653 = ((1.0) * x643);
                                                                evalcond[0] = (((sj1 * x644)) + new_r20);
                                                                evalcond[1] = ((((-1.0) * x643 * x645)) + new_r21);
                                                                evalcond[2] = (x649 + x652 + ((cj0 * new_r01)));
                                                                evalcond[3] = ((((-1.0) * x653)) + (((-1.0) * new_r00 * x646)) + ((cj0 * new_r10)));
                                                                evalcond[4] = ((((-1.0) * x651)) + (((-1.0) * new_r01 * x646)) + ((cj0 * new_r11)));
                                                                evalcond[5] = (((sj0 * x644)) + ((x643 * x648)) + new_r01);
                                                                evalcond[6] = ((((-1.0) * cj1 * x651)) + x647 + x650);
                                                                evalcond[7] = (((sj0 * x643)) + new_r00 + (((-1.0) * x648 * x651)));
                                                                evalcond[8] = (((sj0 * x652)) + (((-1.0) * cj0 * x651)) + new_r11);
                                                                evalcond[9] = ((((-1.0) * cj1 * x644 * x646)) + (((-1.0) * cj0 * x653)) + new_r10);
                                                                evalcond[10] = (((cj1 * x649)) + (((-1.0) * new_r21 * x645)) + ((new_r01 * x648)) + x643);
                                                                evalcond[11] = (((cj1 * x647)) + ((cj1 * x650)) + (((-1.0) * x651)) + (((-1.0) * new_r20 * x645)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                                                {
                                                                    continue;
                                                                }
                                                            }

                                                            {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 1;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            {
                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                bool j2valid[1] = {false};
                                                _nj2 = 1;
                                                CheckValue<IkReal> x654 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                if (!x654.valid)
                                                {
                                                    continue;
                                                }
                                                CheckValue<IkReal> x655 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                                if (!x655.valid)
                                                {
                                                    continue;
                                                }
                                                j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x654.value))) + (x655.value));
                                                sj2array[0] = IKsin(j2array[0]);
                                                cj2array[0] = IKcos(j2array[0]);
                                                if (j2array[0] > IKPI)
                                                {
                                                    j2array[0] -= IK2PI;
                                                }
                                                else if (j2array[0] < -IKPI)
                                                {
                                                    j2array[0] += IK2PI;
                                                }
                                                j2valid[0] = true;
                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                {
                                                    if (!j2valid[ij2])
                                                    {
                                                        continue;
                                                    }
                                                    _ij2[0] = ij2;
                                                    _ij2[1] = -1;
                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                    {
                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                        {
                                                            j2valid[iij2] = false;
                                                            _ij2[1] = iij2;
                                                            break;
                                                        }
                                                    }
                                                    j2 = j2array[ij2];
                                                    cj2 = cj2array[ij2];
                                                    sj2 = sj2array[ij2];
                                                    {
                                                        IkReal evalcond[12];
                                                        IkReal x656 = IKsin(j2);
                                                        IkReal x657 = IKcos(j2);
                                                        IkReal x658 = ((1.0) * sj1);
                                                        IkReal x659 = ((1.0) * sj0);
                                                        IkReal x660 = (cj0 * new_r00);
                                                        IkReal x661 = (cj0 * cj1);
                                                        IkReal x662 = (new_r11 * sj0);
                                                        IkReal x663 = (new_r10 * sj0);
                                                        IkReal x664 = ((1.0) * x657);
                                                        IkReal x665 = (cj1 * x656);
                                                        IkReal x666 = ((1.0) * x656);
                                                        evalcond[0] = (((sj1 * x657)) + new_r20);
                                                        evalcond[1] = ((((-1.0) * x656 * x658)) + new_r21);
                                                        evalcond[2] = (x662 + x665 + ((cj0 * new_r01)));
                                                        evalcond[3] = ((((-1.0) * new_r00 * x659)) + (((-1.0) * x666)) + ((cj0 * new_r10)));
                                                        evalcond[4] = ((((-1.0) * new_r01 * x659)) + (((-1.0) * x664)) + ((cj0 * new_r11)));
                                                        evalcond[5] = (((x656 * x661)) + ((sj0 * x657)) + new_r01);
                                                        evalcond[6] = ((((-1.0) * cj1 * x664)) + x660 + x663);
                                                        evalcond[7] = ((((-1.0) * x661 * x664)) + ((sj0 * x656)) + new_r00);
                                                        evalcond[8] = ((((-1.0) * cj0 * x664)) + ((sj0 * x665)) + new_r11);
                                                        evalcond[9] = ((((-1.0) * cj0 * x666)) + (((-1.0) * cj1 * x657 * x659)) + new_r10);
                                                        evalcond[10] = (x656 + ((cj1 * x662)) + (((-1.0) * new_r21 * x658)) + ((new_r01 * x661)));
                                                        evalcond[11] = ((((-1.0) * new_r20 * x658)) + (((-1.0) * x664)) + ((cj1 * x663)) + ((cj1 * x660)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                                        {
                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j0;
                                                        vinfos[0].indices[0] = _ij0[0];
                                                        vinfos[0].indices[1] = _ij0[1];
                                                        vinfos[0].maxsolutions = _nj0;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j1;
                                                        vinfos[1].indices[0] = _ij1[0];
                                                        vinfos[1].indices[1] = _ij1[1];
                                                        vinfos[1].maxsolutions = _nj1;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j2;
                                                        vinfos[2].indices[0] = _ij2[0];
                                                        vinfos[2].indices[1] = _ij2[1];
                                                        vinfos[2].maxsolutions = _nj2;
                                                        vinfos[3].jointtype = 1;
                                                        vinfos[3].foffset = j3;
                                                        vinfos[3].indices[0] = _ij3[0];
                                                        vinfos[3].indices[1] = _ij3[1];
                                                        vinfos[3].maxsolutions = _nj3;
                                                        vinfos[4].jointtype = 1;
                                                        vinfos[4].foffset = j4;
                                                        vinfos[4].indices[0] = _ij4[0];
                                                        vinfos[4].indices[1] = _ij4[1];
                                                        vinfos[4].maxsolutions = _nj4;
                                                        vinfos[5].jointtype = 1;
                                                        vinfos[5].foffset = j5;
                                                        vinfos[5].indices[0] = _ij5[0];
                                                        vinfos[5].indices[1] = _ij5[1];
                                                        vinfos[5].maxsolutions = _nj5;
                                                        vinfos[6].jointtype = 1;
                                                        vinfos[6].foffset = j6;
                                                        vinfos[6].indices[0] = _ij6[0];
                                                        vinfos[6].indices[1] = _ij6[1];
                                                        vinfos[6].maxsolutions = _nj6;
                                                        std::vector<int> vfree(0);
                                                        solutions.AddSolution(vinfos, vfree);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    IKFAST_API void ComputeFk(const IkReal *j, IkReal *eetrans, IkReal *eerot)
    {
        IkReal x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82, x83;
        x0 = IKcos(j[0]);
        x1 = IKcos(j[1]);
        x2 = IKsin(j[2]);
        x3 = IKcos(j[2]);
        x4 = IKsin(j[0]);
        x5 = IKcos(j[3]);
        x6 = IKsin(j[1]);
        x7 = IKsin(j[3]);
        x8 = IKsin(j[4]);
        x9 = IKcos(j[4]);
        x10 = IKsin(j[6]);
        x11 = IKsin(j[5]);
        x12 = IKcos(j[5]);
        x13 = IKcos(j[6]);
        x14 = ((0.088) * x8);
        x15 = ((1.0) * x4);
        x16 = ((0.0825) * x3);
        x17 = ((0.707106781186548) * x10);
        x18 = ((1.0) * x12);
        x19 = ((1.0) * x7);
        x20 = ((0.707106781186547) * x13);
        x21 = ((0.0825) * x4);
        x22 = ((0.107) * x7);
        x23 = ((0.707106781186547) * x10);
        x24 = ((0.707106781186548) * x13);
        x25 = ((0.384) * x3);
        x26 = ((0.088) * x7);
        x27 = ((0.384) * x4);
        x28 = ((1.0) * x3);
        x29 = ((0.088) * x9);
        x30 = ((0.316) * x6);
        x31 = ((0.107) * x9);
        x32 = ((0.107) * x8);
        x33 = ((1.0) * x11);
        x34 = (x5 * x6);
        x35 = (x6 * x7);
        x36 = (x0 * x1);
        x37 = (x0 * x2);
        x38 = (x1 * x5);
        x39 = (x1 * x3);
        x40 = (x0 * x3);
        x41 = (x1 * x7);
        x42 = ((-1.0) * x12);
        x43 = ((-1.0) * x11);
        x44 = (x2 * x6);
        x45 = (x15 * x2);
        x46 = (x2 * x21);
        x47 = ((0.0825) * x37);
        x48 = (x44 * x8);
        x49 = (x16 * x36);
        x50 = (x1 * x45);
        x51 = (x1 * x16 * x4);
        x52 = (x40 + (((-1.0) * x50)));
        x53 = (x41 + (((-1.0) * x28 * x34)));
        x54 = (((x3 * x35)) + x38);
        x55 = (x45 + (((-1.0) * x28 * x36)));
        x56 = ((((1.0) * x2 * x36)) + ((x15 * x3)));
        x57 = ((-1.0) * x56);
        x58 = ((((-1.0) * x37)) + (((-1.0) * x15 * x39)));
        x59 = (x47 + x51);
        x60 = (x11 * x54);
        x61 = (x52 * x8);
        x62 = (x58 * x7);
        x63 = (x57 * x8);
        x64 = (((x5 * (((((-1.0) * x45)) + ((x3 * x36)))))) + ((x0 * x35)));
        x65 = (((x35 * x4)) + ((x5 * ((x37 + ((x39 * x4)))))));
        x66 = (((x53 * x9)) + x48);
        x67 = (((x0 * x34)) + ((x55 * x7)));
        x68 = ((((-1.0) * x44 * x9)) + ((x53 * x8)));
        x69 = (((x34 * x4)) + x62);
        x70 = (x64 * x9);
        x71 = (x65 * x9);
        x72 = (x11 * x67);
        x73 = (x71 + x61);
        x74 = (((x12 * x66)) + x60);
        x75 = (((x9 * (((((-1.0) * x0 * x28)) + x50)))) + ((x65 * x8)));
        x76 = (x70 + x63);
        x77 = (((x56 * x9)) + ((x64 * x8)));
        x78 = ((((-1.0) * x18 * x66)) + (((-1.0) * x33 * x54)));
        x79 = (x12 * x73);
        x80 = ((((0.707106781186548) * x56 * x9)) + (((0.707106781186548) * x64 * x8)));
        x81 = (x12 * x76);
        x82 = (((x11 * x69)) + x79);
        x83 = (x72 + x81);
        eerot[0] = (((x24 * x83)) + ((x17 * x77)) + (((-1.0) * x20 * x77)) + (((-1.0) * x23 * (((((-1.0) * x18 * x76)) + (((-1.0) * x33 * x67)))))));
        eerot[1] = (((x23 * x77)) + ((x20 * x83)) + ((x17 * ((((x42 * x76)) + ((x43 * x67)))))) + ((x24 * x77)));
        eerot[2] = (((x12 * (((((-1.0) * x0 * x34)) + (((-1.0) * x19 * x55)))))) + ((x11 * x76)));
        IkReal x84 = (x0 * x34);
        eetrans[0] = ((((-1.0) * x46)) + ((x12 * (((((-0.107) * x84)) + (((-1.0) * x22 * x55)))))) + ((x5 * (((((-1.0) * x49)) + x46)))) + (((-0.0825) * x0 * x35)) + ((x7 * (((((-1.0) * x25 * x36)) + ((x2 * x27)))))) + ((x12 * ((((x29 * x64)) + ((x14 * x57)))))) + x49 + (((0.384) * x84)) + ((x11 * ((((x26 * x55)) + (((0.088) * x84)))))) + ((x11 * ((((x31 * x64)) + ((x32 * x57)))))) + ((x0 * x30)));
        eerot[3] = (((x24 * x82)) + ((x17 * x75)) + (((-1.0) * x20 * x75)) + (((-1.0) * x23 * ((((x42 * x73)) + ((x43 * x69)))))));
        eerot[4] = (((x23 * x75)) + ((x20 * x82)) + ((x24 * x75)) + ((x17 * (((((-1.0) * x18 * x73)) + (((-1.0) * x33 * x69)))))));
        eerot[5] = (((x11 * x73)) + ((x12 * (((((-1.0) * x19 * x58)) + (((-1.0) * x15 * x34)))))));
        IkReal x85 = (x34 * x4);
        eetrans[1] = (((x27 * x34)) + ((x12 * ((((x29 * x65)) + ((x14 * x52)))))) + (((-1.0) * x5 * x59)) + ((x30 * x4)) + ((x12 * (((((-0.107) * x85)) + (((-1.0) * x22 * x58)))))) + x59 + ((x11 * ((((x31 * x65)) + ((x32 * x52)))))) + ((x11 * ((((x26 * x58)) + (((0.088) * x85)))))) + (((-1.0) * x21 * x35)) + ((x7 * (((((-1.0) * x1 * x25 * x4)) + (((-0.384) * x37)))))));
        eerot[6] = ((((-1.0) * x20 * x68)) + ((x17 * x68)) + (((-1.0) * x23 * x78)) + ((x24 * x74)));
        eerot[7] = (((x23 * x68)) + ((x17 * x78)) + ((x20 * x74)) + ((x24 * x68)));
        eerot[8] = (((x11 * x66)) + ((x12 * (((((-1.0) * x38)) + (((-1.0) * x19 * x3 * x6)))))));
        IkReal x86 = (x3 * x6);
        eetrans[2] = ((0.333) + ((x11 * ((((x31 * x53)) + ((x32 * x44)))))) + ((x16 * x34)) + (((-1.0) * x16 * x6)) + (((0.384) * x38)) + ((x11 * ((((x26 * x86)) + (((0.088) * x38)))))) + (((-0.0825) * x41)) + ((x12 * (((((-1.0) * x22 * x86)) + (((-0.107) * x38)))))) + ((x12 * ((((x14 * x44)) + ((x29 * x53)))))) + (((0.316) * x1)) + ((x25 * x35)));
    }

    IKFAST_API int GetNumFreeParameters() { return 1; }
    IKFAST_API const int *GetFreeIndices()
    {
        static const int freeindices[] = {6};
        return freeindices;
    }
    IKFAST_API int GetNumJoints() { return 7; }

    IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

    IKFAST_API int GetIkType() { return 0x67000001; }

    IKFAST_API bool ComputeIk(const IkReal *eetrans, const IkReal *eerot, const IkReal *pfree, IkSolutionListBase<IkReal> &solutions)
    {
        IKSolver solver;
        return solver.ComputeIk(eetrans, eerot, pfree, solutions);
    }

    IKFAST_API bool ComputeIk2(const IkReal *eetrans, const IkReal *eerot, const IkReal *pfree, IkSolutionListBase<IkReal> &solutions, void *pOpenRAVEManip)
    {
        IKSolver solver;
        return solver.ComputeIk(eetrans, eerot, pfree, solutions);
    }

    IKFAST_API const char *GetKinematicsHash() { return "<robot:GenericRobot - franka (b413b0b86b8698e636ee38212f2eb35a)>"; }

    IKFAST_API const char *GetIkFastVersion() { return "0x1000004b"; }

} // namespace ik_franka
