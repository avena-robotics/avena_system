#include <memory>
#include <string>
#include <chrono>
#include <sstream>

#include "custom_interfaces/action/simple_action.hpp"
#include "rclcpp/rclcpp.hpp"
#include "rclcpp_action/rclcpp_action.hpp"
#include "rclcpp_components/register_node_macro.hpp"

namespace cli
{
class @ACTION_NAME@Client : public rclcpp::Node
{
public:
  using SimpleAction = custom_interfaces::action::SimpleAction;
  using GoalHandleSimpleAction = rclcpp_action::ClientGoalHandle<SimpleAction>;

  // DETECT_CLIENT_PUBLIC
  explicit @ACTION_NAME@Client(const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions())
  : Node("@ACTION_NAME@" + std::string("_cli"), node_options)
  {
    this->client_ptr_ = rclcpp_action::create_client<SimpleAction>(
      this->get_node_base_interface(),
      this->get_node_graph_interface(),
      this->get_node_logging_interface(),
      this->get_node_waitables_interface(),
      "@ACTION_NAME@");

    this->timer_ = this->create_wall_timer(
      std::chrono::milliseconds(10),
      std::bind(&@ACTION_NAME@Client::send_goal, this));
  }

  // DETECT_CLIENT_PUBLIC
  void send_goal()
  {
    using namespace std::placeholders;
    this->timer_->cancel();

    if (!this->client_ptr_->wait_for_action_server(std::chrono::seconds(10))) {
      RCLCPP_ERROR(this->get_logger(), "Action server not available after waiting");
      rclcpp::shutdown();
      return;
    }

    auto goal_msg = SimpleAction::Goal();
    RCLCPP_INFO(this->get_logger(), "Sending goal");
    auto send_goal_options = rclcpp_action::Client<SimpleAction>::SendGoalOptions();
    send_goal_options.goal_response_callback =
      std::bind(&@ACTION_NAME@Client::goal_response_callback, this, _1);
    send_goal_options.feedback_callback =
      std::bind(&@ACTION_NAME@Client::feedback_callback, this, _1, _2);
    send_goal_options.result_callback =
      std::bind(&@ACTION_NAME@Client::result_callback, this, _1);
    this->client_ptr_->async_send_goal(goal_msg, send_goal_options);

  }

private:
  rclcpp_action::Client<SimpleAction>::SharedPtr client_ptr_;
  rclcpp::TimerBase::SharedPtr timer_;

  void goal_response_callback(std::shared_future<GoalHandleSimpleAction::SharedPtr> future)
  {
    auto goal_handle = future.get();
    if (!goal_handle) {
      RCLCPP_ERROR(this->get_logger(), "Goal was rejected by server");
    } else {
      RCLCPP_INFO(this->get_logger(), "Goal accepted by server, waiting for result");
    }
  }

  void feedback_callback(
    GoalHandleSimpleAction::SharedPtr,
    const std::shared_ptr<const SimpleAction::Feedback> /*feedback*/)
  {
  }

  void result_callback(const GoalHandleSimpleAction::WrappedResult & result)
  {
    switch (result.code) {
      case rclcpp_action::ResultCode::SUCCEEDED:
        RCLCPP_INFO(this->get_logger(), "Goal succeeded");
        break;
      case rclcpp_action::ResultCode::ABORTED:
        RCLCPP_ERROR(this->get_logger(), "Goal was aborted");
        break;
      case rclcpp_action::ResultCode::CANCELED:
        RCLCPP_ERROR(this->get_logger(), "Goal was canceled");
        break;
      default:
        RCLCPP_ERROR(this->get_logger(), "Unknown result code");
        break;
    }
    rclcpp::shutdown();
  }
};  // class @ACTION_NAME@Client
}  // namespace cli
RCLCPP_COMPONENTS_REGISTER_NODE(cli::@ACTION_NAME@Client)
